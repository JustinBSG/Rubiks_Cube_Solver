
Camera CubeMX v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002408  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c64  08002c64  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08002c64  08002c64  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c64  08002c64  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08002c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  200000a8  08002d14  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002d14  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b4d  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213a  00000000  00000000  00026c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c4  00000000  00000000  00029590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017676  00000000  00000000  00029b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2e4  00000000  00000000  000411ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077a99  00000000  00000000  0004c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d48  00000000  00000000  000c3f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  000c5c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	00000000 	.word	0x00000000
 8000204:	080025d4 	.word	0x080025d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000ac 	.word	0x200000ac
 8000220:	080025d4 	.word	0x080025d4

08000224 <checkingAllFaces>:

void printArray(char* Array) {
	LCD_DrawString(10, 260, Array);
}

int checkingAllFaces(char* AllFaces) {
 8000224:	b480      	push	{r7}
 8000226:	b08b      	sub	sp, #44	; 0x2c
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	int countWhite = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
	int countOrange = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
	int countRed = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	61fb      	str	r3, [r7, #28]
	int countBlue = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
	int countGreen = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
	int countYellow = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	613b      	str	r3, [r7, #16]
	for (int i=0; i<54; ++i) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e037      	b.n	80002ba <checkingAllFaces+0x96>
		if (AllFaces[i] == 'W') countWhite++;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b57      	cmp	r3, #87	; 0x57
 8000254:	d103      	bne.n	800025e <checkingAllFaces+0x3a>
 8000256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000258:	3301      	adds	r3, #1
 800025a:	627b      	str	r3, [r7, #36]	; 0x24
 800025c:	e02a      	b.n	80002b4 <checkingAllFaces+0x90>
		else if (AllFaces[i] == 'O') countOrange++;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b4f      	cmp	r3, #79	; 0x4f
 8000268:	d103      	bne.n	8000272 <checkingAllFaces+0x4e>
 800026a:	6a3b      	ldr	r3, [r7, #32]
 800026c:	3301      	adds	r3, #1
 800026e:	623b      	str	r3, [r7, #32]
 8000270:	e020      	b.n	80002b4 <checkingAllFaces+0x90>
		else if (AllFaces[i] == 'R') countRed++;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b52      	cmp	r3, #82	; 0x52
 800027c:	d103      	bne.n	8000286 <checkingAllFaces+0x62>
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	3301      	adds	r3, #1
 8000282:	61fb      	str	r3, [r7, #28]
 8000284:	e016      	b.n	80002b4 <checkingAllFaces+0x90>
		else if (AllFaces[i] == 'B') countBlue++;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b42      	cmp	r3, #66	; 0x42
 8000290:	d103      	bne.n	800029a <checkingAllFaces+0x76>
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	3301      	adds	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
 8000298:	e00c      	b.n	80002b4 <checkingAllFaces+0x90>
		else if (AllFaces[i] == 'G') countGreen++;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b47      	cmp	r3, #71	; 0x47
 80002a4:	d103      	bne.n	80002ae <checkingAllFaces+0x8a>
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3301      	adds	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
 80002ac:	e002      	b.n	80002b4 <checkingAllFaces+0x90>
		else countYellow++;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	3301      	adds	r3, #1
 80002b2:	613b      	str	r3, [r7, #16]
	for (int i=0; i<54; ++i) {
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2b35      	cmp	r3, #53	; 0x35
 80002be:	ddc4      	ble.n	800024a <checkingAllFaces+0x26>
	}
	if (countWhite!=9 || countOrange!=9 || countRed!=9 || countBlue!=9 || countGreen!=9 || countYellow!= 9) {
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	2b09      	cmp	r3, #9
 80002c4:	d10e      	bne.n	80002e4 <checkingAllFaces+0xc0>
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	2b09      	cmp	r3, #9
 80002ca:	d10b      	bne.n	80002e4 <checkingAllFaces+0xc0>
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	d108      	bne.n	80002e4 <checkingAllFaces+0xc0>
 80002d2:	69bb      	ldr	r3, [r7, #24]
 80002d4:	2b09      	cmp	r3, #9
 80002d6:	d105      	bne.n	80002e4 <checkingAllFaces+0xc0>
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	2b09      	cmp	r3, #9
 80002dc:	d102      	bne.n	80002e4 <checkingAllFaces+0xc0>
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	2b09      	cmp	r3, #9
 80002e2:	d001      	beq.n	80002e8 <checkingAllFaces+0xc4>
		return 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	e000      	b.n	80002ea <checkingAllFaces+0xc6>
	}
	return 1;
 80002e8:	2301      	movs	r3, #1
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	372c      	adds	r7, #44	; 0x2c
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <CameraWithErrorCorrection>:

int CameraWithErrorCorrection(char* AllFaces) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af02      	add	r7, sp, #8
 80002fa:	6078      	str	r0, [r7, #4]
	  // macXPT2046_CS_DISABLE();
	// while( ! XPT2046_Touch_Calibrate () );
	LCD_Clear ( 0, 0, 240, 320, GREY );
 80002fc:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000306:	22f0      	movs	r2, #240	; 0xf0
 8000308:	2100      	movs	r1, #0
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fe69 	bl	8000fe2 <LCD_Clear>
	for (int NumOfFaces=0; NumOfFaces<6; ++NumOfFaces) {
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	bf00      	nop
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	2b05      	cmp	r3, #5
 800031a:	dc28      	bgt.n	800036e <CameraWithErrorCorrection+0x7a>
		char SquareOfOneFace[9];
		// Need signal
		// if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
		// 	HAL_Delay(50);
		// 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
				while(Ov7725_Init() != SUCCESS);
 800031c:	bf00      	nop
 800031e:	f000 f865 	bl	80003ec <Ov7725_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b01      	cmp	r3, #1
 8000326:	d1fa      	bne.n	800031e <CameraWithErrorCorrection+0x2a>
			  	Ov7725_vsync = 0;
 8000328:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <CameraWithErrorCorrection+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1000);
 800032e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000332:	f001 f8ed 	bl	8001510 <HAL_Delay>
				 while(1) {
					if (Ov7725_vsync == 2)
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <CameraWithErrorCorrection+0xdc>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d1fb      	bne.n	8000336 <CameraWithErrorCorrection+0x42>
						{
							FIFO_PREPARE;
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <CameraWithErrorCorrection+0xe0>)
 8000340:	2204      	movs	r2, #4
 8000342:	615a      	str	r2, [r3, #20]
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <CameraWithErrorCorrection+0xe4>)
 8000346:	2220      	movs	r2, #32
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <CameraWithErrorCorrection+0xe4>)
 800034c:	2220      	movs	r2, #32
 800034e:	611a      	str	r2, [r3, #16]
 8000350:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <CameraWithErrorCorrection+0xe0>)
 8000352:	2204      	movs	r2, #4
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <CameraWithErrorCorrection+0xe4>)
 8000358:	2220      	movs	r2, #32
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <CameraWithErrorCorrection+0xe4>)
 800035e:	2220      	movs	r2, #32
 8000360:	611a      	str	r2, [r3, #16]
//							ReadSquare(SquareOfOneFace);
//							return;
							 ImagDisp();
 8000362:	f000 f88d 	bl	8000480 <ImagDisp>
							Ov7725_vsync = 0;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <CameraWithErrorCorrection+0xdc>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
					if (Ov7725_vsync == 2)
 800036c:	e7e3      	b.n	8000336 <CameraWithErrorCorrection+0x42>
				writeDataIntoAllFaces(AllFaces, SquareOfOneFace, NumOfFaces);
				HAL_Delay(500);
		// 	}
		// }
	}
	LCD_Clear ( 0, 0, 240, 320, GREY );
 800036e:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000378:	22f0      	movs	r2, #240	; 0xf0
 800037a:	2100      	movs	r1, #0
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fe30 	bl	8000fe2 <LCD_Clear>
	LCD_DrawString(10, 10, "All faces colors are: ");
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <CameraWithErrorCorrection+0xe8>)
 8000384:	210a      	movs	r1, #10
 8000386:	200a      	movs	r0, #10
 8000388:	f000 fe94 	bl	80010b4 <LCD_DrawString>
	LCD_DrawString(10, 30, AllFaces);
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	211e      	movs	r1, #30
 8000390:	200a      	movs	r0, #10
 8000392:	f000 fe8f 	bl	80010b4 <LCD_DrawString>
	if (checkingAllFaces(AllFaces)) {
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f7ff ff44 	bl	8000224 <checkingAllFaces>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00b      	beq.n	80003ba <CameraWithErrorCorrection+0xc6>
		LCD_DrawString(20, 130, "# of colors are correct");
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <CameraWithErrorCorrection+0xec>)
 80003a4:	2182      	movs	r1, #130	; 0x82
 80003a6:	2014      	movs	r0, #20
 80003a8:	f000 fe84 	bl	80010b4 <LCD_DrawString>
		LCD_DrawString(20, 150, "Proceed to next process...");
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <CameraWithErrorCorrection+0xf0>)
 80003ae:	2196      	movs	r1, #150	; 0x96
 80003b0:	2014      	movs	r0, #20
 80003b2:	f000 fe7f 	bl	80010b4 <LCD_DrawString>
		return 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e005      	b.n	80003c6 <CameraWithErrorCorrection+0xd2>
	} else {
		LCD_DrawString(20, 130, "# of colors are not correct");
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <CameraWithErrorCorrection+0xf4>)
 80003bc:	2182      	movs	r1, #130	; 0x82
 80003be:	2014      	movs	r0, #20
 80003c0:	f000 fe78 	bl	80010b4 <LCD_DrawString>
		return 0;
 80003c4:	2300      	movs	r3, #0
	}
	// printArray(AllFaces+9*3, 9*3);

}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000010c 	.word	0x2000010c
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40011000 	.word	0x40011000
 80003dc:	080025ec 	.word	0x080025ec
 80003e0:	08002604 	.word	0x08002604
 80003e4:	0800261c 	.word	0x0800261c
 80003e8:	08002638 	.word	0x08002638

080003ec <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 80003f6:	2300      	movs	r3, #0
 80003f8:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	2012      	movs	r0, #18
 80003fe:	f000 f999 	bl	8000734 <SCCB_WriteByte>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d101      	bne.n	800040c <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000408:	2300      	movs	r3, #0
 800040a:	e030      	b.n	800046e <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 800040c:	1d7b      	adds	r3, r7, #5
 800040e:	220b      	movs	r2, #11
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f9bd 	bl	8000792 <SCCB_ReadByte>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d101      	bne.n	8000422 <Ov7725_Init+0x36>
	{
		return ERROR;
 800041e:	2300      	movs	r3, #0
 8000420:	e025      	b.n	800046e <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 8000422:	797b      	ldrb	r3, [r7, #5]
 8000424:	2b21      	cmp	r3, #33	; 0x21
 8000426:	d11f      	bne.n	8000468 <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000428:	2300      	movs	r3, #0
 800042a:	80fb      	strh	r3, [r7, #6]
 800042c:	e015      	b.n	800045a <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 800042e:	88fb      	ldrh	r3, [r7, #6]
 8000430:	4a11      	ldr	r2, [pc, #68]	; (8000478 <Ov7725_Init+0x8c>)
 8000432:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000436:	b29a      	uxth	r2, r3
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	490f      	ldr	r1, [pc, #60]	; (8000478 <Ov7725_Init+0x8c>)
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	440b      	add	r3, r1
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	4619      	mov	r1, r3
 8000444:	4610      	mov	r0, r2
 8000446:	f000 f975 	bl	8000734 <SCCB_WriteByte>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d101      	bne.n	8000454 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000450:	2300      	movs	r3, #0
 8000452:	e00c      	b.n	800046e <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	3301      	adds	r3, #1
 8000458:	80fb      	strh	r3, [r7, #6]
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <Ov7725_Init+0x90>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	88fa      	ldrh	r2, [r7, #6]
 8000462:	429a      	cmp	r2, r3
 8000464:	d3e3      	bcc.n	800042e <Ov7725_Init+0x42>
 8000466:	e001      	b.n	800046c <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000468:	2300      	movs	r3, #0
 800046a:	e000      	b.n	800046e <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 800046c:	2301      	movs	r3, #1
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000000 	.word	0x20000000
 800047c:	2000009a 	.word	0x2000009a

08000480 <ImagDisp>:

void ImagDisp(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
	uint16_t i, j;
	uint16_t Camera_Data;
	
	LCD_Cam_Gram();
 8000486:	f000 fe44 	bl	8001112 <LCD_Cam_Gram>
	
	for(i = 0; i < 240; i++)
 800048a:	2300      	movs	r3, #0
 800048c:	80fb      	strh	r3, [r7, #6]
 800048e:	e02c      	b.n	80004ea <ImagDisp+0x6a>
	{
		for(j = 0; j < 320; j++)
 8000490:	2300      	movs	r3, #0
 8000492:	80bb      	strh	r3, [r7, #4]
 8000494:	e022      	b.n	80004dc <ImagDisp+0x5c>
		{
			READ_FIFO_PIXEL(Camera_Data);		
 8000496:	2300      	movs	r3, #0
 8000498:	807b      	strh	r3, [r7, #2]
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <ImagDisp+0x80>)
 800049c:	2220      	movs	r2, #32
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <ImagDisp+0x84>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004aa:	807b      	strh	r3, [r7, #2]
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <ImagDisp+0x80>)
 80004ae:	2220      	movs	r2, #32
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <ImagDisp+0x80>)
 80004b4:	2220      	movs	r2, #32
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <ImagDisp+0x84>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	0a1b      	lsrs	r3, r3, #8
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	807b      	strh	r3, [r7, #2]
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <ImagDisp+0x80>)
 80004ca:	2220      	movs	r2, #32
 80004cc:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fbe5 	bl	8000ca0 <LCD_Write_Data>
		for(j = 0; j < 320; j++)
 80004d6:	88bb      	ldrh	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	80bb      	strh	r3, [r7, #4]
 80004dc:	88bb      	ldrh	r3, [r7, #4]
 80004de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80004e2:	d3d8      	bcc.n	8000496 <ImagDisp+0x16>
	for(i = 0; i < 240; i++)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	3301      	adds	r3, #1
 80004e8:	80fb      	strh	r3, [r7, #6]
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	2bef      	cmp	r3, #239	; 0xef
 80004ee:	d9cf      	bls.n	8000490 <ImagDisp+0x10>
		}
	}
	HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f001 f80c 	bl	8001510 <HAL_Delay>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40011000 	.word	0x40011000
 8000504:	40010c00 	.word	0x40010c00

08000508 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 800050e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000512:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000514:	e002      	b.n	800051c <SCCB_delay+0x14>
   { 
     i--; 
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	3b01      	subs	r3, #1
 800051a:	80fb      	strh	r3, [r7, #6]
   while(i) 
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f9      	bne.n	8000516 <SCCB_delay+0xe>
   } 
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	SDA_H;
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <SCCB_Start+0x54>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	611a      	str	r2, [r3, #16]
	SCL_H;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <SCCB_Start+0x54>)
 800053c:	2240      	movs	r2, #64	; 0x40
 800053e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000540:	f7ff ffe2 	bl	8000508 <SCCB_delay>
	if(!SDA_read)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	480f      	ldr	r0, [pc, #60]	; (8000584 <SCCB_Start+0x54>)
 8000548:	f001 faa8 	bl	8001a9c <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <SCCB_Start+0x26>
	return DISABLE;	
 8000552:	2300      	movs	r3, #0
 8000554:	e013      	b.n	800057e <SCCB_Start+0x4e>
	SDA_L;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <SCCB_Start+0x54>)
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800055c:	f7ff ffd4 	bl	8000508 <SCCB_delay>
	if(SDA_read) 
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <SCCB_Start+0x54>)
 8000564:	f001 fa9a 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SCCB_Start+0x42>
	return DISABLE;	
 800056e:	2300      	movs	r3, #0
 8000570:	e005      	b.n	800057e <SCCB_Start+0x4e>
	SDA_L;
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SCCB_Start+0x54>)
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000578:	f7ff ffc6 	bl	8000508 <SCCB_delay>
	return ENABLE;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40011000 	.word	0x40011000

08000588 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	SCL_L;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <SCCB_Stop+0x30>)
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000592:	f7ff ffb9 	bl	8000508 <SCCB_delay>
	SDA_L;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <SCCB_Stop+0x30>)
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800059c:	f7ff ffb4 	bl	8000508 <SCCB_delay>
	SCL_H;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <SCCB_Stop+0x30>)
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80005a6:	f7ff ffaf 	bl	8000508 <SCCB_delay>
	SDA_H;
 80005aa:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <SCCB_Stop+0x30>)
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80005b0:	f7ff ffaa 	bl	8000508 <SCCB_delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40011000 	.word	0x40011000

080005bc <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	SCL_L;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <SCCB_Ack+0x30>)
 80005c2:	2240      	movs	r2, #64	; 0x40
 80005c4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80005c6:	f7ff ff9f 	bl	8000508 <SCCB_delay>
	SDA_L;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SCCB_Ack+0x30>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80005d0:	f7ff ff9a 	bl	8000508 <SCCB_delay>
	SCL_H;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SCCB_Ack+0x30>)
 80005d6:	2240      	movs	r2, #64	; 0x40
 80005d8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80005da:	f7ff ff95 	bl	8000508 <SCCB_delay>
	SCL_L;
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <SCCB_Ack+0x30>)
 80005e0:	2240      	movs	r2, #64	; 0x40
 80005e2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80005e4:	f7ff ff90 	bl	8000508 <SCCB_delay>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40011000 	.word	0x40011000

080005f0 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	SCL_L;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <SCCB_NoAck+0x30>)
 80005f6:	2240      	movs	r2, #64	; 0x40
 80005f8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80005fa:	f7ff ff85 	bl	8000508 <SCCB_delay>
	SDA_H;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCCB_NoAck+0x30>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000604:	f7ff ff80 	bl	8000508 <SCCB_delay>
	SCL_H;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SCCB_NoAck+0x30>)
 800060a:	2240      	movs	r2, #64	; 0x40
 800060c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800060e:	f7ff ff7b 	bl	8000508 <SCCB_delay>
	SCL_L;
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <SCCB_NoAck+0x30>)
 8000614:	2240      	movs	r2, #64	; 0x40
 8000616:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000618:	f7ff ff76 	bl	8000508 <SCCB_delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40011000 	.word	0x40011000

08000624 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	SCL_L;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <SCCB_WaitAck+0x48>)
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800062e:	f7ff ff6b 	bl	8000508 <SCCB_delay>
	SDA_H;			
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <SCCB_WaitAck+0x48>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000638:	f7ff ff66 	bl	8000508 <SCCB_delay>
	SCL_H;
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <SCCB_WaitAck+0x48>)
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000642:	f7ff ff61 	bl	8000508 <SCCB_delay>
	if(SDA_read)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <SCCB_WaitAck+0x48>)
 800064a:	f001 fa27 	bl	8001a9c <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d004      	beq.n	800065e <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <SCCB_WaitAck+0x48>)
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	615a      	str	r2, [r3, #20]
      return DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	e003      	b.n	8000666 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 800065e:	4b03      	ldr	r3, [pc, #12]	; (800066c <SCCB_WaitAck+0x48>)
 8000660:	2240      	movs	r2, #64	; 0x40
 8000662:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40011000 	.word	0x40011000

08000670 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 800067a:	2308      	movs	r3, #8
 800067c:	73fb      	strb	r3, [r7, #15]
    while(i--)
 800067e:	e019      	b.n	80006b4 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <SCCB_SendByte+0x5c>)
 8000682:	2240      	movs	r2, #64	; 0x40
 8000684:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000686:	f7ff ff3f 	bl	8000508 <SCCB_delay>
      if(SendByte&0x80)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	da03      	bge.n	800069a <SCCB_SendByte+0x2a>
        SDA_H;  
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <SCCB_SendByte+0x5c>)
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	e002      	b.n	80006a0 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <SCCB_SendByte+0x5c>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80006a6:	f7ff ff2f 	bl	8000508 <SCCB_delay>
		SCL_H;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <SCCB_SendByte+0x5c>)
 80006ac:	2240      	movs	r2, #64	; 0x40
 80006ae:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 80006b0:	f7ff ff2a 	bl	8000508 <SCCB_delay>
    while(i--)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	73fa      	strb	r2, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1e0      	bne.n	8000680 <SCCB_SendByte+0x10>
    }
    SCL_L;
 80006be:	4b03      	ldr	r3, [pc, #12]	; (80006cc <SCCB_SendByte+0x5c>)
 80006c0:	2240      	movs	r2, #64	; 0x40
 80006c2:	615a      	str	r2, [r3, #20]
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40011000 	.word	0x40011000

080006d0 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    uint8_t i=8;
 80006d6:	2308      	movs	r3, #8
 80006d8:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <SCCB_ReceiveByte+0x60>)
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	611a      	str	r2, [r3, #16]
    while(i--)
 80006e4:	e017      	b.n	8000716 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <SCCB_ReceiveByte+0x60>)
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 80006f2:	f7ff ff09 	bl	8000508 <SCCB_delay>
	  SCL_H;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <SCCB_ReceiveByte+0x60>)
 80006f8:	2240      	movs	r2, #64	; 0x40
 80006fa:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 80006fc:	f7ff ff04 	bl	8000508 <SCCB_delay>
      if(SDA_read)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <SCCB_ReceiveByte+0x60>)
 8000704:	f001 f9ca 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	71fa      	strb	r2, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1e2      	bne.n	80006e6 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SCCB_ReceiveByte+0x60>)
 8000722:	2240      	movs	r2, #64	; 0x40
 8000724:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000726:	79bb      	ldrb	r3, [r7, #6]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40011000 	.word	0x40011000

08000734 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	4613      	mov	r3, r2
 8000742:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000744:	f7ff fef4 	bl	8000530 <SCCB_Start>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	e01b      	b.n	800078a <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000752:	2042      	movs	r0, #66	; 0x42
 8000754:	f7ff ff8c 	bl	8000670 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000758:	f7ff ff64 	bl	8000624 <SCCB_WaitAck>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d103      	bne.n	800076a <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000762:	f7ff ff11 	bl	8000588 <SCCB_Stop>
		return DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	e00f      	b.n	800078a <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff7e 	bl	8000670 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000774:	f7ff ff56 	bl	8000624 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff78 	bl	8000670 <SCCB_SendByte>
    SCCB_WaitAck();   
 8000780:	f7ff ff50 	bl	8000624 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000784:	f7ff ff00 	bl	8000588 <SCCB_Stop>
    return ENABLE;
 8000788:	2301      	movs	r3, #1
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	807b      	strh	r3, [r7, #2]
 800079e:	4613      	mov	r3, r2
 80007a0:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80007a2:	f7ff fec5 	bl	8000530 <SCCB_Start>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e040      	b.n	8000832 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 80007b0:	2042      	movs	r0, #66	; 0x42
 80007b2:	f7ff ff5d 	bl	8000670 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80007b6:	f7ff ff35 	bl	8000624 <SCCB_WaitAck>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d103      	bne.n	80007c8 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 80007c0:	f7ff fee2 	bl	8000588 <SCCB_Stop>
		return DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e034      	b.n	8000832 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 80007c8:	787b      	ldrb	r3, [r7, #1]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff50 	bl	8000670 <SCCB_SendByte>
    SCCB_WaitAck();	
 80007d0:	f7ff ff28 	bl	8000624 <SCCB_WaitAck>
    SCCB_Stop(); 
 80007d4:	f7ff fed8 	bl	8000588 <SCCB_Stop>
	
    if(!SCCB_Start())
 80007d8:	f7ff feaa 	bl	8000530 <SCCB_Start>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e025      	b.n	8000832 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 80007e6:	2043      	movs	r0, #67	; 0x43
 80007e8:	f7ff ff42 	bl	8000670 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 80007ec:	f7ff ff1a 	bl	8000624 <SCCB_WaitAck>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d117      	bne.n	8000826 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 80007f6:	f7ff fec7 	bl	8000588 <SCCB_Stop>
		return DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e019      	b.n	8000832 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 80007fe:	f7ff ff67 	bl	80006d0 <SCCB_ReceiveByte>
 8000802:	4603      	mov	r3, r0
 8000804:	b2da      	uxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d102      	bne.n	8000816 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000810:	f7ff feee 	bl	80005f0 <SCCB_NoAck>
 8000814:	e001      	b.n	800081a <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000816:	f7ff fed1 	bl	80005bc <SCCB_Ack>
	  }
      pBuffer++;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
      length--;
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	3b01      	subs	r3, #1
 8000824:	807b      	strh	r3, [r7, #2]
    while(length)
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e8      	bne.n	80007fe <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 800082c:	f7ff feac 	bl	8000588 <SCCB_Stop>
    return ENABLE;
 8000830:	2301      	movs	r3, #1
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000856:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800085a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_FSMC_Init+0xbc>)
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <MX_FSMC_Init+0xc0>)
 8000860:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_FSMC_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000876:	2210      	movs	r2, #16
 8000878:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_FSMC_Init+0xbc>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_FSMC_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_FSMC_Init+0xbc>)
 8000894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_FSMC_Init+0xbc>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_FSMC_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_FSMC_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_FSMC_Init+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80008b2:	230f      	movs	r3, #15
 80008b4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80008be:	230f      	movs	r3, #15
 80008c0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80008c2:	2310      	movs	r3, #16
 80008c4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80008c6:	2311      	movs	r3, #17
 80008c8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <MX_FSMC_Init+0xbc>)
 80008d6:	f001 fd21 	bl	800231c <HAL_SRAM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80008e0:	f000 fca3 	bl	800122a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_FSMC_Init+0xc4>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <MX_FSMC_Init+0xc4>)
 80008ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ee:	61d3      	str	r3, [r2, #28]

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000c4 	.word	0x200000c4
 80008fc:	a0000104 	.word	0xa0000104
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_FSMC_MspInit+0x78>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d129      	bne.n	8000974 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_FSMC_MspInit+0x78>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_FSMC_MspInit+0x7c>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <HAL_FSMC_MspInit+0x7c>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_FSMC_MspInit+0x7c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800093e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000942:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <HAL_FSMC_MspInit+0x80>)
 8000954:	f000 ff0a 	bl	800176c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000958:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800095c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <HAL_FSMC_MspInit+0x84>)
 800096e:	f000 fefd 	bl	800176c <HAL_GPIO_Init>
 8000972:	e000      	b.n	8000976 <HAL_FSMC_MspInit+0x72>
    return;
 8000974:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000108 	.word	0x20000108
 8000980:	40021000 	.word	0x40021000
 8000984:	40011800 	.word	0x40011800
 8000988:	40011400 	.word	0x40011400

0800098c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000994:	f7ff ffb6 	bl	8000904 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b4:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a7c      	ldr	r2, [pc, #496]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b7a      	ldr	r3, [pc, #488]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b77      	ldr	r3, [pc, #476]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a76      	ldr	r2, [pc, #472]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b74      	ldr	r3, [pc, #464]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b71      	ldr	r3, [pc, #452]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a70      	ldr	r2, [pc, #448]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b6b      	ldr	r3, [pc, #428]	; (8000bac <MX_GPIO_Init+0x20c>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a6a      	ldr	r2, [pc, #424]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b68      	ldr	r3, [pc, #416]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b65      	ldr	r3, [pc, #404]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a64      	ldr	r2, [pc, #400]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b62      	ldr	r3, [pc, #392]	; (8000bac <MX_GPIO_Init+0x20c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2107      	movs	r1, #7
 8000a30:	485f      	ldr	r0, [pc, #380]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000a32:	f001 f84a 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210c      	movs	r1, #12
 8000a3a:	485e      	ldr	r0, [pc, #376]	; (8000bb4 <MX_GPIO_Init+0x214>)
 8000a3c:	f001 f845 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	21f0      	movs	r1, #240	; 0xf0
 8000a44:	485c      	ldr	r0, [pc, #368]	; (8000bb8 <MX_GPIO_Init+0x218>)
 8000a46:	f001 f840 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2123      	movs	r1, #35	; 0x23
 8000a4e:	485b      	ldr	r0, [pc, #364]	; (8000bbc <MX_GPIO_Init+0x21c>)
 8000a50:	f001 f83b 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f243 0108 	movw	r1, #12296	; 0x3008
 8000a5a:	4859      	ldr	r0, [pc, #356]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a5c:	f001 f835 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000a60:	2307      	movs	r3, #7
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4619      	mov	r1, r3
 8000a76:	484e      	ldr	r0, [pc, #312]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000a78:	f000 fe78 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4848      	ldr	r0, [pc, #288]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000a90:	f000 fe6c 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a94:	2310      	movs	r3, #16
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x224>)
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4842      	ldr	r0, [pc, #264]	; (8000bb0 <MX_GPIO_Init+0x210>)
 8000aa8:	f000 fe60 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aac:	2308      	movs	r3, #8
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x228>)
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4619      	mov	r1, r3
 8000abe:	483e      	ldr	r0, [pc, #248]	; (8000bb8 <MX_GPIO_Init+0x218>)
 8000ac0:	f000 fe54 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <MX_GPIO_Init+0x214>)
 8000ad8:	f000 fe48 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000adc:	230c      	movs	r3, #12
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4830      	ldr	r0, [pc, #192]	; (8000bb4 <MX_GPIO_Init+0x214>)
 8000af4:	f000 fe3a 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af8:	2330      	movs	r3, #48	; 0x30
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482a      	ldr	r0, [pc, #168]	; (8000bb8 <MX_GPIO_Init+0x218>)
 8000b10:	f000 fe2c 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000b14:	2323      	movs	r3, #35	; 0x23
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4824      	ldr	r0, [pc, #144]	; (8000bbc <MX_GPIO_Init+0x21c>)
 8000b2c:	f000 fe1e 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b30:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b34:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	481d      	ldr	r0, [pc, #116]	; (8000bbc <MX_GPIO_Init+0x21c>)
 8000b46:	f000 fe11 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8000b4a:	f243 0308 	movw	r3, #12296	; 0x3008
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000b64:	f000 fe02 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b68:	23c0      	movs	r3, #192	; 0xc0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b6c:	2311      	movs	r3, #17
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <MX_GPIO_Init+0x218>)
 8000b80:	f000 fdf4 	bl	800176c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2009      	movs	r0, #9
 8000b8a:	f000 fdb8 	bl	80016fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b8e:	2009      	movs	r0, #9
 8000b90:	f000 fdd1 	bl	8001736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 fdb0 	bl	80016fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f000 fdc9 	bl	8001736 <HAL_NVIC_EnableIRQ>

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40011800 	.word	0x40011800
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40011400 	.word	0x40011400
 8000bc4:	10110000 	.word	0x10110000
 8000bc8:	10210000 	.word	0x10210000

08000bcc <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	e002      	b.n	8000bdc <Delay+0x10>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f9      	bne.n	8000bd6 <Delay+0xa>
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <LCD_INIT>:

void LCD_INIT ( void )
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 f829 	bl	8000c4c <LCD_BackLed_Control>
	LCD_Rst();
 8000bfa:	f000 f80f 	bl	8000c1c <LCD_Rst>
	LCD_REG_Config();
 8000bfe:	f000 f85f 	bl	8000cc0 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c0c:	22f0      	movs	r2, #240	; 0xf0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f9e6 	bl	8000fe2 <LCD_Clear>
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2102      	movs	r1, #2
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <LCD_Rst+0x28>)
 8000c26:	f000 ff50 	bl	8001aca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <LCD_Rst+0x2c>)
 8000c2c:	f7ff ffce 	bl	8000bcc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2102      	movs	r1, #2
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <LCD_Rst+0x28>)
 8000c36:	f000 ff48 	bl	8001aca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <LCD_Rst+0x2c>)
 8000c3c:	f7ff ffc6 	bl	8000bcc <Delay>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40011800 	.word	0x40011800
 8000c48:	0002bffc 	.word	0x0002bffc

08000c4c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <LCD_BackLed_Control+0x34>)
 8000c64:	f000 ff31 	bl	8001aca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c68:	e005      	b.n	8000c76 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <LCD_BackLed_Control+0x34>)
 8000c72:	f000 ff2a 	bl	8001aca <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40011400 	.word	0x40011400

08000c84 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c8e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	8013      	strh	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <LCD_Write_Data+0x1c>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	8013      	strh	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	60020000 	.word	0x60020000

08000cc0 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000cc4:	20cf      	movs	r0, #207	; 0xcf
 8000cc6:	f7ff ffdd 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ffe8 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000cd0:	2081      	movs	r0, #129	; 0x81
 8000cd2:	f7ff ffe5 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000cd6:	2030      	movs	r0, #48	; 0x30
 8000cd8:	f7ff ffe2 	bl	8000ca0 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000cdc:	20ed      	movs	r0, #237	; 0xed
 8000cde:	f7ff ffd1 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f7ff ffdc 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f7ff ffd9 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f7ff ffd6 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000cf4:	2081      	movs	r0, #129	; 0x81
 8000cf6:	f7ff ffd3 	bl	8000ca0 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000cfa:	20e8      	movs	r0, #232	; 0xe8
 8000cfc:	f7ff ffc2 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000d00:	2085      	movs	r0, #133	; 0x85
 8000d02:	f7ff ffcd 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000d06:	2010      	movs	r0, #16
 8000d08:	f7ff ffca 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f7ff ffc7 	bl	8000ca0 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000d12:	20cb      	movs	r0, #203	; 0xcb
 8000d14:	f7ff ffb6 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000d18:	2039      	movs	r0, #57	; 0x39
 8000d1a:	f7ff ffc1 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000d1e:	202c      	movs	r0, #44	; 0x2c
 8000d20:	f7ff ffbe 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ffbb 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000d2a:	2034      	movs	r0, #52	; 0x34
 8000d2c:	f7ff ffb8 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff ffb5 	bl	8000ca0 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d36:	20f7      	movs	r0, #247	; 0xf7
 8000d38:	f7ff ffa4 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000d3c:	2020      	movs	r0, #32
 8000d3e:	f7ff ffaf 	bl	8000ca0 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d42:	20ea      	movs	r0, #234	; 0xea
 8000d44:	f7ff ff9e 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ffa9 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff ffa6 	bl	8000ca0 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d54:	20b1      	movs	r0, #177	; 0xb1
 8000d56:	f7ff ff95 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ffa0 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d60:	201b      	movs	r0, #27
 8000d62:	f7ff ff9d 	bl	8000ca0 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d66:	20b6      	movs	r0, #182	; 0xb6
 8000d68:	f7ff ff8c 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f7ff ff97 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d72:	20a2      	movs	r0, #162	; 0xa2
 8000d74:	f7ff ff94 	bl	8000ca0 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d78:	20c0      	movs	r0, #192	; 0xc0
 8000d7a:	f7ff ff83 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d7e:	2035      	movs	r0, #53	; 0x35
 8000d80:	f7ff ff8e 	bl	8000ca0 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d84:	20c1      	movs	r0, #193	; 0xc1
 8000d86:	f7ff ff7d 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d8a:	2011      	movs	r0, #17
 8000d8c:	f7ff ff88 	bl	8000ca0 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d90:	20c5      	movs	r0, #197	; 0xc5
 8000d92:	f7ff ff77 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d96:	2045      	movs	r0, #69	; 0x45
 8000d98:	f7ff ff82 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d9c:	2045      	movs	r0, #69	; 0x45
 8000d9e:	f7ff ff7f 	bl	8000ca0 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000da2:	20c7      	movs	r0, #199	; 0xc7
 8000da4:	f7ff ff6e 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000da8:	20a2      	movs	r0, #162	; 0xa2
 8000daa:	f7ff ff79 	bl	8000ca0 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000dae:	20f2      	movs	r0, #242	; 0xf2
 8000db0:	f7ff ff68 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff73 	bl	8000ca0 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000dba:	2026      	movs	r0, #38	; 0x26
 8000dbc:	f7ff ff62 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff ff6d 	bl	8000ca0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000dc6:	20e0      	movs	r0, #224	; 0xe0
 8000dc8:	f7ff ff5c 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f7ff ff67 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000dd2:	2026      	movs	r0, #38	; 0x26
 8000dd4:	f7ff ff64 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000dd8:	2024      	movs	r0, #36	; 0x24
 8000dda:	f7ff ff61 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000dde:	200b      	movs	r0, #11
 8000de0:	f7ff ff5e 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000de4:	200e      	movs	r0, #14
 8000de6:	f7ff ff5b 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000dea:	2009      	movs	r0, #9
 8000dec:	f7ff ff58 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000df0:	2054      	movs	r0, #84	; 0x54
 8000df2:	f7ff ff55 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000df6:	20a8      	movs	r0, #168	; 0xa8
 8000df8:	f7ff ff52 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000dfc:	2046      	movs	r0, #70	; 0x46
 8000dfe:	f7ff ff4f 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000e02:	200c      	movs	r0, #12
 8000e04:	f7ff ff4c 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000e08:	2017      	movs	r0, #23
 8000e0a:	f7ff ff49 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e0e:	2009      	movs	r0, #9
 8000e10:	f7ff ff46 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff ff43 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f7ff ff40 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff ff3d 	bl	8000ca0 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e26:	20e1      	movs	r0, #225	; 0xe1
 8000e28:	f7ff ff2c 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff37 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000e32:	2019      	movs	r0, #25
 8000e34:	f7ff ff34 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e38:	201b      	movs	r0, #27
 8000e3a:	f7ff ff31 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f7ff ff2e 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000e44:	2010      	movs	r0, #16
 8000e46:	f7ff ff2b 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f7ff ff28 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000e50:	202a      	movs	r0, #42	; 0x2a
 8000e52:	f7ff ff25 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000e56:	2047      	movs	r0, #71	; 0x47
 8000e58:	f7ff ff22 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000e5c:	2039      	movs	r0, #57	; 0x39
 8000e5e:	f7ff ff1f 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000e62:	2003      	movs	r0, #3
 8000e64:	f7ff ff1c 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff ff19 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f7ff ff16 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e74:	2030      	movs	r0, #48	; 0x30
 8000e76:	f7ff ff13 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e7a:	2038      	movs	r0, #56	; 0x38
 8000e7c:	f7ff ff10 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e80:	200f      	movs	r0, #15
 8000e82:	f7ff ff0d 	bl	8000ca0 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e86:	2036      	movs	r0, #54	; 0x36
 8000e88:	f7ff fefc 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000e8c:	20c8      	movs	r0, #200	; 0xc8
 8000e8e:	f7ff ff07 	bl	8000ca0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e92:	202a      	movs	r0, #42	; 0x2a
 8000e94:	f7ff fef6 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff01 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fefe 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fefb 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000eaa:	20ef      	movs	r0, #239	; 0xef
 8000eac:	f7ff fef8 	bl	8000ca0 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000eb0:	202b      	movs	r0, #43	; 0x2b
 8000eb2:	f7ff fee7 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fef2 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff feef 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff feec 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000ec8:	203f      	movs	r0, #63	; 0x3f
 8000eca:	f7ff fee9 	bl	8000ca0 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000ece:	203a      	movs	r0, #58	; 0x3a
 8000ed0:	f7ff fed8 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000ed4:	2055      	movs	r0, #85	; 0x55
 8000ed6:	f7ff fee3 	bl	8000ca0 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000eda:	2011      	movs	r0, #17
 8000edc:	f7ff fed2 	bl	8000c84 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <LCD_REG_Config+0x230>)
 8000ee2:	f7ff fe73 	bl	8000bcc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000ee6:	2029      	movs	r0, #41	; 0x29
 8000ee8:	f7ff fecc 	bl	8000c84 <LCD_Write_Cmd>
	
	
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	0002bffc 	.word	0x0002bffc

08000ef4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000f12:	202a      	movs	r0, #42	; 0x2a
 8000f14:	f7ff feb6 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff febe 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff feb8 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	4413      	add	r3, r2
 8000f36:	3b01      	subs	r3, #1
 8000f38:	121b      	asrs	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff feaf 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fea4 	bl	8000ca0 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f58:	202b      	movs	r0, #43	; 0x2b
 8000f5a:	f7ff fe93 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe9b 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe95 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f76:	88ba      	ldrh	r2, [r7, #4]
 8000f78:	883b      	ldrh	r3, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	121b      	asrs	r3, r3, #8
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe8c 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f88:	88ba      	ldrh	r2, [r7, #4]
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe81 	bl	8000ca0 <LCD_Write_Data>
	
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}

08000fa6 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fb6:	202c      	movs	r0, #44	; 0x2c
 8000fb8:	f7ff fe64 	bl	8000c84 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e006      	b.n	8000fd0 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe6b 	bl	8000ca0 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3f4      	bcc.n	8000fc2 <LCD_FillColor+0x1c>
		
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4604      	mov	r4, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80bb      	strh	r3, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	88b9      	ldrh	r1, [r7, #4]
 8001006:	88f8      	ldrh	r0, [r7, #6]
 8001008:	f7ff ff74 	bl	8000ef4 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	883a      	ldrh	r2, [r7, #0]
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	461a      	mov	r2, r3
 8001016:	8b3b      	ldrh	r3, [r7, #24]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f7ff ffc3 	bl	8000fa6 <LCD_FillColor>
	
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	460b      	mov	r3, r1
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	3b20      	subs	r3, #32
 800103e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001040:	88b9      	ldrh	r1, [r7, #4]
 8001042:	88f8      	ldrh	r0, [r7, #6]
 8001044:	2310      	movs	r3, #16
 8001046:	2208      	movs	r2, #8
 8001048:	f7ff ff54 	bl	8000ef4 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800104c:	202c      	movs	r0, #44	; 0x2c
 800104e:	f7ff fe19 	bl	8000c84 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001052:	2300      	movs	r3, #0
 8001054:	73bb      	strb	r3, [r7, #14]
 8001056:	e023      	b.n	80010a0 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001058:	7b3a      	ldrb	r2, [r7, #12]
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	4914      	ldr	r1, [pc, #80]	; (80010b0 <LCD_DrawChar+0x88>)
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	440a      	add	r2, r1
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001068:	2300      	movs	r3, #0
 800106a:	737b      	strb	r3, [r7, #13]
 800106c:	e012      	b.n	8001094 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001078:	201f      	movs	r0, #31
 800107a:	f7ff fe11 	bl	8000ca0 <LCD_Write_Data>
 800107e:	e003      	b.n	8001088 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001080:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001084:	f7ff fe0c 	bl	8000ca0 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	3301      	adds	r3, #1
 8001092:	737b      	strb	r3, [r7, #13]
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d9e9      	bls.n	800106e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	3301      	adds	r3, #1
 800109e:	73bb      	strb	r3, [r7, #14]
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d9d8      	bls.n	8001058 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08002664 	.word	0x08002664

080010b4 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	603a      	str	r2, [r7, #0]
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	460b      	mov	r3, r1
 80010c2:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80010c4:	e01c      	b.n	8001100 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	2be8      	cmp	r3, #232	; 0xe8
 80010ca:	d904      	bls.n	80010d6 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010cc:	2300      	movs	r3, #0
 80010ce:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80010d0:	88bb      	ldrh	r3, [r7, #4]
 80010d2:	3310      	adds	r3, #16
 80010d4:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80010dc:	d903      	bls.n	80010e6 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010de:	2300      	movs	r3, #0
 80010e0:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	88b9      	ldrh	r1, [r7, #4]
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff9a 	bl	8001028 <LCD_DrawChar>
		
		pStr ++;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	3308      	adds	r3, #8
 80010fe:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1de      	bne.n	80010c6 <LCD_DrawString+0x12>
		
	}
	
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <LCD_Cam_Gram>:

	
}

void LCD_Cam_Gram()
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	f7ff fdb4 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );    
 800111c:	2068      	movs	r0, #104	; 0x68
 800111e:	f7ff fdbf 	bl	8000ca0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001122:	202a      	movs	r0, #42	; 0x2a
 8001124:	f7ff fdae 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fdb9 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fdb6 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff fdb3 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800113a:	203f      	movs	r0, #63	; 0x3f
 800113c:	f7ff fdb0 	bl	8000ca0 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001140:	202b      	movs	r0, #43	; 0x2b
 8001142:	f7ff fd9f 	bl	8000c84 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fdaa 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fda7 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fda4 	bl	8000ca0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001158:	20ef      	movs	r0, #239	; 0xef
 800115a:	f7ff fda1 	bl	8000ca0 <LCD_Write_Data>
	
	LCD_Write_Cmd ( 0x2C );
 800115e:	202c      	movs	r0, #44	; 0x2c
 8001160:	f7ff fd90 	bl	8000c84 <LCD_Write_Cmd>

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 f96d 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f815 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f7ff fc13 	bl	80009a0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800117a:	f7ff fb5f 	bl	800083c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800117e:	f7ff fd36 	bl	8000bee <LCD_INIT>
	LCD_DrawString(75, 100, "CAMERA DEMO");
	HAL_Delay(2000);
	LCD_Clear (50, 80, 140, 70, WHITE);
	*/

	LCD_Clear ( 0, 0, 240, 320, GREY );
 8001182:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800118c:	22f0      	movs	r2, #240	; 0xf0
 800118e:	2100      	movs	r1, #0
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ff26 	bl	8000fe2 <LCD_Clear>
			// ImagDisp();
			Ov7725_vsync = 0;
		}
	Error_correction(SquareOfOneFace);*/
	char AllFaces[54];
	CameraWithErrorCorrection(AllFaces);
 8001196:	463b      	mov	r3, r7
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f8ab 	bl	80002f4 <CameraWithErrorCorrection>

  while (1)
 800119e:	e7fe      	b.n	800119e <main+0x36>

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	; 0x40
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2228      	movs	r2, #40	; 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 f9e4 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fca9 	bl	8001b40 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f4:	f000 f819 	bl	800122a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fef8 	bl	8002008 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800121e:	f000 f804 	bl	800122a <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3740      	adds	r7, #64	; 0x40
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_MspInit+0x5c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_MspInit+0x5c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_MspInit+0x60>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_MspInit+0x60>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <HardFault_Handler+0x4>

080012ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <BusFault_Handler+0x4>

080012ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f8f6 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <EXTI3_IRQHandler+0x64>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d023      	beq.n	8001348 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <EXTI3_IRQHandler+0x68>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <EXTI3_IRQHandler+0x6c>)
 800130a:	2210      	movs	r2, #16
 800130c:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <EXTI3_IRQHandler+0x70>)
 8001310:	2208      	movs	r2, #8
 8001312:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <EXTI3_IRQHandler+0x68>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <EXTI3_IRQHandler+0x70>)
 800131c:	2208      	movs	r2, #8
 800131e:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <EXTI3_IRQHandler+0x6c>)
 8001322:	2210      	movs	r2, #16
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	e009      	b.n	800133c <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <EXTI3_IRQHandler+0x68>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <EXTI3_IRQHandler+0x70>)
 8001332:	2208      	movs	r2, #8
 8001334:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <EXTI3_IRQHandler+0x68>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <EXTI3_IRQHandler+0x64>)
 800133e:	2208      	movs	r2, #8
 8001340:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001342:	2008      	movs	r0, #8
 8001344:	f000 fbf2 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001348:	2008      	movs	r0, #8
 800134a:	f000 fbd7 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40010400 	.word	0x40010400
 8001358:	2000010c 	.word	0x2000010c
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400

08001364 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <EXTI4_IRQHandler+0x2c>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <EXTI4_IRQHandler+0x30>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <EXTI4_IRQHandler+0x2c>)
 800137c:	2210      	movs	r2, #16
 800137e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8001380:	2010      	movs	r0, #16
 8001382:	f000 fbd3 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001386:	2010      	movs	r0, #16
 8001388:	f000 fbb8 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40010400 	.word	0x40010400
 8001394:	2000010d 	.word	0x2000010d

08001398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <SystemInit+0x5c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <SystemInit+0x5c>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <SystemInit+0x5c>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4911      	ldr	r1, [pc, #68]	; (80013f4 <SystemInit+0x5c>)
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <SystemInit+0x60>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <SystemInit+0x5c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <SystemInit+0x5c>)
 80013ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <SystemInit+0x5c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SystemInit+0x5c>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <SystemInit+0x5c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <SystemInit+0x5c>)
 80013d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SystemInit+0x5c>)
 80013de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SystemInit+0x64>)
 80013e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	f8ff0000 	.word	0xf8ff0000
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001400:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001402:	e003      	b.n	800140c <LoopCopyDataInit>

08001404 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001406:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001408:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800140a:	3104      	adds	r1, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001410:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001412:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001414:	d3f6      	bcc.n	8001404 <CopyDataInit>
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001418:	e002      	b.n	8001420 <LoopFillZerobss>

0800141a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800141c:	f842 3b04 	str.w	r3, [r2], #4

08001420 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001424:	d3f9      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001426:	f7ff ffb7 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f001 f8af 	bl	800258c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142e:	f7ff fe9b 	bl	8001168 <main>
  bx lr
 8001432:	4770      	bx	lr
  ldr r3, =_sidata
 8001434:	08002c6c 	.word	0x08002c6c
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800143c:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8001440:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8001444:	20000114 	.word	0x20000114

08001448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_2_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x28>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x28>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f943 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fee6 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f95b 	bl	8001752 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f000 f923 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000009c 	.word	0x2000009c
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	200000a0 	.word	0x200000a0

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_IncTick+0x20>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	200000a4 	.word	0x200000a4
 80014f8:	20000110 	.word	0x20000110

080014fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_GetTick+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	20000110 	.word	0x20000110

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fff0 	bl	80014fc <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffe0 	bl	80014fc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000a4 	.word	0x200000a4

08001558 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4906      	ldr	r1, [pc, #24]	; (80015e8 <NVIC_EnableIRQ+0x2c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100

080015ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da0b      	bge.n	8001618 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <NVIC_SetPriority+0x4c>)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	3b04      	subs	r3, #4
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001616:	e009      	b.n	800162c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <NVIC_SetPriority+0x50>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	e000e100 	.word	0xe000e100

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff31 	bl	8001558 <NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff46 	bl	80015a0 <NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff39 	bl	80015bc <NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b08b      	sub	sp, #44	; 0x2c
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e179      	b.n	8001a84 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8168 	bne.w	8001a7e <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a96      	ldr	r2, [pc, #600]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
 80017b8:	4a94      	ldr	r2, [pc, #592]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017be:	4a94      	ldr	r2, [pc, #592]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
 80017c4:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017ca:	4a92      	ldr	r2, [pc, #584]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
 80017d0:	4a90      	ldr	r2, [pc, #576]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017d6:	4a90      	ldr	r2, [pc, #576]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
 80017dc:	4a8e      	ldr	r2, [pc, #568]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017e2:	4a8e      	ldr	r2, [pc, #568]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
 80017e8:	4a8c      	ldr	r2, [pc, #560]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xdc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x13e>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_GPIO_Init+0x90>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_GPIO_Init+0x2b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x140>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x14a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x14e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x15c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x162>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80c1 	beq.w	8001a7e <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001914:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d01f      	beq.n	8001980 <HAL_GPIO_Init+0x214>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d019      	beq.n	800197c <HAL_GPIO_Init+0x210>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x20c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x208>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x204>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_GPIO_Init+0x2d4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x200>
 8001968:	2305      	movs	r3, #5
 800196a:	e00a      	b.n	8001982 <HAL_GPIO_Init+0x216>
 800196c:	2306      	movs	r3, #6
 800196e:	e008      	b.n	8001982 <HAL_GPIO_Init+0x216>
 8001970:	2304      	movs	r3, #4
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x216>
 8001974:	2303      	movs	r3, #3
 8001976:	e004      	b.n	8001982 <HAL_GPIO_Init+0x216>
 8001978:	2302      	movs	r3, #2
 800197a:	e002      	b.n	8001982 <HAL_GPIO_Init+0x216>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_GPIO_Init+0x216>
 8001980:	2300      	movs	r3, #0
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	4093      	lsls	r3, r2
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001992:	4925      	ldr	r1, [pc, #148]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4924      	ldr	r1, [pc, #144]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4920      	ldr	r1, [pc, #128]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	491a      	ldr	r1, [pc, #104]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d025      	beq.n	8001a48 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4910      	ldr	r1, [pc, #64]	; (8001a44 <HAL_GPIO_Init+0x2d8>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
 8001a08:	e025      	b.n	8001a56 <HAL_GPIO_Init+0x2ea>
 8001a0a:	bf00      	nop
 8001a0c:	10320000 	.word	0x10320000
 8001a10:	10310000 	.word	0x10310000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	10210000 	.word	0x10210000
 8001a1c:	10120000 	.word	0x10120000
 8001a20:	10110000 	.word	0x10110000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40011400 	.word	0x40011400
 8001a3c:	40011800 	.word	0x40011800
 8001a40:	40011c00 	.word	0x40011c00
 8001a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4911      	ldr	r1, [pc, #68]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60cb      	str	r3, [r1, #12]
 8001a6e:	e006      	b.n	8001a7e <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <HAL_GPIO_Init+0x32c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3301      	adds	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f ae82 	bls.w	8001790 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	372c      	adds	r7, #44	; 0x2c
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f806 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8087 	beq.w	8001c68 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b5a:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d00c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b66:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x58>
 8001b72:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d06c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x126>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d168      	bne.n	8001c66 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e22d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x70>
 8001ba2:	4b80      	ldr	r3, [pc, #512]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e02e      	b.n	8001c0e <HAL_RCC_OscConfig+0xce>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x92>
 8001bb8:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a79      	ldr	r2, [pc, #484]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b77      	ldr	r3, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a76      	ldr	r2, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e01d      	b.n	8001c0e <HAL_RCC_OscConfig+0xce>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0xb6>
 8001bdc:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a70      	ldr	r2, [pc, #448]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6d      	ldr	r2, [pc, #436]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0xce>
 8001bf6:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d013      	beq.n	8001c3e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff fc71 	bl	80014fc <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fc6d 	bl	80014fc <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1e1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0xde>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fc5d 	bl	80014fc <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c46:	f7ff fc59 	bl	80014fc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1cd      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x106>
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d063      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c80:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d11c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x186>
 8001c8c:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x170>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e1a1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4939      	ldr	r1, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc4:	e03a      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d020      	beq.n	8001d10 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x268>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc12 	bl	80014fc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc0e 	bl	80014fc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e182      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4926      	ldr	r1, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_OscConfig+0x268>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fbf1 	bl	80014fc <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fbed 	bl	80014fc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e161      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d039      	beq.n	8001dbc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fbd1 	bl	80014fc <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fbcd 	bl	80014fc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e141      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x264>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 faad 	bl	80022dc <RCC_Delay>
 8001d82:	e01b      	b.n	8001dbc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fbb7 	bl	80014fc <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	e00e      	b.n	8001db0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff fbb3 	bl	80014fc <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d907      	bls.n	8001db0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e127      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	42420000 	.word	0x42420000
 8001dac:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ea      	bne.n	8001d92 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a6 	beq.w	8001f16 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a87      	ldr	r2, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x4c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x4c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x4c0>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb75 	bl	80014fc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fb71 	bl	80014fc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0e5      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x30a>
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x366>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x32c>
 8001e52:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	e01c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x366>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x34e>
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a60      	ldr	r2, [pc, #384]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	4b5e      	ldr	r3, [pc, #376]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x366>
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d015      	beq.n	8001eda <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb25 	bl	80014fc <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb21 	bl	80014fc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e093      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ee      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x376>
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb0f 	bl	80014fc <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb0b 	bl	80014fc <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e07d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ee      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d069      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d061      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d146      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fae0 	bl	80014fc <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fadc 	bl	80014fc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e050      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f66:	d108      	bne.n	8001f7a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4921      	ldr	r1, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a19      	ldr	r1, [r3, #32]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fab0 	bl	80014fc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff faac 	bl	80014fc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e020      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x460>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fa99 	bl	80014fc <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff fa95 	bl	80014fc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x48e>
 8001fec:	e001      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420060 	.word	0x42420060

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002016:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d910      	bls.n	8002046 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	4978      	ldr	r1, [pc, #480]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0e0      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d020      	beq.n	8002094 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002064:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002068:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a66      	ldr	r2, [pc, #408]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 800207c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002080:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002082:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4961      	ldr	r1, [pc, #388]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d06a      	beq.n	8002176 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a8:	4b5a      	ldr	r3, [pc, #360]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d115      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0a7      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c0:	4b54      	ldr	r3, [pc, #336]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e09b      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e093      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4949      	ldr	r1, [pc, #292]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f2:	f7ff fa03 	bl	80014fc <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d112      	bne.n	8002126 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002102:	f7ff f9fb 	bl	80014fc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e077      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d1ee      	bne.n	8002102 <HAL_RCC_ClockConfig+0xfa>
 8002124:	e027      	b.n	8002176 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d11d      	bne.n	800216a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff f9e4 	bl	80014fc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e060      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002146:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	d1ee      	bne.n	8002130 <HAL_RCC_ClockConfig+0x128>
 8002152:	e010      	b.n	8002176 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff f9d2 	bl	80014fc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04e      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d210      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4920      	ldr	r1, [pc, #128]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e030      	b.n	8002208 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4915      	ldr	r1, [pc, #84]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	490d      	ldr	r1, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e4:	f000 f81c 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	4908      	ldr	r1, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x210>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_RCC_ClockConfig+0x214>)
 80021fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff f939 	bl	8001478 <HAL_InitTick>
  
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	08002c54 	.word	0x08002c54
 800221c:	2000009c 	.word	0x2000009c

08002220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b490      	push	{r4, r7}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_RCC_GetSysClockFreq+0xac>)
 8002228:	1d3c      	adds	r4, r7, #4
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002230:	f240 2301 	movw	r3, #513	; 0x201
 8002234:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x46>
 800225e:	e02b      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	e02b      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3328      	adds	r3, #40	; 0x28
 8002270:	443b      	add	r3, r7
 8002272:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002276:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0c5b      	lsrs	r3, r3, #17
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	3328      	adds	r3, #40	; 0x28
 800228e:	443b      	add	r3, r7
 8002290:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002294:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229a:	fb03 f202 	mul.w	r2, r3, r2
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	e004      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	623b      	str	r3, [r7, #32]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ba:	623b      	str	r3, [r7, #32]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	6a3b      	ldr	r3, [r7, #32]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3728      	adds	r7, #40	; 0x28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc90      	pop	{r4, r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	08002654 	.word	0x08002654
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	003d0900 	.word	0x003d0900

080022dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <RCC_Delay+0x38>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <RCC_Delay+0x3c>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a5b      	lsrs	r3, r3, #9
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80022f8:	bf00      	nop
}
 80022fa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	60fa      	str	r2, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f8      	bne.n	80022f8 <RCC_Delay+0x1c>
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000009c 	.word	0x2000009c
 8002318:	10624dd3 	.word	0x10624dd3

0800231c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e034      	b.n	800239c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7fe fb20 	bl	800098c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3308      	adds	r3, #8
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f000 f824 	bl	80023a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	461a      	mov	r2, r3
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	f000 f89c 	bl	80024a4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6858      	ldr	r0, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	f000 f8c7 	bl	800250c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	f041 0101 	orr.w	r1, r1, #1
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	f023 0101 	bic.w	r1, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d132      	bne.n	8002434 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <FSMC_NORSRAM_Init+0xfc>)
 80023da:	4013      	ands	r3, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6851      	ldr	r1, [r2, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6892      	ldr	r2, [r2, #8]
 80023e4:	4311      	orrs	r1, r2
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	4311      	orrs	r1, r2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6912      	ldr	r2, [r2, #16]
 80023f0:	4311      	orrs	r1, r2
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	6952      	ldr	r2, [r2, #20]
 80023f6:	4311      	orrs	r1, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6992      	ldr	r2, [r2, #24]
 80023fc:	4311      	orrs	r1, r2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	69d2      	ldr	r2, [r2, #28]
 8002402:	4311      	orrs	r1, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	6a12      	ldr	r2, [r2, #32]
 8002408:	4311      	orrs	r1, r2
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800240e:	4311      	orrs	r1, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002414:	4311      	orrs	r1, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800241a:	4311      	orrs	r1, r2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002420:	430a      	orrs	r2, r1
 8002422:	4313      	orrs	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002432:	e02f      	b.n	8002494 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <FSMC_NORSRAM_Init+0xfc>)
 8002440:	4013      	ands	r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6851      	ldr	r1, [r2, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6892      	ldr	r2, [r2, #8]
 800244a:	4311      	orrs	r1, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	68d2      	ldr	r2, [r2, #12]
 8002450:	4311      	orrs	r1, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6912      	ldr	r2, [r2, #16]
 8002456:	4311      	orrs	r1, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6952      	ldr	r2, [r2, #20]
 800245c:	4311      	orrs	r1, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6992      	ldr	r2, [r2, #24]
 8002462:	4311      	orrs	r1, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	69d2      	ldr	r2, [r2, #28]
 8002468:	4311      	orrs	r1, r2
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6a12      	ldr	r2, [r2, #32]
 800246e:	4311      	orrs	r1, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002474:	4311      	orrs	r1, r2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800247a:	4311      	orrs	r1, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002480:	4311      	orrs	r1, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002486:	4311      	orrs	r1, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4319      	orrs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	fff70081 	.word	0xfff70081

080024a4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	431a      	orrs	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	3b02      	subs	r3, #2
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	3201      	adds	r2, #1
 80024f8:	4319      	orrs	r1, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002520:	d11d      	bne.n	800255e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800252c:	4013      	ands	r3, r2
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	6811      	ldr	r1, [r2, #0]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	6852      	ldr	r2, [r2, #4]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	4311      	orrs	r1, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	6892      	ldr	r2, [r2, #8]
 800253e:	0212      	lsls	r2, r2, #8
 8002540:	4311      	orrs	r1, r2
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	6992      	ldr	r2, [r2, #24]
 8002546:	4311      	orrs	r1, r2
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	0412      	lsls	r2, r2, #16
 800254e:	430a      	orrs	r2, r1
 8002550:	ea43 0102 	orr.w	r1, r3, r2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800255c:	e005      	b.n	800256a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	cff00000 	.word	0xcff00000

0800257c <memset>:
 800257c:	4603      	mov	r3, r0
 800257e:	4402      	add	r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	f803 1b01 	strb.w	r1, [r3], #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <__libc_init_array>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	2600      	movs	r6, #0
 8002590:	4d0c      	ldr	r5, [pc, #48]	; (80025c4 <__libc_init_array+0x38>)
 8002592:	4c0d      	ldr	r4, [pc, #52]	; (80025c8 <__libc_init_array+0x3c>)
 8002594:	1b64      	subs	r4, r4, r5
 8002596:	10a4      	asrs	r4, r4, #2
 8002598:	42a6      	cmp	r6, r4
 800259a:	d109      	bne.n	80025b0 <__libc_init_array+0x24>
 800259c:	f000 f81a 	bl	80025d4 <_init>
 80025a0:	2600      	movs	r6, #0
 80025a2:	4d0a      	ldr	r5, [pc, #40]	; (80025cc <__libc_init_array+0x40>)
 80025a4:	4c0a      	ldr	r4, [pc, #40]	; (80025d0 <__libc_init_array+0x44>)
 80025a6:	1b64      	subs	r4, r4, r5
 80025a8:	10a4      	asrs	r4, r4, #2
 80025aa:	42a6      	cmp	r6, r4
 80025ac:	d105      	bne.n	80025ba <__libc_init_array+0x2e>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b4:	4798      	blx	r3
 80025b6:	3601      	adds	r6, #1
 80025b8:	e7ee      	b.n	8002598 <__libc_init_array+0xc>
 80025ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80025be:	4798      	blx	r3
 80025c0:	3601      	adds	r6, #1
 80025c2:	e7f2      	b.n	80025aa <__libc_init_array+0x1e>
 80025c4:	08002c64 	.word	0x08002c64
 80025c8:	08002c64 	.word	0x08002c64
 80025cc:	08002c64 	.word	0x08002c64
 80025d0:	08002c68 	.word	0x08002c68

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	bf00      	nop
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
