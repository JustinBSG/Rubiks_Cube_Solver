
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08002f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002f14  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a32e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002050  00000000  00000000  0002a3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  0002d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2e5  00000000  00000000  0002d931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db6a  00000000  00000000  00047c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000990a1  00000000  00000000  00055780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030bc  00000000  00000000  000ee824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f18e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ec8 	.word	0x08002ec8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002ec8 	.word	0x08002ec8

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f001 fe85 	bl	8001fcc <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fba7 	bl	8000a1a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f001 f8b2 	bl	80014a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f001 f8a5 	bl	80014a4 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000070 	.word	0x20000070
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <MX_GPIO_Init+0x118>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a3f      	ldr	r2, [pc, #252]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a39      	ldr	r2, [pc, #228]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0x118>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0x118>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <MX_GPIO_Init+0x11c>)
 800041c:	f001 f9d6 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000426:	f001 f9d1 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481b      	ldr	r0, [pc, #108]	; (80004ac <MX_GPIO_Init+0x124>)
 8000440:	f001 f830 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044c:	2302      	movs	r3, #2
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000458:	f001 f824 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x11c>)
 8000476:	f001 f815 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000492:	f001 f807 	bl	80014a4 <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010800 	.word	0x40010800

080004b4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	e002      	b.n	80004c4 <Delay+0x10>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f9      	bne.n	80004be <Delay+0xa>
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f829 	bl	8000534 <LCD_BackLed_Control>
	LCD_Rst();
 80004e2:	f000 f80f 	bl	8000504 <LCD_Rst>
	LCD_REG_Config();
 80004e6:	f000 f85f 	bl	80005a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004f4:	22f0      	movs	r2, #240	; 0xf0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9e6 	bl	80008ca <LCD_Clear>
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <LCD_Rst+0x28>)
 800050e:	f001 f95d 	bl	80017cc <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <LCD_Rst+0x2c>)
 8000514:	f7ff ffce 	bl	80004b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LCD_Rst+0x28>)
 800051e:	f001 f955 	bl	80017cc <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <LCD_Rst+0x2c>)
 8000524:	f7ff ffc6 	bl	80004b4 <Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40011800 	.word	0x40011800
 8000530:	0002bffc 	.word	0x0002bffc

08000534 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <LCD_BackLed_Control+0x34>)
 800054c:	f001 f93e 	bl	80017cc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000550:	e005      	b.n	800055e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <LCD_BackLed_Control+0x34>)
 800055a:	f001 f937 	bl	80017cc <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40011400 	.word	0x40011400

0800056c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000576:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	8013      	strh	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LCD_Write_Data+0x1c>)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	8013      	strh	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	60020000 	.word	0x60020000

080005a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005ac:	20cf      	movs	r0, #207	; 0xcf
 80005ae:	f7ff ffdd 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffe8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005b8:	2081      	movs	r0, #129	; 0x81
 80005ba:	f7ff ffe5 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005be:	2030      	movs	r0, #48	; 0x30
 80005c0:	f7ff ffe2 	bl	8000588 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005c4:	20ed      	movs	r0, #237	; 0xed
 80005c6:	f7ff ffd1 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f7ff ffdc 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ffd9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005d6:	2012      	movs	r0, #18
 80005d8:	f7ff ffd6 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005dc:	2081      	movs	r0, #129	; 0x81
 80005de:	f7ff ffd3 	bl	8000588 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005e2:	20e8      	movs	r0, #232	; 0xe8
 80005e4:	f7ff ffc2 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005e8:	2085      	movs	r0, #133	; 0x85
 80005ea:	f7ff ffcd 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005ee:	2010      	movs	r0, #16
 80005f0:	f7ff ffca 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f7ff ffc7 	bl	8000588 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80005fa:	20cb      	movs	r0, #203	; 0xcb
 80005fc:	f7ff ffb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000600:	2039      	movs	r0, #57	; 0x39
 8000602:	f7ff ffc1 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000606:	202c      	movs	r0, #44	; 0x2c
 8000608:	f7ff ffbe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffbb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000612:	2034      	movs	r0, #52	; 0x34
 8000614:	f7ff ffb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ffb5 	bl	8000588 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800061e:	20f7      	movs	r0, #247	; 0xf7
 8000620:	f7ff ffa4 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000624:	2020      	movs	r0, #32
 8000626:	f7ff ffaf 	bl	8000588 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800062a:	20ea      	movs	r0, #234	; 0xea
 800062c:	f7ff ff9e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffa9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffa6 	bl	8000588 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800063c:	20b1      	movs	r0, #177	; 0xb1
 800063e:	f7ff ff95 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffa0 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000648:	201b      	movs	r0, #27
 800064a:	f7ff ff9d 	bl	8000588 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f7ff ff8c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000654:	200a      	movs	r0, #10
 8000656:	f7ff ff97 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800065a:	20a2      	movs	r0, #162	; 0xa2
 800065c:	f7ff ff94 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000660:	20c0      	movs	r0, #192	; 0xc0
 8000662:	f7ff ff83 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000666:	2035      	movs	r0, #53	; 0x35
 8000668:	f7ff ff8e 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800066c:	20c1      	movs	r0, #193	; 0xc1
 800066e:	f7ff ff7d 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000672:	2011      	movs	r0, #17
 8000674:	f7ff ff88 	bl	8000588 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000678:	20c5      	movs	r0, #197	; 0xc5
 800067a:	f7ff ff77 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f7ff ff82 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f7ff ff7f 	bl	8000588 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800068a:	20c7      	movs	r0, #199	; 0xc7
 800068c:	f7ff ff6e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000690:	20a2      	movs	r0, #162	; 0xa2
 8000692:	f7ff ff79 	bl	8000588 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000696:	20f2      	movs	r0, #242	; 0xf2
 8000698:	f7ff ff68 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff73 	bl	8000588 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006a2:	2026      	movs	r0, #38	; 0x26
 80006a4:	f7ff ff62 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff6d 	bl	8000588 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006ae:	20e0      	movs	r0, #224	; 0xe0
 80006b0:	f7ff ff5c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006b4:	200f      	movs	r0, #15
 80006b6:	f7ff ff67 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ba:	2026      	movs	r0, #38	; 0x26
 80006bc:	f7ff ff64 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006c0:	2024      	movs	r0, #36	; 0x24
 80006c2:	f7ff ff61 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006c6:	200b      	movs	r0, #11
 80006c8:	f7ff ff5e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff5b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006d2:	2009      	movs	r0, #9
 80006d4:	f7ff ff58 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006d8:	2054      	movs	r0, #84	; 0x54
 80006da:	f7ff ff55 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006de:	20a8      	movs	r0, #168	; 0xa8
 80006e0:	f7ff ff52 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006e4:	2046      	movs	r0, #70	; 0x46
 80006e6:	f7ff ff4f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ff4c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80006f0:	2017      	movs	r0, #23
 80006f2:	f7ff ff49 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006f6:	2009      	movs	r0, #9
 80006f8:	f7ff ff46 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff ff43 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000702:	2007      	movs	r0, #7
 8000704:	f7ff ff40 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff3d 	bl	8000588 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800070e:	20e1      	movs	r0, #225	; 0xe1
 8000710:	f7ff ff2c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800071a:	2019      	movs	r0, #25
 800071c:	f7ff ff34 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff ff31 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff2e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff ff2b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff28 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000738:	202a      	movs	r0, #42	; 0x2a
 800073a:	f7ff ff25 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800073e:	2047      	movs	r0, #71	; 0x47
 8000740:	f7ff ff22 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000744:	2039      	movs	r0, #57	; 0x39
 8000746:	f7ff ff1f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff ff1c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff ff19 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000756:	2006      	movs	r0, #6
 8000758:	f7ff ff16 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800075c:	2030      	movs	r0, #48	; 0x30
 800075e:	f7ff ff13 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000762:	2038      	movs	r0, #56	; 0x38
 8000764:	f7ff ff10 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000768:	200f      	movs	r0, #15
 800076a:	f7ff ff0d 	bl	8000588 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fefc 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f7ff ff07 	bl	8000588 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fef6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff01 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fefe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fefb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000792:	20ef      	movs	r0, #239	; 0xef
 8000794:	f7ff fef8 	bl	8000588 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000798:	202b      	movs	r0, #43	; 0x2b
 800079a:	f7ff fee7 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fef2 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff feef 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff feec 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007b0:	203f      	movs	r0, #63	; 0x3f
 80007b2:	f7ff fee9 	bl	8000588 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007b6:	203a      	movs	r0, #58	; 0x3a
 80007b8:	f7ff fed8 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007bc:	2055      	movs	r0, #85	; 0x55
 80007be:	f7ff fee3 	bl	8000588 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff fed2 	bl	800056c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <LCD_REG_Config+0x230>)
 80007ca:	f7ff fe73 	bl	80004b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007ce:	2029      	movs	r0, #41	; 0x29
 80007d0:	f7ff fecc 	bl	800056c <LCD_Write_Cmd>
	
	
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	0002bffc 	.word	0x0002bffc

080007dc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80007fa:	202a      	movs	r0, #42	; 0x2a
 80007fc:	f7ff feb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b29b      	uxth	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff febe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	4413      	add	r3, r2
 800081e:	3b01      	subs	r3, #1
 8000820:	121b      	asrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff feaf 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	4413      	add	r3, r2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3b01      	subs	r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	b29b      	uxth	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fea4 	bl	8000588 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fe93 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe9b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe95 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800085e:	88ba      	ldrh	r2, [r7, #4]
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	3b01      	subs	r3, #1
 8000866:	121b      	asrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe8c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	883b      	ldrh	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe81 	bl	8000588 <LCD_Write_Data>
	
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f7ff fe64 	bl	800056c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e006      	b.n	80008b8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe6b 	bl	8000588 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3f4      	bcc.n	80008aa <LCD_FillColor+0x1c>
		
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	4623      	mov	r3, r4
 80008da:	80fb      	strh	r3, [r7, #6]
 80008dc:	4603      	mov	r3, r0
 80008de:	80bb      	strh	r3, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	807b      	strh	r3, [r7, #2]
 80008e4:	4613      	mov	r3, r2
 80008e6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	887a      	ldrh	r2, [r7, #2]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88f8      	ldrh	r0, [r7, #6]
 80008f0:	f7ff ff74 	bl	80007dc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	883a      	ldrh	r2, [r7, #0]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	8b3b      	ldrh	r3, [r7, #24]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f7ff ffc3 	bl	800088e <LCD_FillColor>
	
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fc5b 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f839 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f7ff fd33 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000922:	f7ff fc7f 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
 8000926:	f000 fa39 	bl	8000d9c <MX_TIM3_Init>
  MX_TIM4_Init();
 800092a:	f000 facf 	bl	8000ecc <MX_TIM4_Init>
  MX_TIM2_Init();
 800092e:	f000 f9bf 	bl	8000cb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000932:	2100      	movs	r1, #0
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <main+0x74>)
 8000936:	f001 fc3d 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800093a:	2108      	movs	r1, #8
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <main+0x78>)
 800093e:	f001 fc39 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000942:	2108      	movs	r1, #8
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <main+0x74>)
 8000946:	f001 fc35 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800094a:	210c      	movs	r1, #12
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <main+0x74>)
 800094e:	f001 fc31 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000952:	2100      	movs	r1, #0
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <main+0x7c>)
 8000956:	f001 fc2d 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800095a:	2104      	movs	r1, #4
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <main+0x7c>)
 800095e:	f001 fc29 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000962:	2108      	movs	r1, #8
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <main+0x7c>)
 8000966:	f001 fc25 	bl	80021b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800096a:	210c      	movs	r1, #12
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <main+0x7c>)
 800096e:	f001 fc21 	bl	80021b4 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000972:	f7ff fdb0 	bl	80004d6 <LCD_INIT>
  servo_init();
 8000976:	f000 f855 	bl	8000a24 <servo_init>
  uint32_t last_tick = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  uint8_t flag = 4;
 800097e:	2304      	movs	r3, #4
 8000980:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000982:	e7fe      	b.n	8000982 <main+0x72>
 8000984:	20000104 	.word	0x20000104
 8000988:	20000074 	.word	0x20000074
 800098c:	200000bc 	.word	0x200000bc

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fa66 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ff0f 	bl	80017fc <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009e4:	f000 f819 	bl	8000a1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f97c 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a0e:	f000 f804 	bl	8000a1a <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3740      	adds	r7, #64	; 0x40
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1e:	b672      	cpsid	i
}
 8000a20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <Error_Handler+0x8>

08000a24 <servo_init>:
#include "servo.h"

GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
extern start;

void servo_init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++)
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e008      	b.n	8000a42 <servo_init+0x1e>
		servo_pull(i*2);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f86e 	bl	8000b18 <servo_pull>
	for (uint8_t i = 1; i <= 4; i++)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d9f3      	bls.n	8000a30 <servo_init+0xc>
	HAL_Delay(DELAY_TIME_P);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f000 fc22 	bl	8001294 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8000a50:	2301      	movs	r3, #1
 8000a52:	71bb      	strb	r3, [r7, #6]
 8000a54:	e00a      	b.n	8000a6c <servo_init+0x48>
		centre_0(i*2-1);
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f821 	bl	8000aa8 <centre_0>
	for (uint8_t i = 1; i <= 4; i++)
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	71bb      	strb	r3, [r7, #6]
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d9f1      	bls.n	8000a56 <servo_init+0x32>
	HAL_Delay(DELAY_TIME_90);
 8000a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a76:	f000 fc0d 	bl	8001294 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	717b      	strb	r3, [r7, #5]
 8000a7e:	e008      	b.n	8000a92 <servo_init+0x6e>
		servo_push(i*2);
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f87c 	bl	8000b84 <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8000a8c:	797b      	ldrb	r3, [r7, #5]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	717b      	strb	r3, [r7, #5]
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d9f3      	bls.n	8000a80 <servo_init+0x5c>
	HAL_Delay(DELAY_TIME_P);
 8000a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9c:	f000 fbfa 	bl	8001294 <HAL_Delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <centre_0>:
		HAL_Delay(DELAY_TIME_P);
	}

}

void centre_0(servos servo) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d024      	beq.n	8000b08 <centre_0+0x60>
		uint8_t target = servo/2+1;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	085b      	lsrs	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d81b      	bhi.n	8000b08 <centre_0+0x60>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <centre_0+0x30>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000ae9 	.word	0x08000ae9
 8000adc:	08000af1 	.word	0x08000af1
 8000ae0:	08000af9 	.word	0x08000af9
 8000ae4:	08000b01 	.word	0x08000b01
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <centre_0+0x6c>)
 8000aea:	225f      	movs	r2, #95	; 0x5f
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000aee:	e00b      	b.n	8000b08 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <centre_0+0x6c>)
 8000af2:	2258      	movs	r2, #88	; 0x58
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000af6:	e007      	b.n	8000b08 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <centre_0+0x6c>)
 8000afa:	225c      	movs	r2, #92	; 0x5c
 8000afc:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000afe:	e003      	b.n	8000b08 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <centre_0+0x6c>)
 8000b02:	225e      	movs	r2, #94	; 0x5e
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000b06:	bf00      	nop
		}
	}
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40000400 	.word	0x40000400

08000b18 <servo_pull>:
				break;
		}
	}
}

void servo_pull(servos servo) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d123      	bne.n	8000b76 <servo_pull+0x5e>
		uint8_t target = servo/2;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d81c      	bhi.n	8000b76 <servo_pull+0x5e>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <servo_pull+0x2c>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000b5d 	.word	0x08000b5d
 8000b4c:	08000b67 	.word	0x08000b67
 8000b50:	08000b6f 	.word	0x08000b6f
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <servo_pull+0x68>)
 8000b56:	221e      	movs	r2, #30
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000b5a:	e00c      	b.n	8000b76 <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 8000b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b60:	221e      	movs	r2, #30
 8000b62:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000b64:	e007      	b.n	8000b76 <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <servo_pull+0x68>)
 8000b68:	221e      	movs	r2, #30
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000b6c:	e003      	b.n	8000b76 <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <servo_pull+0x68>)
 8000b70:	2219      	movs	r2, #25
 8000b72:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000b74:	bf00      	nop
		}
	}
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40000800 	.word	0x40000800

08000b84 <servo_push>:

void servo_push(servos servo) {
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d123      	bne.n	8000be2 <servo_push+0x5e>
		uint8_t target = servo/2;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d81c      	bhi.n	8000be2 <servo_push+0x5e>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <servo_push+0x2c>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bc9 	.word	0x08000bc9
 8000bb8:	08000bd3 	.word	0x08000bd3
 8000bbc:	08000bdb 	.word	0x08000bdb
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <servo_push+0x68>)
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000bc6:	e00c      	b.n	8000be2 <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 8000bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bcc:	225a      	movs	r2, #90	; 0x5a
 8000bce:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000bd0:	e007      	b.n	8000be2 <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <servo_push+0x68>)
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000bd8:	e003      	b.n	8000be2 <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <servo_push+0x68>)
 8000bdc:	225a      	movs	r2, #90	; 0x5a
 8000bde:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000be0:	bf00      	nop
		}
	}
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40000800 	.word	0x40000800

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x60>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_MspInit+0x60>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9a:	f000 fadf 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000cea:	f240 42af 	movw	r2, #1199	; 0x4af
 8000cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8000cf6:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000cf8:	f240 42af 	movw	r2, #1199	; 0x4af
 8000cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0a:	4823      	ldr	r0, [pc, #140]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d0c:	f001 f9ab 	bl	8002066 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d16:	f7ff fe80 	bl	8000a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d24:	4619      	mov	r1, r3
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d28:	f001 fbbc 	bl	80024a4 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d32:	f7ff fe72 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d38:	f001 f9e4 	bl	8002104 <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d42:	f7ff fe6a 	bl	8000a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4619      	mov	r1, r3
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d56:	f001 ff49 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d60:	f7ff fe5b 	bl	8000a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	; 0x60
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8000d68:	231e      	movs	r3, #30
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2208      	movs	r2, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d7c:	f001 fad4 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d86:	f7ff fe48 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM2_Init+0xe8>)
 8000d8c:	f000 f970 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000d90:	bf00      	nop
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000074 	.word	0x20000074

08000d9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dce:	4a3e      	ldr	r2, [pc, #248]	; (8000ec8 <MX_TIM3_Init+0x12c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dd4:	f240 42af 	movw	r2, #1199	; 0x4af
 8000dd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000de2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000de6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df4:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000df6:	f001 f936 	bl	8002066 <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e00:	f7ff fe0b 	bl	8000a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482c      	ldr	r0, [pc, #176]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e12:	f001 fb47 	bl	80024a4 <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e1c:	f7ff fdfd 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e20:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e22:	f001 f96f 	bl	8002104 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f7ff fdf5 	bl	8000a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e40:	f001 fed4 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f7ff fde6 	bl	8000a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8000e52:	231c      	movs	r3, #28
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e66:	f001 fa5f 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e70:	f7ff fdd3 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2204      	movs	r2, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e7c:	f001 fa54 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000e86:	f7ff fdc8 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e92:	f001 fa49 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e9c:	f7ff fdbd 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000ea8:	f001 fa3e 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000eb2:	f7ff fdb2 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000eb8:	f000 f8da 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3738      	adds	r7, #56	; 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000bc 	.word	0x200000bc
 8000ec8:	40000400 	.word	0x40000400

08000ecc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000efe:	4a39      	ldr	r2, [pc, #228]	; (8000fe4 <MX_TIM4_Init+0x118>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f04:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f12:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f24:	482e      	ldr	r0, [pc, #184]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f26:	f001 f89e 	bl	8002066 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f30:	f7ff fd73 	bl	8000a1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f42:	f001 faaf 	bl	80024a4 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f4c:	f7ff fd65 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f50:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f52:	f001 f8d7 	bl	8002104 <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f5c:	f7ff fd5d 	bl	8000a1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f70:	f001 fe3c 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f7a:	f7ff fd4e 	bl	8000a1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8000f82:	231c      	movs	r3, #28
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000f96:	f001 f9c7 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000fa0:	f7ff fd3b 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000fac:	f001 f9bc 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000fb6:	f7ff fd30 	bl	8000a1a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000fc2:	f001 f9b1 	bl	8002328 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000fcc:	f7ff fd25 	bl	8000a1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM4_Init+0x114>)
 8000fd2:	f000 f84d 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000fd6:	bf00      	nop
 8000fd8:	3738      	adds	r7, #56	; 0x38
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000104 	.word	0x20000104
 8000fe4:	40000800 	.word	0x40000800

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d10c      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001012:	e022      	b.n	800105a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_TIM_Base_MspInit+0x80>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10c      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
}
 8001036:	e010      	b.n	800105a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_TIM_Base_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10b      	bne.n	800105a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_TIM_Base_MspInit+0x7c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40000400 	.word	0x40000400
 800106c:	40000800 	.word	0x40000800

08001070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108e:	d118      	bne.n	80010c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a34      	ldr	r2, [pc, #208]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a8:	2304      	movs	r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	482c      	ldr	r0, [pc, #176]	; (800116c <HAL_TIM_MspPostInit+0xfc>)
 80010bc:	f000 f9f2 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010c0:	e04e      	b.n	8001160 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <HAL_TIM_MspPostInit+0x100>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d12b      	bne.n	8001124 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a25      	ldr	r2, [pc, #148]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	481e      	ldr	r0, [pc, #120]	; (8001174 <HAL_TIM_MspPostInit+0x104>)
 80010fa:	f000 f9d3 	bl	80014a4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_TIM_MspPostInit+0x108>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_TIM_MspPostInit+0x108>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	6053      	str	r3, [r2, #4]
}
 8001122:	e01d      	b.n	8001160 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_TIM_MspPostInit+0x10c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d118      	bne.n	8001160 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001146:	f44f 7350 	mov.w	r3, #832	; 0x340
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_TIM_MspPostInit+0x110>)
 800115c:	f000 f9a2 	bl	80014a4 <HAL_GPIO_Init>
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	40000400 	.word	0x40000400
 8001174:	40011000 	.word	0x40011000
 8001178:	40010000 	.word	0x40010000
 800117c:	40000800 	.word	0x40000800
 8001180:	40010c00 	.word	0x40010c00

08001184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011aa:	f7ff fd7a 	bl	8000ca2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 fe67 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff fbad 	bl	8000910 <main>
  bx lr
 80011b6:	4770      	bx	lr
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c0:	08002f08 	.word	0x08002f08
  ldr r2, =_sbss
 80011c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c8:	20000150 	.word	0x20000150

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x28>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f92b 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fd00 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f935 	bl	800148a <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001238:	f000 f90b 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000008 	.word	0x20000008
 800127c:	2000014c 	.word	0x2000014c

08001280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	2000014c 	.word	0x2000014c

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff49 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e179      	b.n	80017ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8168 	bne.w	80017a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a96      	ldr	r2, [pc, #600]	; (8001734 <HAL_GPIO_Init+0x290>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a94      	ldr	r2, [pc, #592]	; (8001734 <HAL_GPIO_Init+0x290>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a94      	ldr	r2, [pc, #592]	; (8001738 <HAL_GPIO_Init+0x294>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a92      	ldr	r2, [pc, #584]	; (8001738 <HAL_GPIO_Init+0x294>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a92      	ldr	r2, [pc, #584]	; (800173c <HAL_GPIO_Init+0x298>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a90      	ldr	r2, [pc, #576]	; (800173c <HAL_GPIO_Init+0x298>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a90      	ldr	r2, [pc, #576]	; (8001740 <HAL_GPIO_Init+0x29c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a8e      	ldr	r2, [pc, #568]	; (8001740 <HAL_GPIO_Init+0x29c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a8e      	ldr	r2, [pc, #568]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a8c      	ldr	r2, [pc, #560]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a75      	ldr	r2, [pc, #468]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80c1 	beq.w	80017a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <HAL_GPIO_Init+0x2a8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2a8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_GPIO_Init+0x2a8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a3c      	ldr	r2, [pc, #240]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d01f      	beq.n	80016a8 <HAL_GPIO_Init+0x204>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3b      	ldr	r2, [pc, #236]	; (8001758 <HAL_GPIO_Init+0x2b4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d019      	beq.n	80016a4 <HAL_GPIO_Init+0x200>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d013      	beq.n	80016a0 <HAL_GPIO_Init+0x1fc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a39      	ldr	r2, [pc, #228]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00d      	beq.n	800169c <HAL_GPIO_Init+0x1f8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x2c0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x1f4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a37      	ldr	r2, [pc, #220]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_GPIO_Init+0x1f0>
 8001690:	2305      	movs	r3, #5
 8001692:	e00a      	b.n	80016aa <HAL_GPIO_Init+0x206>
 8001694:	2306      	movs	r3, #6
 8001696:	e008      	b.n	80016aa <HAL_GPIO_Init+0x206>
 8001698:	2304      	movs	r3, #4
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x206>
 800169c:	2303      	movs	r3, #3
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x206>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x206>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x206>
 80016a8:	2300      	movs	r3, #0
 80016aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ba:	4925      	ldr	r1, [pc, #148]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4924      	ldr	r1, [pc, #144]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4920      	ldr	r1, [pc, #128]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	491a      	ldr	r1, [pc, #104]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_GPIO_Init+0x2c8>)
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	4916      	ldr	r1, [pc, #88]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001714:	4013      	ands	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d025      	beq.n	8001770 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	4910      	ldr	r1, [pc, #64]	; (800176c <HAL_GPIO_Init+0x2c8>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
 8001730:	e025      	b.n	800177e <HAL_GPIO_Init+0x2da>
 8001732:	bf00      	nop
 8001734:	10320000 	.word	0x10320000
 8001738:	10310000 	.word	0x10310000
 800173c:	10220000 	.word	0x10220000
 8001740:	10210000 	.word	0x10210000
 8001744:	10120000 	.word	0x10120000
 8001748:	10110000 	.word	0x10110000
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	40011000 	.word	0x40011000
 8001760:	40011400 	.word	0x40011400
 8001764:	40011800 	.word	0x40011800
 8001768:	40011c00 	.word	0x40011c00
 800176c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4913      	ldr	r1, [pc, #76]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800177a:	4013      	ands	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	60cb      	str	r3, [r1, #12]
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_GPIO_Init+0x324>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f ae7e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e272      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	d00c      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001828:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
 8001834:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x12c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e24c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 80018b8:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a67      	ldr	r2, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fcd2 	bl	8001280 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fcce 	bl	8001280 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e200      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe4>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fcbe 	bl	8001280 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fcba 	bl	8001280 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1ec      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x10c>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1c0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4939      	ldr	r1, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fc73 	bl	8001280 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fc6f 	bl	8001280 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1a1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc52 	bl	8001280 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fc4e 	bl	8001280 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e180      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03a      	beq.n	8001a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fc32 	bl	8001280 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fc2e 	bl	8001280 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e160      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 faa6 	bl	8001f90 <RCC_Delay>
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fc18 	bl	8001280 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc14 	bl	8001280 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e146      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	42420000 	.word	0x42420000
 8001a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e9      	bne.n	8001a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a6 	beq.w	8001bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fbd5 	bl	8001280 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff fbd1 	bl	8001280 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e103      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x312>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e02d      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x334>
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	e01c      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x356>
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a60      	ldr	r2, [pc, #384]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fb85 	bl	8001280 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fb81 	bl	8001280 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0b1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <HAL_RCC_OscConfig+0x37e>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb6f 	bl	8001280 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb6b 	bl	8001280 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e09b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d061      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d146      	bne.n	8001c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb3f 	bl	8001280 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff fb3b 	bl	8001280 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e06d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a19      	ldr	r1, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	430b      	orrs	r3, r1
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb0f 	bl	8001280 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fb0b 	bl	8001280 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e03d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46a>
 8001c84:	e035      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff faf8 	bl	8001280 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff faf4 	bl	8001280 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e026      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x498>
 8001cb2:	e01e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e019      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x500>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa46 	bl	8001280 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fa42 	bl	8001280 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f9a4 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08002ef0 	.word	0x08002ef0
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xac>)
 8001edc:	1d3c      	adds	r4, r7, #4
 8001ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee4:	f240 2301 	movw	r3, #513	; 0x201
 8001ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x46>
 8001f12:	e02b      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	e02b      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3328      	adds	r3, #40	; 0x28
 8001f24:	443b      	add	r3, r7
 8001f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	0c5b      	lsrs	r3, r3, #17
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	3328      	adds	r3, #40	; 0x28
 8001f42:	443b      	add	r3, r7
 8001f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e004      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	623b      	str	r3, [r7, #32]
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6e:	623b      	str	r3, [r7, #32]
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc90      	pop	{r4, r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	08002ee0 	.word	0x08002ee0
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_SRAM_Init+0x1c>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe6:	d101      	bne.n	8001fec <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e038      	b.n	800205e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d106      	bne.n	8002006 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7fe f9b7 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3308      	adds	r3, #8
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f000 fe57 	bl	8002cc4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	461a      	mov	r2, r3
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	f000 feb9 	bl	8002d98 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6858      	ldr	r0, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f000 fee4 	bl	8002e00 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6892      	ldr	r2, [r2, #8]
 800204c:	f041 0101 	orr.w	r1, r1, #1
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e041      	b.n	80020fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7fe ffab 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f000 fac1 	bl	800262c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e041      	b.n	800219a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f839 	bl	80021a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 fa72 	bl	800262c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_TIM_PWM_Start+0x24>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e022      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d109      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e015      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_TIM_PWM_Start+0x58>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e008      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e072      	b.n	800230c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0x82>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002234:	e013      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0x92>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002244:	e00b      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_TIM_PWM_Start+0xa2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002254:	e003      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fc9c 	bl	8002ba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_TIM_PWM_Start+0x160>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_TIM_PWM_Start+0xcc>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_TIM_PWM_Start+0x164>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_TIM_PWM_Start+0xd0>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_TIM_PWM_Start+0xd2>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_TIM_PWM_Start+0x160>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x122>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_TIM_PWM_Start+0x164>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x122>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x122>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_TIM_PWM_Start+0x168>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x122>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <HAL_TIM_PWM_Start+0x16c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_PWM_Start+0x122>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <HAL_TIM_PWM_Start+0x170>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d010      	beq.n	800230a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	e007      	b.n	800230a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40013400 	.word	0x40013400
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00

08002328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800233e:	2302      	movs	r3, #2
 8002340:	e0ac      	b.n	800249c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0c      	cmp	r3, #12
 800234e:	f200 809f 	bhi.w	8002490 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	0800238d 	.word	0x0800238d
 800235c:	08002491 	.word	0x08002491
 8002360:	08002491 	.word	0x08002491
 8002364:	08002491 	.word	0x08002491
 8002368:	080023cd 	.word	0x080023cd
 800236c:	08002491 	.word	0x08002491
 8002370:	08002491 	.word	0x08002491
 8002374:	08002491 	.word	0x08002491
 8002378:	0800240f 	.word	0x0800240f
 800237c:	08002491 	.word	0x08002491
 8002380:	08002491 	.word	0x08002491
 8002384:	08002491 	.word	0x08002491
 8002388:	0800244f 	.word	0x0800244f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f9c4 	bl	8002720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	619a      	str	r2, [r3, #24]
      break;
 80023ca:	e062      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fa14 	bl	8002800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6999      	ldr	r1, [r3, #24]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	021a      	lsls	r2, r3, #8
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	619a      	str	r2, [r3, #24]
      break;
 800240c:	e041      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fa67 	bl	80028e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0208 	orr.w	r2, r2, #8
 8002428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0204 	bic.w	r2, r2, #4
 8002438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	61da      	str	r2, [r3, #28]
      break;
 800244c:	e021      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fabb 	bl	80029d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69d9      	ldr	r1, [r3, #28]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	61da      	str	r2, [r3, #28]
      break;
 800248e:	e000      	b.n	8002492 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_ConfigClockSource+0x18>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0b3      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x180>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d03e      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xd0>
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	f200 8087 	bhi.w	800260c <HAL_TIM_ConfigClockSource+0x168>
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	f000 8085 	beq.w	8002610 <HAL_TIM_ConfigClockSource+0x16c>
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	d87f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d01a      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xa2>
 8002510:	2b70      	cmp	r3, #112	; 0x70
 8002512:	d87b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d050      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x116>
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d877      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d03c      	beq.n	800259a <HAL_TIM_ConfigClockSource+0xf6>
 8002520:	2b50      	cmp	r3, #80	; 0x50
 8002522:	d873      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d058      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x136>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d86f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d064      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x156>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d86b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b20      	cmp	r3, #32
 8002536:	d060      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x156>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d867      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x156>
 8002540:	2b10      	cmp	r3, #16
 8002542:	d05a      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002544:	e062      	b.n	800260c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6899      	ldr	r1, [r3, #8]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f000 fb06 	bl	8002b66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002568:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
      break;
 8002572:	e04e      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f000 faef 	bl	8002b66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002596:	609a      	str	r2, [r3, #8]
      break;
 8002598:	e03b      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 fa66 	bl	8002a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2150      	movs	r1, #80	; 0x50
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fabd 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e02b      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 fa84 	bl	8002ad4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2160      	movs	r1, #96	; 0x60
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 faad 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80025d8:	e01b      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 fa46 	bl	8002a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fa9d 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80025f8:	e00b      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f000 fa94 	bl	8002b32 <TIM_ITRx_SetConfig>
        break;
 800260a:	e002      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800260c:	bf00      	nop
 800260e:	e000      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002610:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a33      	ldr	r2, [pc, #204]	; (800270c <TIM_Base_SetConfig+0xe0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d013      	beq.n	800266c <TIM_Base_SetConfig+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a32      	ldr	r2, [pc, #200]	; (8002710 <TIM_Base_SetConfig+0xe4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00f      	beq.n	800266c <TIM_Base_SetConfig+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d00b      	beq.n	800266c <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <TIM_Base_SetConfig+0xe8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <TIM_Base_SetConfig+0xec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_Base_SetConfig+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <TIM_Base_SetConfig+0xf0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <TIM_Base_SetConfig+0xe0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <TIM_Base_SetConfig+0x82>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <TIM_Base_SetConfig+0xe4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00f      	beq.n	80026ae <TIM_Base_SetConfig+0x82>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x82>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <TIM_Base_SetConfig+0xe8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x82>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <TIM_Base_SetConfig+0xec>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x82>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <TIM_Base_SetConfig+0xf0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <TIM_Base_SetConfig+0xe0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d003      	beq.n	80026f4 <TIM_Base_SetConfig+0xc8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <TIM_Base_SetConfig+0xe4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	615a      	str	r2, [r3, #20]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40013400 	.word	0x40013400
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40000c00 	.word	0x40000c00

08002720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0201 	bic.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 0302 	bic.w	r3, r3, #2
 8002768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <TIM_OC1_SetConfig+0xd8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_OC1_SetConfig+0x64>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <TIM_OC1_SetConfig+0xdc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d10c      	bne.n	800279e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f023 0308 	bic.w	r3, r3, #8
 800278a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <TIM_OC1_SetConfig+0xd8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_OC1_SetConfig+0x8e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <TIM_OC1_SetConfig+0xdc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d111      	bne.n	80027d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	621a      	str	r2, [r3, #32]
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40013400 	.word	0x40013400

08002800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0210 	bic.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0320 	bic.w	r3, r3, #32
 800284a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <TIM_OC2_SetConfig+0xe0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_OC2_SetConfig+0x68>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <TIM_OC2_SetConfig+0xe4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10d      	bne.n	8002884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800286e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <TIM_OC2_SetConfig+0xe0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_OC2_SetConfig+0x94>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <TIM_OC2_SetConfig+0xe4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d113      	bne.n	80028bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800289a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40013400 	.word	0x40013400

080028e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <TIM_OC3_SetConfig+0xe0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_OC3_SetConfig+0x66>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <TIM_OC3_SetConfig+0xe4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <TIM_OC3_SetConfig+0xe0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_OC3_SetConfig+0x92>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <TIM_OC3_SetConfig+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d113      	bne.n	80029a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	621a      	str	r2, [r3, #32]
}
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40013400 	.word	0x40013400

080029d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	031b      	lsls	r3, r3, #12
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <TIM_OC4_SetConfig+0xa0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_OC4_SetConfig+0x68>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <TIM_OC4_SetConfig+0xa4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d109      	bne.n	8002a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40013400 	.word	0x40013400

08002a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f023 0201 	bic.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f023 030a 	bic.w	r3, r3, #10
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 0210 	bic.w	r2, r3, #16
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	031b      	lsls	r3, r3, #12
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	621a      	str	r2, [r3, #32]
}
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 0307 	orr.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	021a      	lsls	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	609a      	str	r2, [r3, #8]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e050      	b.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d018      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d009      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10c      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40013400 	.word	0x40013400
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00

08002cc4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	f023 0101 	bic.w	r1, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d102      	bne.n	8002cf4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e001      	b.n	8002cf8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002d04:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002d0a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002d10:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002d16:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002d1c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002d22:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002d28:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002d2e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002d34:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <FSMC_NORSRAM_Init+0xd0>)
 8002d54:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002d64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	ea02 0103 	and.w	r1, r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4319      	orrs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	0008fb7f 	.word	0x0008fb7f

08002d98 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	3b02      	subs	r3, #2
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	3201      	adds	r2, #1
 8002dec:	4319      	orrs	r1, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e14:	d11d      	bne.n	8002e52 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	6811      	ldr	r1, [r2, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	6852      	ldr	r2, [r2, #4]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	0212      	lsls	r2, r2, #8
 8002e34:	4311      	orrs	r1, r2
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	6992      	ldr	r2, [r2, #24]
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	0412      	lsls	r2, r2, #16
 8002e42:	430a      	orrs	r2, r1
 8002e44:	ea43 0102 	orr.w	r1, r3, r2
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e50:	e005      	b.n	8002e5e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	cff00000 	.word	0xcff00000

08002e70 <memset>:
 8002e70:	4603      	mov	r3, r0
 8002e72:	4402      	add	r2, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2600      	movs	r6, #0
 8002e84:	4d0c      	ldr	r5, [pc, #48]	; (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	f000 f81a 	bl	8002ec8 <_init>
 8002e94:	2600      	movs	r6, #0
 8002e96:	4d0a      	ldr	r5, [pc, #40]	; (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08002f00 	.word	0x08002f00
 8002ebc:	08002f00 	.word	0x08002f00
 8002ec0:	08002f00 	.word	0x08002f00
 8002ec4:	08002f04 	.word	0x08002f04

08002ec8 <_init>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_fini>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr
