
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f0  080035f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035f0  080035f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f0  080035f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08003604  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003604  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0ac  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b0  00000000  00000000  0002c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b20  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9a7  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010042  00000000  00000000  0004a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b51b  00000000  00000000  0005a939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003adc  00000000  00000000  000f5e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f9930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080035b0 	.word	0x080035b0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080035b0 	.word	0x080035b0

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f002 f8d5 	bl	800246c <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fc0f 	bl	8000aea <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f001 fad0 	bl	80018e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f001 fac3 	bl	80018e0 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000070 	.word	0x20000070
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039c:	4b6f      	ldr	r3, [pc, #444]	; (800055c <MX_GPIO_Init+0x1d4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a6e      	ldr	r2, [pc, #440]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b6c      	ldr	r3, [pc, #432]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b69      	ldr	r3, [pc, #420]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a68      	ldr	r2, [pc, #416]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b66      	ldr	r3, [pc, #408]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b63      	ldr	r3, [pc, #396]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a62      	ldr	r2, [pc, #392]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b60      	ldr	r3, [pc, #384]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b5d      	ldr	r3, [pc, #372]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a5c      	ldr	r2, [pc, #368]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b5a      	ldr	r3, [pc, #360]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b57      	ldr	r3, [pc, #348]	; (800055c <MX_GPIO_Init+0x1d4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a56      	ldr	r2, [pc, #344]	; (800055c <MX_GPIO_Init+0x1d4>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b54      	ldr	r3, [pc, #336]	; (800055c <MX_GPIO_Init+0x1d4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2107      	movs	r1, #7
 8000418:	4851      	ldr	r0, [pc, #324]	; (8000560 <MX_GPIO_Init+0x1d8>)
 800041a:	f001 fbf5 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	210c      	movs	r1, #12
 8000422:	4850      	ldr	r0, [pc, #320]	; (8000564 <MX_GPIO_Init+0x1dc>)
 8000424:	f001 fbf0 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	21f0      	movs	r1, #240	; 0xf0
 800042c:	484e      	ldr	r0, [pc, #312]	; (8000568 <MX_GPIO_Init+0x1e0>)
 800042e:	f001 fbeb 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2123      	movs	r1, #35	; 0x23
 8000436:	484d      	ldr	r0, [pc, #308]	; (800056c <MX_GPIO_Init+0x1e4>)
 8000438:	f001 fbe6 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f243 0108 	movw	r1, #12296	; 0x3008
 8000442:	484b      	ldr	r0, [pc, #300]	; (8000570 <MX_GPIO_Init+0x1e8>)
 8000444:	f001 fbe0 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000448:	2307      	movs	r3, #7
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000458:	f107 0318 	add.w	r3, r7, #24
 800045c:	4619      	mov	r1, r3
 800045e:	4840      	ldr	r0, [pc, #256]	; (8000560 <MX_GPIO_Init+0x1d8>)
 8000460:	f001 fa3e 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000464:	2308      	movs	r3, #8
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4619      	mov	r1, r3
 8000476:	483a      	ldr	r0, [pc, #232]	; (8000560 <MX_GPIO_Init+0x1d8>)
 8000478:	f001 fa32 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800047c:	2310      	movs	r3, #16
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <MX_GPIO_Init+0x1ec>)
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4619      	mov	r1, r3
 800048e:	4834      	ldr	r0, [pc, #208]	; (8000560 <MX_GPIO_Init+0x1d8>)
 8000490:	f001 fa26 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	4619      	mov	r1, r3
 80004a8:	482f      	ldr	r0, [pc, #188]	; (8000568 <MX_GPIO_Init+0x1e0>)
 80004aa:	f001 fa19 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004ae:	2308      	movs	r3, #8
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_GPIO_Init+0x1ec>)
 80004b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	4619      	mov	r1, r3
 80004c0:	4829      	ldr	r0, [pc, #164]	; (8000568 <MX_GPIO_Init+0x1e0>)
 80004c2:	f001 fa0d 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c6:	230c      	movs	r3, #12
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2302      	movs	r3, #2
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0318 	add.w	r3, r7, #24
 80004da:	4619      	mov	r1, r3
 80004dc:	4821      	ldr	r0, [pc, #132]	; (8000564 <MX_GPIO_Init+0x1dc>)
 80004de:	f001 f9ff 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004e2:	23f0      	movs	r3, #240	; 0xf0
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2302      	movs	r3, #2
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f2:	f107 0318 	add.w	r3, r7, #24
 80004f6:	4619      	mov	r1, r3
 80004f8:	481b      	ldr	r0, [pc, #108]	; (8000568 <MX_GPIO_Init+0x1e0>)
 80004fa:	f001 f9f1 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80004fe:	2323      	movs	r3, #35	; 0x23
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	4619      	mov	r1, r3
 8000514:	4815      	ldr	r0, [pc, #84]	; (800056c <MX_GPIO_Init+0x1e4>)
 8000516:	f001 f9e3 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800051a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800051e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4619      	mov	r1, r3
 800052e:	480f      	ldr	r0, [pc, #60]	; (800056c <MX_GPIO_Init+0x1e4>)
 8000530:	f001 f9d6 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8000534:	f243 0308 	movw	r3, #12296	; 0x3008
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4619      	mov	r1, r3
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <MX_GPIO_Init+0x1e8>)
 800054e:	f001 f9c7 	bl	80018e0 <HAL_GPIO_Init>

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	; 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40011800 	.word	0x40011800
 8000564:	40010800 	.word	0x40010800
 8000568:	40011000 	.word	0x40011000
 800056c:	40010c00 	.word	0x40010c00
 8000570:	40011400 	.word	0x40011400
 8000574:	10110000 	.word	0x10110000

08000578 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	e002      	b.n	8000588 <Delay+0x10>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3b01      	subs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f9      	bne.n	8000582 <Delay+0xa>
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <LCD_INIT>:

void LCD_INIT ( void )
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f829 	bl	80005f8 <LCD_BackLed_Control>
	LCD_Rst();
 80005a6:	f000 f80f 	bl	80005c8 <LCD_Rst>
	LCD_REG_Config();
 80005aa:	f000 f85f 	bl	800066c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005b8:	22f0      	movs	r2, #240	; 0xf0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f9e6 	bl	800098e <LCD_Clear>
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LCD_Rst>:



void LCD_Rst ( void )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2102      	movs	r1, #2
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <LCD_Rst+0x28>)
 80005d2:	f001 fb19 	bl	8001c08 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <LCD_Rst+0x2c>)
 80005d8:	f7ff ffce 	bl	8000578 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <LCD_Rst+0x28>)
 80005e2:	f001 fb11 	bl	8001c08 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <LCD_Rst+0x2c>)
 80005e8:	f7ff ffc6 	bl	8000578 <Delay>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40011800 	.word	0x40011800
 80005f4:	0002bffc 	.word	0x0002bffc

080005f8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <LCD_BackLed_Control+0x34>)
 8000610:	f001 fafa 	bl	8001c08 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000614:	e005      	b.n	8000622 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <LCD_BackLed_Control+0x34>)
 800061e:	f001 faf3 	bl	8001c08 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40011400 	.word	0x40011400

08000630 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800063a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	8013      	strh	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <LCD_Write_Data+0x1c>)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	8013      	strh	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	60020000 	.word	0x60020000

0800066c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000670:	20cf      	movs	r0, #207	; 0xcf
 8000672:	f7ff ffdd 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff ffe8 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800067c:	2081      	movs	r0, #129	; 0x81
 800067e:	f7ff ffe5 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000682:	2030      	movs	r0, #48	; 0x30
 8000684:	f7ff ffe2 	bl	800064c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000688:	20ed      	movs	r0, #237	; 0xed
 800068a:	f7ff ffd1 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f7ff ffdc 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000694:	2003      	movs	r0, #3
 8000696:	f7ff ffd9 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800069a:	2012      	movs	r0, #18
 800069c:	f7ff ffd6 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80006a0:	2081      	movs	r0, #129	; 0x81
 80006a2:	f7ff ffd3 	bl	800064c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80006a6:	20e8      	movs	r0, #232	; 0xe8
 80006a8:	f7ff ffc2 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80006ac:	2085      	movs	r0, #133	; 0x85
 80006ae:	f7ff ffcd 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80006b2:	2010      	movs	r0, #16
 80006b4:	f7ff ffca 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80006b8:	2078      	movs	r0, #120	; 0x78
 80006ba:	f7ff ffc7 	bl	800064c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80006be:	20cb      	movs	r0, #203	; 0xcb
 80006c0:	f7ff ffb6 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80006c4:	2039      	movs	r0, #57	; 0x39
 80006c6:	f7ff ffc1 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80006ca:	202c      	movs	r0, #44	; 0x2c
 80006cc:	f7ff ffbe 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ffbb 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80006d6:	2034      	movs	r0, #52	; 0x34
 80006d8:	f7ff ffb8 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff ffb5 	bl	800064c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80006e2:	20f7      	movs	r0, #247	; 0xf7
 80006e4:	f7ff ffa4 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80006e8:	2020      	movs	r0, #32
 80006ea:	f7ff ffaf 	bl	800064c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80006ee:	20ea      	movs	r0, #234	; 0xea
 80006f0:	f7ff ff9e 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ffa9 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ffa6 	bl	800064c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000700:	20b1      	movs	r0, #177	; 0xb1
 8000702:	f7ff ff95 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ffa0 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800070c:	201b      	movs	r0, #27
 800070e:	f7ff ff9d 	bl	800064c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000712:	20b6      	movs	r0, #182	; 0xb6
 8000714:	f7ff ff8c 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000718:	200a      	movs	r0, #10
 800071a:	f7ff ff97 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800071e:	20a2      	movs	r0, #162	; 0xa2
 8000720:	f7ff ff94 	bl	800064c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000724:	20c0      	movs	r0, #192	; 0xc0
 8000726:	f7ff ff83 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800072a:	2035      	movs	r0, #53	; 0x35
 800072c:	f7ff ff8e 	bl	800064c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000730:	20c1      	movs	r0, #193	; 0xc1
 8000732:	f7ff ff7d 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000736:	2011      	movs	r0, #17
 8000738:	f7ff ff88 	bl	800064c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800073c:	20c5      	movs	r0, #197	; 0xc5
 800073e:	f7ff ff77 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000742:	2045      	movs	r0, #69	; 0x45
 8000744:	f7ff ff82 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000748:	2045      	movs	r0, #69	; 0x45
 800074a:	f7ff ff7f 	bl	800064c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800074e:	20c7      	movs	r0, #199	; 0xc7
 8000750:	f7ff ff6e 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000754:	20a2      	movs	r0, #162	; 0xa2
 8000756:	f7ff ff79 	bl	800064c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800075a:	20f2      	movs	r0, #242	; 0xf2
 800075c:	f7ff ff68 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff73 	bl	800064c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000766:	2026      	movs	r0, #38	; 0x26
 8000768:	f7ff ff62 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff6d 	bl	800064c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000772:	20e0      	movs	r0, #224	; 0xe0
 8000774:	f7ff ff5c 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000778:	200f      	movs	r0, #15
 800077a:	f7ff ff67 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800077e:	2026      	movs	r0, #38	; 0x26
 8000780:	f7ff ff64 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000784:	2024      	movs	r0, #36	; 0x24
 8000786:	f7ff ff61 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800078a:	200b      	movs	r0, #11
 800078c:	f7ff ff5e 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000790:	200e      	movs	r0, #14
 8000792:	f7ff ff5b 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000796:	2009      	movs	r0, #9
 8000798:	f7ff ff58 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800079c:	2054      	movs	r0, #84	; 0x54
 800079e:	f7ff ff55 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80007a2:	20a8      	movs	r0, #168	; 0xa8
 80007a4:	f7ff ff52 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80007a8:	2046      	movs	r0, #70	; 0x46
 80007aa:	f7ff ff4f 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80007ae:	200c      	movs	r0, #12
 80007b0:	f7ff ff4c 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80007b4:	2017      	movs	r0, #23
 80007b6:	f7ff ff49 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80007ba:	2009      	movs	r0, #9
 80007bc:	f7ff ff46 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80007c0:	200f      	movs	r0, #15
 80007c2:	f7ff ff43 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80007c6:	2007      	movs	r0, #7
 80007c8:	f7ff ff40 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff3d 	bl	800064c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80007d2:	20e1      	movs	r0, #225	; 0xe1
 80007d4:	f7ff ff2c 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ff37 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80007de:	2019      	movs	r0, #25
 80007e0:	f7ff ff34 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80007e4:	201b      	movs	r0, #27
 80007e6:	f7ff ff31 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80007ea:	2004      	movs	r0, #4
 80007ec:	f7ff ff2e 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80007f0:	2010      	movs	r0, #16
 80007f2:	f7ff ff2b 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80007f6:	2007      	movs	r0, #7
 80007f8:	f7ff ff28 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80007fc:	202a      	movs	r0, #42	; 0x2a
 80007fe:	f7ff ff25 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000802:	2047      	movs	r0, #71	; 0x47
 8000804:	f7ff ff22 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000808:	2039      	movs	r0, #57	; 0x39
 800080a:	f7ff ff1f 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff1c 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000814:	2006      	movs	r0, #6
 8000816:	f7ff ff19 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800081a:	2006      	movs	r0, #6
 800081c:	f7ff ff16 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000820:	2030      	movs	r0, #48	; 0x30
 8000822:	f7ff ff13 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000826:	2038      	movs	r0, #56	; 0x38
 8000828:	f7ff ff10 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800082c:	200f      	movs	r0, #15
 800082e:	f7ff ff0d 	bl	800064c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000832:	2036      	movs	r0, #54	; 0x36
 8000834:	f7ff fefc 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000838:	20c8      	movs	r0, #200	; 0xc8
 800083a:	f7ff ff07 	bl	800064c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800083e:	202a      	movs	r0, #42	; 0x2a
 8000840:	f7ff fef6 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff01 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fefe 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fefb 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000856:	20ef      	movs	r0, #239	; 0xef
 8000858:	f7ff fef8 	bl	800064c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800085c:	202b      	movs	r0, #43	; 0x2b
 800085e:	f7ff fee7 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fef2 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff feef 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff feec 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000874:	203f      	movs	r0, #63	; 0x3f
 8000876:	f7ff fee9 	bl	800064c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800087a:	203a      	movs	r0, #58	; 0x3a
 800087c:	f7ff fed8 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000880:	2055      	movs	r0, #85	; 0x55
 8000882:	f7ff fee3 	bl	800064c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000886:	2011      	movs	r0, #17
 8000888:	f7ff fed2 	bl	8000630 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <LCD_REG_Config+0x230>)
 800088e:	f7ff fe73 	bl	8000578 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000892:	2029      	movs	r0, #41	; 0x29
 8000894:	f7ff fecc 	bl	8000630 <LCD_Write_Cmd>
	
	
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	0002bffc 	.word	0x0002bffc

080008a0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	80fb      	strh	r3, [r7, #6]
 80008b2:	4603      	mov	r3, r0
 80008b4:	80bb      	strh	r3, [r7, #4]
 80008b6:	460b      	mov	r3, r1
 80008b8:	807b      	strh	r3, [r7, #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80008be:	202a      	movs	r0, #42	; 0x2a
 80008c0:	f7ff feb6 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff febe 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff feb8 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	4413      	add	r3, r2
 80008e2:	3b01      	subs	r3, #1
 80008e4:	121b      	asrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff feaf 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80008ee:	88fa      	ldrh	r2, [r7, #6]
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fea4 	bl	800064c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f7ff fe93 	bl	8000630 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe9b 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe95 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000922:	88ba      	ldrh	r2, [r7, #4]
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	3b01      	subs	r3, #1
 800092a:	121b      	asrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe8c 	bl	800064c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000934:	88ba      	ldrh	r2, [r7, #4]
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	3b01      	subs	r3, #1
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	b29b      	uxth	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe81 	bl	800064c <LCD_Write_Data>
	
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}

08000952 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000962:	202c      	movs	r0, #44	; 0x2c
 8000964:	f7ff fe64 	bl	8000630 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	e006      	b.n	800097c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800096e:	887b      	ldrh	r3, [r7, #2]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe6b 	bl	800064c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3f4      	bcc.n	800096e <LCD_FillColor+0x1c>
		
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800098e:	b590      	push	{r4, r7, lr}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	4604      	mov	r4, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4611      	mov	r1, r2
 800099a:	461a      	mov	r2, r3
 800099c:	4623      	mov	r3, r4
 800099e:	80fb      	strh	r3, [r7, #6]
 80009a0:	4603      	mov	r3, r0
 80009a2:	80bb      	strh	r3, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80009ac:	883b      	ldrh	r3, [r7, #0]
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	88b9      	ldrh	r1, [r7, #4]
 80009b2:	88f8      	ldrh	r0, [r7, #6]
 80009b4:	f7ff ff74 	bl	80008a0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	883a      	ldrh	r2, [r7, #0]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	8b3b      	ldrh	r3, [r7, #24]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4610      	mov	r0, r2
 80009c8:	f7ff ffc3 	bl	8000952 <LCD_FillColor>
	
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fe17 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f83f 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff fcd1 	bl	8000388 <MX_GPIO_Init>
  MX_TIM3_Init();
 80009e6:	f000 fad1 	bl	8000f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 80009ea:	f000 fb51 	bl	8001090 <MX_TIM4_Init>
  MX_FSMC_Init();
 80009ee:	f7ff fc19 	bl	8000224 <MX_FSMC_Init>
  MX_TIM2_Init();
 80009f2:	f000 fa7d 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM8_Init();
 80009f6:	f000 fbcf 	bl	8001198 <MX_TIM8_Init>
  MX_TIM1_Init();
 80009fa:	f000 f9c9 	bl	8000d90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80009fe:	f000 fd69 	bl	80014d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <main+0x80>)
 8000a06:	f001 fe1d 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <main+0x84>)
 8000a0e:	f001 fe19 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a12:	2108      	movs	r1, #8
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <main+0x80>)
 8000a16:	f001 fe15 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a1a:	210c      	movs	r1, #12
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <main+0x80>)
 8000a1e:	f001 fe11 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <main+0x88>)
 8000a26:	f001 fe0d 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <main+0x88>)
 8000a2e:	f001 fe09 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a32:	2108      	movs	r1, #8
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <main+0x88>)
 8000a36:	f001 fe05 	bl	8002644 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a3a:	210c      	movs	r1, #12
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <main+0x88>)
 8000a3e:	f001 fe01 	bl	8002644 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000a42:	f7ff fdaa 	bl	800059a <LCD_INIT>
  servo_init();
 8000a46:	f000 f855 	bl	8000af4 <servo_init>
  uint32_t last_tick = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  uint8_t flag = 4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x7e>
 8000a54:	2000014c 	.word	0x2000014c
 8000a58:	200000bc 	.word	0x200000bc
 8000a5c:	20000104 	.word	0x20000104

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fd72 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f8c5 	bl	8001c38 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f819 	bl	8000aea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fb32 	bl	800213c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ade:	f000 f804 	bl	8000aea <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	; 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <Error_Handler+0x8>

08000af4 <servo_init>:
#include "servo.h"

GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
extern start;

void servo_init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++)
 8000afa:	2301      	movs	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	e008      	b.n	8000b12 <servo_init+0x1e>
		servo_pull(i*2);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f86e 	bl	8000be8 <servo_pull>
	for (uint8_t i = 1; i <= 4; i++)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d9f3      	bls.n	8000b00 <servo_init+0xc>
	HAL_Delay(DELAY_TIME_P);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f000 fdd8 	bl	80016d0 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8000b20:	2301      	movs	r3, #1
 8000b22:	71bb      	strb	r3, [r7, #6]
 8000b24:	e00a      	b.n	8000b3c <servo_init+0x48>
		centre_0(i*2-1);
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f821 	bl	8000b78 <centre_0>
	for (uint8_t i = 1; i <= 4; i++)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	71bb      	strb	r3, [r7, #6]
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d9f1      	bls.n	8000b26 <servo_init+0x32>
	HAL_Delay(DELAY_TIME_90);
 8000b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b46:	f000 fdc3 	bl	80016d0 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	717b      	strb	r3, [r7, #5]
 8000b4e:	e008      	b.n	8000b62 <servo_init+0x6e>
		servo_push(i*2);
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f880 	bl	8000c5c <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8000b5c:	797b      	ldrb	r3, [r7, #5]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	717b      	strb	r3, [r7, #5]
 8000b62:	797b      	ldrb	r3, [r7, #5]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d9f3      	bls.n	8000b50 <servo_init+0x5c>
	HAL_Delay(DELAY_TIME_P);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f000 fdb0 	bl	80016d0 <HAL_Delay>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <centre_0>:
		HAL_Delay(DELAY_TIME_P);
	}

}

void centre_0(servos servo) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d024      	beq.n	8000bd8 <centre_0+0x60>
		uint8_t target = servo/2+1;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	3301      	adds	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d81b      	bhi.n	8000bd8 <centre_0+0x60>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <centre_0+0x30>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000bc1 	.word	0x08000bc1
 8000bb0:	08000bc9 	.word	0x08000bc9
 8000bb4:	08000bd1 	.word	0x08000bd1
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <centre_0+0x6c>)
 8000bba:	225f      	movs	r2, #95	; 0x5f
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000bbe:	e00b      	b.n	8000bd8 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <centre_0+0x6c>)
 8000bc2:	2258      	movs	r2, #88	; 0x58
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000bc6:	e007      	b.n	8000bd8 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <centre_0+0x6c>)
 8000bca:	225c      	movs	r2, #92	; 0x5c
 8000bcc:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000bce:	e003      	b.n	8000bd8 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <centre_0+0x6c>)
 8000bd2:	225e      	movs	r2, #94	; 0x5e
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000bd6:	bf00      	nop
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40000400 	.word	0x40000400

08000be8 <servo_pull>:
				break;
		}
	}
}

void servo_pull(servos servo) {
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d123      	bne.n	8000c46 <servo_pull+0x5e>
		uint8_t target = servo/2;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d81c      	bhi.n	8000c46 <servo_pull+0x5e>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <servo_pull+0x2c>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000c35 	.word	0x08000c35
 8000c20:	08000c3f 	.word	0x08000c3f
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <servo_pull+0x68>)
 8000c26:	221e      	movs	r2, #30
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000c2a:	e00c      	b.n	8000c46 <servo_pull+0x5e>
			case 2:
				TIM1->CCR1 = PULL_DEGREE_2;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <servo_pull+0x6c>)
 8000c2e:	221e      	movs	r2, #30
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000c32:	e008      	b.n	8000c46 <servo_pull+0x5e>
			case 3:
				TIM2->CCR1 = PULL_DEGREE_3;
 8000c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c38:	221e      	movs	r2, #30
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000c3c:	e003      	b.n	8000c46 <servo_pull+0x5e>
			case 4:
				TIM8->CCR4 = PULL_DEGREE_4;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <servo_pull+0x70>)
 8000c40:	2219      	movs	r2, #25
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000c44:	bf00      	nop
		}
	}
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	40013400 	.word	0x40013400

08000c5c <servo_push>:

void servo_push(servos servo) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d123      	bne.n	8000cba <servo_push+0x5e>
		uint8_t target = servo/2;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d81c      	bhi.n	8000cba <servo_push+0x5e>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <servo_push+0x2c>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000c99 	.word	0x08000c99
 8000c8c:	08000ca1 	.word	0x08000ca1
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cb3 	.word	0x08000cb3
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <servo_push+0x68>)
 8000c9a:	2264      	movs	r2, #100	; 0x64
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000c9e:	e00c      	b.n	8000cba <servo_push+0x5e>
			case 2:
				TIM1->CCR1 = PUSH_DEGREE_2;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <servo_push+0x6c>)
 8000ca2:	225a      	movs	r2, #90	; 0x5a
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000ca6:	e008      	b.n	8000cba <servo_push+0x5e>
			case 3:
				TIM2->CCR1 = PUSH_DEGREE_3;
 8000ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cac:	2264      	movs	r2, #100	; 0x64
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000cb0:	e003      	b.n	8000cba <servo_push+0x5e>
			case 4:
				TIM8->CCR4 = PUSH_DEGREE_4;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <servo_push+0x70>)
 8000cb4:	225a      	movs	r2, #90	; 0x5a
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000cb8:	bf00      	nop
		}
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40000800 	.word	0x40000800
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40013400 	.word	0x40013400

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 fc8d 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
	...

08000d90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b096      	sub	sp, #88	; 0x58
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fbc5 	bl	8003558 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000dd0:	4a46      	ldr	r2, [pc, #280]	; (8000eec <MX_TIM1_Init+0x15c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1200-1;
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000dd6:	f240 42af 	movw	r2, #1199	; 0x4af
 8000dda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b42      	ldr	r3, [pc, #264]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1200-1;
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000de4:	f240 42af 	movw	r2, #1199	; 0x4af
 8000de8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df0:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dfc:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000dfe:	f001 fb82 	bl	8002506 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f7ff fe6f 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e16:	4619      	mov	r1, r3
 8000e18:	4833      	ldr	r0, [pc, #204]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000e1a:	f001 fd8b 	bl	8002934 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e24:	f7ff fe61 	bl	8000aea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000e2a:	f001 fbbb 	bl	80025a4 <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e34:	f7ff fe59 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e44:	4619      	mov	r1, r3
 8000e46:	4828      	ldr	r0, [pc, #160]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000e48:	f002 f918 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000e52:	f7ff fe4a 	bl	8000aea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	; 0x60
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30;
 8000e5a:	231e      	movs	r3, #30
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481b      	ldr	r0, [pc, #108]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000e7c:	f001 fc9c 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e86:	f7ff fe30 	bl	8000aea <Error_Handler>
  }
  sConfigOC.Pulse = 1200-1;
 8000e8a:	f240 43af 	movw	r3, #1199	; 0x4af
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	220c      	movs	r2, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000e9a:	f001 fc8d 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000ea4:	f7ff fe21 	bl	8000aea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000ecc:	f002 f942 	bl	8003154 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000ed6:	f7ff fe08 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM1_Init+0x158>)
 8000edc:	f000 fa62 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8000ee0:	bf00      	nop
 8000ee2:	3758      	adds	r7, #88	; 0x58
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000074 	.word	0x20000074
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f16:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f24:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f38:	f001 fae5 	bl	8002506 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f42:	f7ff fdd2 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f54:	f001 fcee 	bl	8002934 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f5e:	f7ff fdc4 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f70:	f002 f884 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f7a:	f7ff fdb6 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000bc 	.word	0x200000bc

08000f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08e      	sub	sp, #56	; 0x38
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <MX_TIM3_Init+0x100>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fc4:	f240 42af 	movw	r2, #1199	; 0x4af
 8000fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fd2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <MX_TIM3_Init+0xfc>)
 8000fe6:	f001 fa8e 	bl	8002506 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ff0:	f7ff fd7b 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4821      	ldr	r0, [pc, #132]	; (8001088 <MX_TIM3_Init+0xfc>)
 8001002:	f001 fc97 	bl	8002934 <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800100c:	f7ff fd6d 	bl	8000aea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <MX_TIM3_Init+0xfc>)
 8001012:	f001 fac7 	bl	80025a4 <HAL_TIM_PWM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800101c:	f7ff fd65 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4619      	mov	r1, r3
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <MX_TIM3_Init+0xfc>)
 8001030:	f002 f824 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800103a:	f7ff fd56 	bl	8000aea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 33;
 8001042:	2321      	movs	r3, #33	; 0x21
 8001044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM3_Init+0xfc>)
 8001056:	f001 fbaf 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001060:	f7ff fd43 	bl	8000aea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <MX_TIM3_Init+0xfc>)
 800106c:	f001 fba4 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001076:	f7ff fd38 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <MX_TIM3_Init+0xfc>)
 800107c:	f000 f992 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8001080:	bf00      	nop
 8001082:	3738      	adds	r7, #56	; 0x38
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000104 	.word	0x20000104
 800108c:	40000400 	.word	0x40000400

08001090 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <MX_TIM4_Init+0x100>)
 80010c2:	4a34      	ldr	r2, [pc, #208]	; (8001194 <MX_TIM4_Init+0x104>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_TIM4_Init+0x100>)
 80010c8:	f240 42af 	movw	r2, #1199	; 0x4af
 80010cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <MX_TIM4_Init+0x100>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <MX_TIM4_Init+0x100>)
 80010d6:	f240 42af 	movw	r2, #1199	; 0x4af
 80010da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_TIM4_Init+0x100>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_TIM4_Init+0x100>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_TIM4_Init+0x100>)
 80010ea:	f001 fa0c 	bl	8002506 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80010f4:	f7ff fcf9 	bl	8000aea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	4619      	mov	r1, r3
 8001104:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_TIM4_Init+0x100>)
 8001106:	f001 fc15 	bl	8002934 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001110:	f7ff fceb 	bl	8000aea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001114:	481e      	ldr	r0, [pc, #120]	; (8001190 <MX_TIM4_Init+0x100>)
 8001116:	f001 fa45 	bl	80025a4 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001120:	f7ff fce3 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4619      	mov	r1, r3
 8001132:	4817      	ldr	r0, [pc, #92]	; (8001190 <MX_TIM4_Init+0x100>)
 8001134:	f001 ffa2 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800113e:	f7ff fcd4 	bl	8000aea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8001146:	231e      	movs	r3, #30
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM4_Init+0x100>)
 800115a:	f001 fb2d 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001164:	f7ff fcc1 	bl	8000aea <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2204      	movs	r2, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM4_Init+0x100>)
 8001174:	f001 fb20 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 800117e:	f7ff fcb4 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM4_Init+0x100>)
 8001184:	f000 f90e 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3738      	adds	r7, #56	; 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000014c 	.word	0x2000014c
 8001194:	40000800 	.word	0x40000800

08001198 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	; 0x48
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 f9c8 	bl	8003558 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011ca:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <MX_TIM8_Init+0x11c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1200-1;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011d0:	f240 42af 	movw	r2, #1199	; 0x4af
 80011d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1200-1;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011de:	f240 42af 	movw	r2, #1199	; 0x4af
 80011e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011f6:	482e      	ldr	r0, [pc, #184]	; (80012b0 <MX_TIM8_Init+0x118>)
 80011f8:	f001 f9d4 	bl	80025a4 <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001202:	f7ff fc72 	bl	8000aea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800120e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001212:	4619      	mov	r1, r3
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <MX_TIM8_Init+0x118>)
 8001216:	f001 ff31 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001220:	f7ff fc63 	bl	8000aea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30;
 8001228:	231e      	movs	r3, #30
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	2208      	movs	r2, #8
 8001246:	4619      	mov	r1, r3
 8001248:	4819      	ldr	r0, [pc, #100]	; (80012b0 <MX_TIM8_Init+0x118>)
 800124a:	f001 fab5 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001254:	f7ff fc49 	bl	8000aea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	220c      	movs	r2, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_TIM8_Init+0x118>)
 8001262:	f001 faa9 	bl	80027b8 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 800126c:	f7ff fc3d 	bl	8000aea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001288:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM8_Init+0x118>)
 8001294:	f001 ff5e 	bl	8003154 <HAL_TIMEx_ConfigBreakDeadTime>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 800129e:	f7ff fc24 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM8_Init+0x118>)
 80012a4:	f000 f87e 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3748      	adds	r7, #72	; 0x48
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000194 	.word	0x20000194
 80012b4:	40013400 	.word	0x40013400

080012b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a24      	ldr	r2, [pc, #144]	; (8001358 <HAL_TIM_Base_MspInit+0xa0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10c      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012e2:	e034      	b.n	800134e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d10c      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
}
 8001306:	e022      	b.n	800134e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_TIM_Base_MspInit+0xa8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
}
 800132a:	e010      	b.n	800134e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_TIM_Base_MspInit+0xac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10b      	bne.n	800134e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_TIM_Base_MspInit+0xa4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40000400 	.word	0x40000400
 8001364:	40000800 	.word	0x40000800

08001368 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_TIM_PWM_MspInit+0x34>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10b      	bne.n	8001392 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_TIM_PWM_MspInit+0x38>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40013400 	.word	0x40013400
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_TIM_MspPostInit+0x110>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d119      	bne.n	80013f8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80013dc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4832      	ldr	r0, [pc, #200]	; (80014bc <HAL_TIM_MspPostInit+0x118>)
 80013f2:	f000 fa75 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80013f6:	e059      	b.n	80014ac <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <HAL_TIM_MspPostInit+0x11c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d118      	bne.n	8001434 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141a:	23c0      	movs	r3, #192	; 0xc0
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4619      	mov	r1, r3
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <HAL_TIM_MspPostInit+0x118>)
 800142e:	f000 fa57 	bl	80018e0 <HAL_GPIO_Init>
}
 8001432:	e03b      	b.n	80014ac <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM4)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_TIM_MspPostInit+0x120>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d118      	bne.n	8001470 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <HAL_TIM_MspPostInit+0x124>)
 800146a:	f000 fa39 	bl	80018e0 <HAL_GPIO_Init>
}
 800146e:	e01d      	b.n	80014ac <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM8)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_TIM_MspPostInit+0x128>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d118      	bne.n	80014ac <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_TIM_MspPostInit+0x114>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2302      	movs	r3, #2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	4619      	mov	r1, r3
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <HAL_TIM_MspPostInit+0x12c>)
 80014a8:	f000 fa1a 	bl	80018e0 <HAL_GPIO_Init>
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40000400 	.word	0x40000400
 80014c4:	40000800 	.word	0x40000800
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	40013400 	.word	0x40013400
 80014d0:	40011000 	.word	0x40011000

080014d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART1_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 800150c:	f001 fe73 	bl	80031f6 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f7ff fae8 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001dc 	.word	0x200001dc
 8001524:	40013800 	.word	0x40013800

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_UART_MspInit+0x8c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d131      	bne.n	80015ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <HAL_UART_MspInit+0x90>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x90>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_UART_MspInit+0x90>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_UART_MspInit+0x90>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4619      	mov	r1, r3
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <HAL_UART_MspInit+0x94>)
 800158e:	f000 f9a7 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x94>)
 80015a8:	f000 f99a 	bl	80018e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013800 	.word	0x40013800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800

080015c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	; (8001604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e6:	f7ff fbcc 	bl	8000d82 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f001 ffbd 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff f9f1 	bl	80009d4 <main>
  bx lr
 80015f2:	4770      	bx	lr
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015fc:	080035f8 	.word	0x080035f8
  ldr r2, =_sbss
 8001600:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001604:	20000224 	.word	0x20000224

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f92b 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f808 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fb52 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x54>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x58>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f935 	bl	80018c6 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001674:	f000 f90b 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_InitTick+0x5c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_IncTick+0x20>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000220 	.word	0x20000220

080016bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000220 	.word	0x20000220

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fff0 	bl	80016bc <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffe0 	bl	80016bc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff49 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff5e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb0 	bl	8001834 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e179      	b.n	8001be8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8168 	bne.w	8001be2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a96      	ldr	r2, [pc, #600]	; (8001b70 <HAL_GPIO_Init+0x290>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <HAL_GPIO_Init+0x290>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a94      	ldr	r2, [pc, #592]	; (8001b74 <HAL_GPIO_Init+0x294>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a92      	ldr	r2, [pc, #584]	; (8001b74 <HAL_GPIO_Init+0x294>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a92      	ldr	r2, [pc, #584]	; (8001b78 <HAL_GPIO_Init+0x298>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a90      	ldr	r2, [pc, #576]	; (8001b78 <HAL_GPIO_Init+0x298>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <HAL_GPIO_Init+0x29c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a8e      	ldr	r2, [pc, #568]	; (8001b7c <HAL_GPIO_Init+0x29c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a8e      	ldr	r2, [pc, #568]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a8c      	ldr	r2, [pc, #560]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80c1 	beq.w	8001be2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d01f      	beq.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_GPIO_Init+0x2b4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d019      	beq.n	8001ae0 <HAL_GPIO_Init+0x200>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1fc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a39      	ldr	r2, [pc, #228]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1f8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1f4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001acc:	2305      	movs	r3, #5
 8001ace:	e00a      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	e008      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	4925      	ldr	r1, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4924      	ldr	r1, [pc, #144]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4920      	ldr	r1, [pc, #128]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	491a      	ldr	r1, [pc, #104]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d025      	beq.n	8001bac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e025      	b.n	8001bba <HAL_GPIO_Init+0x2da>
 8001b6e:	bf00      	nop
 8001b70:	10320000 	.word	0x10320000
 8001b74:	10310000 	.word	0x10310000
 8001b78:	10220000 	.word	0x10220000
 8001b7c:	10210000 	.word	0x10210000
 8001b80:	10120000 	.word	0x10120000
 8001b84:	10110000 	.word	0x10110000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40011400 	.word	0x40011400
 8001ba0:	40011800 	.word	0x40011800
 8001ba4:	40011c00 	.word	0x40011c00
 8001ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4913      	ldr	r1, [pc, #76]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae7e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e272      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c64:	4b8f      	ldr	r3, [pc, #572]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d112      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
 8001c70:	4b8c      	ldr	r3, [pc, #560]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7e:	4b89      	ldr	r3, [pc, #548]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x12c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d168      	bne.n	8001d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e24c      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x76>
 8001ca0:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a7f      	ldr	r2, [pc, #508]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x98>
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7a      	ldr	r2, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xbc>
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a71      	ldr	r2, [pc, #452]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6e      	ldr	r2, [pc, #440]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cf4:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6a      	ldr	r2, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b68      	ldr	r3, [pc, #416]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a67      	ldr	r2, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fcd2 	bl	80016bc <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fcce 	bl	80016bc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e200      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe4>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fcbe 	bl	80016bc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fcba 	bl	80016bc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1ec      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x10c>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
 8001d8a:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1c0      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4939      	ldr	r1, [pc, #228]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fc73 	bl	80016bc <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fc6f 	bl	80016bc <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e1a1      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4927      	ldr	r1, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fc52 	bl	80016bc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fc4e 	bl	80016bc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e180      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03a      	beq.n	8001ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d019      	beq.n	8001e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7ff fc32 	bl	80016bc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc2e 	bl	80016bc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e160      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 fad8 	bl	8002430 <RCC_Delay>
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fc18 	bl	80016bc <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	e00f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fc14 	bl	80016bc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d908      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e146      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	42420000 	.word	0x42420000
 8001eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	4b92      	ldr	r3, [pc, #584]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e9      	bne.n	8001e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a6 	beq.w	8002016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a87      	ldr	r2, [pc, #540]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fbd5 	bl	80016bc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff fbd1 	bl	80016bc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e103      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b75      	ldr	r3, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x312>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x334>
 8001f52:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x356>
 8001f74:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a60      	ldr	r2, [pc, #384]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fb85 	bl	80016bc <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff fb81 	bl	80016bc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0b1      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fb6f 	bl	80016bc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fb6b 	bl	80016bc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e09b      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8087 	beq.w	800212e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d061      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d146      	bne.n	80020c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7ff fb3f 	bl	80016bc <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7ff fb3b 	bl	80016bc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e06d      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4921      	ldr	r1, [pc, #132]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a19      	ldr	r1, [r3, #32]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	430b      	orrs	r3, r1
 800208e:	491b      	ldr	r1, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb0f 	bl	80016bc <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb0b 	bl	80016bc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e03d      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46a>
 80020c0:	e035      	b.n	800212e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff faf8 	bl	80016bc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff faf4 	bl	80016bc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e026      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x498>
 80020ee:	e01e      	b.n	800212e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e019      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x500>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0d0      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b67      	ldr	r3, [pc, #412]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4965      	ldr	r1, [pc, #404]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d040      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e073      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4936      	ldr	r1, [pc, #216]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7ff fa46 	bl	80016bc <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff fa42 	bl	80016bc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e053      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d210      	bcs.n	800228c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4922      	ldr	r1, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1cc>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f9a4 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021000 	.word	0x40021000
 8002304:	080035d8 	.word	0x080035d8
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b490      	push	{r4, r7}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_GetSysClockFreq+0xac>)
 8002318:	1d3c      	adds	r4, r7, #4
 800231a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800231c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002320:	f240 2301 	movw	r3, #513	; 0x201
 8002324:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 800234a:	2b08      	cmp	r3, #8
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x46>
 800234e:	e02b      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002352:	623b      	str	r3, [r7, #32]
      break;
 8002354:	e02b      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	0c9b      	lsrs	r3, r3, #18
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3328      	adds	r3, #40	; 0x28
 8002360:	443b      	add	r3, r7
 8002362:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002366:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0c5b      	lsrs	r3, r3, #17
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	3328      	adds	r3, #40	; 0x28
 800237e:	443b      	add	r3, r7
 8002380:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002384:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800238a:	fb03 f202 	mul.w	r2, r3, r2
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	e004      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	623b      	str	r3, [r7, #32]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023aa:	623b      	str	r3, [r7, #32]
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	6a3b      	ldr	r3, [r7, #32]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc90      	pop	{r4, r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	080035c8 	.word	0x080035c8
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	003d0900 	.word	0x003d0900

080023cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_RCC_GetHCLKFreq+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff2 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	080035e8 	.word	0x080035e8

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffde 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0adb      	lsrs	r3, r3, #11
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	080035e8 	.word	0x080035e8

08002430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <RCC_Delay+0x34>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <RCC_Delay+0x38>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0a5b      	lsrs	r3, r3, #9
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800244c:	bf00      	nop
  }
  while (Delay --);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	60fa      	str	r2, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <RCC_Delay+0x1c>
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	20000000 	.word	0x20000000
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_SRAM_Init+0x1c>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002486:	d101      	bne.n	800248c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e038      	b.n	80024fe <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7fd ff67 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3308      	adds	r3, #8
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f000 ff7b 	bl	80033ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	461a      	mov	r2, r3
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	f000 ffdd 	bl	8003480 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6858      	ldr	r0, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f001 f808 	bl	80034e8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6892      	ldr	r2, [r2, #8]
 80024e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	f041 0101 	orr.w	r1, r1, #1
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e041      	b.n	800259c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fec3 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f000 fab9 	bl	8002abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fecc 	bl	8001368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fa6a 	bl	8002abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_TIM_PWM_Start+0x24>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e022      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d109      	bne.n	8002682 <HAL_TIM_PWM_Start+0x3e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e015      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x58>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e072      	b.n	800279c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x82>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e013      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e003      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc9c 	bl	8003034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_TIM_PWM_Start+0x160>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_PWM_Start+0xcc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <HAL_TIM_PWM_Start+0x164>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_TIM_PWM_Start+0xd0>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_TIM_PWM_Start+0xd2>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_TIM_PWM_Start+0x160>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_TIM_PWM_Start+0x122>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_TIM_PWM_Start+0x164>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_TIM_PWM_Start+0x122>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002746:	d00e      	beq.n	8002766 <HAL_TIM_PWM_Start+0x122>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_TIM_PWM_Start+0x168>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_TIM_PWM_Start+0x122>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_TIM_PWM_Start+0x16c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_TIM_PWM_Start+0x122>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_TIM_PWM_Start+0x170>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d111      	bne.n	800278a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d010      	beq.n	800279a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002788:	e007      	b.n	800279a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40013400 	.word	0x40013400
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00

080027b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0ac      	b.n	800292c <HAL_TIM_PWM_ConfigChannel+0x174>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	f200 809f 	bhi.w	8002920 <HAL_TIM_PWM_ConfigChannel+0x168>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	0800281d 	.word	0x0800281d
 80027ec:	08002921 	.word	0x08002921
 80027f0:	08002921 	.word	0x08002921
 80027f4:	08002921 	.word	0x08002921
 80027f8:	0800285d 	.word	0x0800285d
 80027fc:	08002921 	.word	0x08002921
 8002800:	08002921 	.word	0x08002921
 8002804:	08002921 	.word	0x08002921
 8002808:	0800289f 	.word	0x0800289f
 800280c:	08002921 	.word	0x08002921
 8002810:	08002921 	.word	0x08002921
 8002814:	08002921 	.word	0x08002921
 8002818:	080028df 	.word	0x080028df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f9c4 	bl	8002bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
      break;
 800285a:	e062      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa14 	bl	8002c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
      break;
 800289c:	e041      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fa67 	bl	8002d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0208 	orr.w	r2, r2, #8
 80028b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0204 	bic.w	r2, r2, #4
 80028c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	61da      	str	r2, [r3, #28]
      break;
 80028dc:	e021      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fabb 	bl	8002e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	021a      	lsls	r2, r3, #8
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
      break;
 800291e:	e000      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIM_ConfigClockSource+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e0b3      	b.n	8002ab4 <HAL_TIM_ConfigClockSource+0x180>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800296a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002984:	d03e      	beq.n	8002a04 <HAL_TIM_ConfigClockSource+0xd0>
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298a:	f200 8087 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002992:	f000 8085 	beq.w	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	d87f      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 800299c:	2b70      	cmp	r3, #112	; 0x70
 800299e:	d01a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0xa2>
 80029a0:	2b70      	cmp	r3, #112	; 0x70
 80029a2:	d87b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029a4:	2b60      	cmp	r3, #96	; 0x60
 80029a6:	d050      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x116>
 80029a8:	2b60      	cmp	r3, #96	; 0x60
 80029aa:	d877      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029ac:	2b50      	cmp	r3, #80	; 0x50
 80029ae:	d03c      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xf6>
 80029b0:	2b50      	cmp	r3, #80	; 0x50
 80029b2:	d873      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d058      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x136>
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d86f      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029bc:	2b30      	cmp	r3, #48	; 0x30
 80029be:	d064      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x156>
 80029c0:	2b30      	cmp	r3, #48	; 0x30
 80029c2:	d86b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d060      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x156>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d867      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05c      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x156>
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d05a      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029d4:	e062      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f000 fb06 	bl	8002ff6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	609a      	str	r2, [r3, #8]
      break;
 8002a02:	e04e      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f000 faef 	bl	8002ff6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a26:	609a      	str	r2, [r3, #8]
      break;
 8002a28:	e03b      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 fa66 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2150      	movs	r1, #80	; 0x50
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fabd 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e02b      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 fa84 	bl	8002f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2160      	movs	r1, #96	; 0x60
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 faad 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e01b      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 fa46 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fa9d 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e00b      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f000 fa94 	bl	8002fc2 <TIM_ITRx_SetConfig>
        break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <TIM_Base_SetConfig+0xe0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00f      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d00b      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <TIM_Base_SetConfig+0xec>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <TIM_Base_SetConfig+0xe0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <TIM_Base_SetConfig+0x82>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00f      	beq.n	8002b3e <TIM_Base_SetConfig+0x82>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d00b      	beq.n	8002b3e <TIM_Base_SetConfig+0x82>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <TIM_Base_SetConfig+0xe8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x82>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <TIM_Base_SetConfig+0xec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x82>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <TIM_Base_SetConfig+0xf0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <TIM_Base_SetConfig+0xe0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0xc8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <TIM_Base_SetConfig+0xe4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00

08002bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 0302 	bic.w	r3, r3, #2
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <TIM_OC1_SetConfig+0xd8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_OC1_SetConfig+0x64>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <TIM_OC1_SetConfig+0xdc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10c      	bne.n	8002c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0308 	bic.w	r3, r3, #8
 8002c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <TIM_OC1_SetConfig+0xd8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_OC1_SetConfig+0x8e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <TIM_OC1_SetConfig+0xdc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40013400 	.word	0x40013400

08002c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0210 	bic.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 0320 	bic.w	r3, r3, #32
 8002cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <TIM_OC2_SetConfig+0xe0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC2_SetConfig+0x68>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <TIM_OC2_SetConfig+0xe4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10d      	bne.n	8002d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <TIM_OC2_SetConfig+0xe0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_OC2_SetConfig+0x94>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <TIM_OC2_SetConfig+0xe4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d113      	bne.n	8002d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40013400 	.word	0x40013400

08002d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <TIM_OC3_SetConfig+0xe0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC3_SetConfig+0x66>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <TIM_OC3_SetConfig+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10d      	bne.n	8002dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <TIM_OC3_SetConfig+0xe0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_OC3_SetConfig+0x92>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <TIM_OC3_SetConfig+0xe4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	621a      	str	r2, [r3, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40013400 	.word	0x40013400

08002e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	031b      	lsls	r3, r3, #12
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <TIM_OC4_SetConfig+0xa0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_OC4_SetConfig+0x68>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <TIM_OC4_SetConfig+0xa4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40013400 	.word	0x40013400

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 0210 	bic.w	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	031b      	lsls	r3, r3, #12
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f043 0307 	orr.w	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003010:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4313      	orrs	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	609a      	str	r2, [r3, #8]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2201      	movs	r2, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	43db      	mvns	r3, r3
 8003056:	401a      	ands	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003090:	2302      	movs	r3, #2
 8003092:	e050      	b.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d00e      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4313      	orrs	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40013400 	.word	0x40013400
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00

08003154 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e03d      	b.n	80031ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e03f      	b.n	8003288 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fe f983 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2224      	movs	r2, #36	; 0x24
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f828 	bl	8003290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800324e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800325e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ca:	f023 030c 	bic.w	r3, r3, #12
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <UART_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d103      	bne.n	8003300 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f886 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	e002      	b.n	8003306 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7ff f86e 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <UART_SetConfig+0x118>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	0119      	lsls	r1, r3, #4
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335c:	4419      	add	r1, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f2f3 	udiv	r2, r2, r3
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <UART_SetConfig+0x118>)
 8003376:	fba3 0302 	umull	r0, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2064      	movs	r0, #100	; 0x64
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	; 0x32
 8003388:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <UART_SetConfig+0x118>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	440a      	add	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40013800 	.word	0x40013800
 80033a8:	51eb851f 	.word	0x51eb851f

080033ac <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	f023 0101 	bic.w	r1, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d102      	bne.n	80033dc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e001      	b.n	80033e0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80033ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80033f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80033f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80033fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003404:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800340a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003410:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003416:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800341c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <FSMC_NORSRAM_Init+0xd0>)
 800343c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003444:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800344c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43db      	mvns	r3, r3
 800345c:	ea02 0103 	and.w	r1, r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4319      	orrs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	0008fb7f 	.word	0x0008fb7f

08003480 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	051b      	lsls	r3, r3, #20
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	3b02      	subs	r3, #2
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	3201      	adds	r2, #1
 80034d4:	4319      	orrs	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fc:	d11d      	bne.n	800353a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	6852      	ldr	r2, [r2, #4]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	4311      	orrs	r1, r2
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0212      	lsls	r2, r2, #8
 800351c:	4311      	orrs	r1, r2
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	6992      	ldr	r2, [r2, #24]
 8003522:	4311      	orrs	r1, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	68d2      	ldr	r2, [r2, #12]
 8003528:	0412      	lsls	r2, r2, #16
 800352a:	430a      	orrs	r2, r1
 800352c:	ea43 0102 	orr.w	r1, r3, r2
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003538:	e005      	b.n	8003546 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	cff00000 	.word	0xcff00000

08003558 <memset>:
 8003558:	4603      	mov	r3, r0
 800355a:	4402      	add	r2, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	2600      	movs	r6, #0
 800356c:	4d0c      	ldr	r5, [pc, #48]	; (80035a0 <__libc_init_array+0x38>)
 800356e:	4c0d      	ldr	r4, [pc, #52]	; (80035a4 <__libc_init_array+0x3c>)
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	f000 f81a 	bl	80035b0 <_init>
 800357c:	2600      	movs	r6, #0
 800357e:	4d0a      	ldr	r5, [pc, #40]	; (80035a8 <__libc_init_array+0x40>)
 8003580:	4c0a      	ldr	r4, [pc, #40]	; (80035ac <__libc_init_array+0x44>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	f855 3b04 	ldr.w	r3, [r5], #4
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	080035f0 	.word	0x080035f0
 80035a4:	080035f0 	.word	0x080035f0
 80035a8:	080035f0 	.word	0x080035f0
 80035ac:	080035f4 	.word	0x080035f4

080035b0 <_init>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	bf00      	nop
 80035b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b6:	bc08      	pop	{r3}
 80035b8:	469e      	mov	lr, r3
 80035ba:	4770      	bx	lr

080035bc <_fini>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	bf00      	nop
 80035c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c2:	bc08      	pop	{r3}
 80035c4:	469e      	mov	lr, r3
 80035c6:	4770      	bx	lr
