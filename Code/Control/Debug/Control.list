
Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004970  08004970  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004970  08004970  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  080049d4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080049d4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1b3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  0002d27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0002fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc2  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b23b  00000000  00000000  0003191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c25  00000000  00000000  0004cb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be02  00000000  00000000  0005e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004708  00000000  00000000  000fa57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000fec84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	080042ac 	.word	0x080042ac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	080042ac 	.word	0x080042ac

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f002 fb15 	bl	80028ec <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fc4f 	bl	8000b6a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000078 	.word	0x20000078
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f001 fcee 	bl	8001d1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f001 fce1 	bl	8001d1c <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000c0 	.word	0x200000c0
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b44      	ldr	r3, [pc, #272]	; (80004b0 <MX_GPIO_Init+0x128>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a43      	ldr	r2, [pc, #268]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b41      	ldr	r3, [pc, #260]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3e      	ldr	r3, [pc, #248]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b35      	ldr	r3, [pc, #212]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_GPIO_Init+0x128>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <MX_GPIO_Init+0x12c>)
 800041c:	f001 fe29 	bl	8002072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4824      	ldr	r0, [pc, #144]	; (80004b8 <MX_GPIO_Init+0x130>)
 8000426:	f001 fe24 	bl	8002072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <MX_GPIO_Init+0x134>)
 8000440:	f001 fc6c 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x138>)
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <MX_GPIO_Init+0x13c>)
 8000458:	f001 fc60 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <MX_GPIO_Init+0x12c>)
 8000476:	f001 fc51 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_GPIO_Init+0x130>)
 8000492:	f001 fc43 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2006      	movs	r0, #6
 800049c:	f001 fc07 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004a0:	2006      	movs	r0, #6
 80004a2:	f001 fc20 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011400 	.word	0x40011400
 80004b8:	40011800 	.word	0x40011800
 80004bc:	40011000 	.word	0x40011000
 80004c0:	10110000 	.word	0x10110000
 80004c4:	40010800 	.word	0x40010800

080004c8 <Delay>:

void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	e002      	b.n	80004d8 <Delay+0x10>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1f9      	bne.n	80004d2 <Delay+0xa>
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <LCD_INIT>:

void LCD_INIT ( void )
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 f829 	bl	8000548 <LCD_BackLed_Control>
	LCD_Rst();
 80004f6:	f000 f80f 	bl	8000518 <LCD_Rst>
	LCD_REG_Config();
 80004fa:	f000 f85f 	bl	80005bc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000508:	22f0      	movs	r2, #240	; 0xf0
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f9e6 	bl	80008de <LCD_Clear>
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <LCD_Rst+0x28>)
 8000522:	f001 fda6 	bl	8002072 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <LCD_Rst+0x2c>)
 8000528:	f7ff ffce 	bl	80004c8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <LCD_Rst+0x28>)
 8000532:	f001 fd9e 	bl	8002072 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <LCD_Rst+0x2c>)
 8000538:	f7ff ffc6 	bl	80004c8 <Delay>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40011800 	.word	0x40011800
 8000544:	0002bffc 	.word	0x0002bffc

08000548 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d006      	beq.n	8000566 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <LCD_BackLed_Control+0x34>)
 8000560:	f001 fd87 	bl	8002072 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000564:	e005      	b.n	8000572 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_BackLed_Control+0x34>)
 800056e:	f001 fd80 	bl	8002072 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40011400 	.word	0x40011400

08000580 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800058a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	8013      	strh	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <LCD_Write_Data+0x1c>)
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	8013      	strh	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	60020000 	.word	0x60020000

080005bc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005c0:	20cf      	movs	r0, #207	; 0xcf
 80005c2:	f7ff ffdd 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff ffe8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005cc:	2081      	movs	r0, #129	; 0x81
 80005ce:	f7ff ffe5 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005d2:	2030      	movs	r0, #48	; 0x30
 80005d4:	f7ff ffe2 	bl	800059c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005d8:	20ed      	movs	r0, #237	; 0xed
 80005da:	f7ff ffd1 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f7ff ffdc 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005e4:	2003      	movs	r0, #3
 80005e6:	f7ff ffd9 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005ea:	2012      	movs	r0, #18
 80005ec:	f7ff ffd6 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005f0:	2081      	movs	r0, #129	; 0x81
 80005f2:	f7ff ffd3 	bl	800059c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005f6:	20e8      	movs	r0, #232	; 0xe8
 80005f8:	f7ff ffc2 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005fc:	2085      	movs	r0, #133	; 0x85
 80005fe:	f7ff ffcd 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000602:	2010      	movs	r0, #16
 8000604:	f7ff ffca 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f7ff ffc7 	bl	800059c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800060e:	20cb      	movs	r0, #203	; 0xcb
 8000610:	f7ff ffb6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000614:	2039      	movs	r0, #57	; 0x39
 8000616:	f7ff ffc1 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ffbe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffbb 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000626:	2034      	movs	r0, #52	; 0x34
 8000628:	f7ff ffb8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff ffb5 	bl	800059c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000632:	20f7      	movs	r0, #247	; 0xf7
 8000634:	f7ff ffa4 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000638:	2020      	movs	r0, #32
 800063a:	f7ff ffaf 	bl	800059c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800063e:	20ea      	movs	r0, #234	; 0xea
 8000640:	f7ff ff9e 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffa9 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ffa6 	bl	800059c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000650:	20b1      	movs	r0, #177	; 0xb1
 8000652:	f7ff ff95 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffa0 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800065c:	201b      	movs	r0, #27
 800065e:	f7ff ff9d 	bl	800059c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000662:	20b6      	movs	r0, #182	; 0xb6
 8000664:	f7ff ff8c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000668:	200a      	movs	r0, #10
 800066a:	f7ff ff97 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800066e:	20a2      	movs	r0, #162	; 0xa2
 8000670:	f7ff ff94 	bl	800059c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000674:	20c0      	movs	r0, #192	; 0xc0
 8000676:	f7ff ff83 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800067a:	2035      	movs	r0, #53	; 0x35
 800067c:	f7ff ff8e 	bl	800059c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000680:	20c1      	movs	r0, #193	; 0xc1
 8000682:	f7ff ff7d 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000686:	2011      	movs	r0, #17
 8000688:	f7ff ff88 	bl	800059c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800068c:	20c5      	movs	r0, #197	; 0xc5
 800068e:	f7ff ff77 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000692:	2045      	movs	r0, #69	; 0x45
 8000694:	f7ff ff82 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000698:	2045      	movs	r0, #69	; 0x45
 800069a:	f7ff ff7f 	bl	800059c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800069e:	20c7      	movs	r0, #199	; 0xc7
 80006a0:	f7ff ff6e 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80006a4:	20a2      	movs	r0, #162	; 0xa2
 80006a6:	f7ff ff79 	bl	800059c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80006aa:	20f2      	movs	r0, #242	; 0xf2
 80006ac:	f7ff ff68 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff73 	bl	800059c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006b6:	2026      	movs	r0, #38	; 0x26
 80006b8:	f7ff ff62 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff6d 	bl	800059c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006c2:	20e0      	movs	r0, #224	; 0xe0
 80006c4:	f7ff ff5c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff ff67 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ce:	2026      	movs	r0, #38	; 0x26
 80006d0:	f7ff ff64 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006d4:	2024      	movs	r0, #36	; 0x24
 80006d6:	f7ff ff61 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006da:	200b      	movs	r0, #11
 80006dc:	f7ff ff5e 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006e0:	200e      	movs	r0, #14
 80006e2:	f7ff ff5b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006e6:	2009      	movs	r0, #9
 80006e8:	f7ff ff58 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006ec:	2054      	movs	r0, #84	; 0x54
 80006ee:	f7ff ff55 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006f2:	20a8      	movs	r0, #168	; 0xa8
 80006f4:	f7ff ff52 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006f8:	2046      	movs	r0, #70	; 0x46
 80006fa:	f7ff ff4f 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006fe:	200c      	movs	r0, #12
 8000700:	f7ff ff4c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000704:	2017      	movs	r0, #23
 8000706:	f7ff ff49 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800070a:	2009      	movs	r0, #9
 800070c:	f7ff ff46 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000710:	200f      	movs	r0, #15
 8000712:	f7ff ff43 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000716:	2007      	movs	r0, #7
 8000718:	f7ff ff40 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff3d 	bl	800059c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000722:	20e1      	movs	r0, #225	; 0xe1
 8000724:	f7ff ff2c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff37 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800072e:	2019      	movs	r0, #25
 8000730:	f7ff ff34 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000734:	201b      	movs	r0, #27
 8000736:	f7ff ff31 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff2e 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000740:	2010      	movs	r0, #16
 8000742:	f7ff ff2b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000746:	2007      	movs	r0, #7
 8000748:	f7ff ff28 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800074c:	202a      	movs	r0, #42	; 0x2a
 800074e:	f7ff ff25 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000752:	2047      	movs	r0, #71	; 0x47
 8000754:	f7ff ff22 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000758:	2039      	movs	r0, #57	; 0x39
 800075a:	f7ff ff1f 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff ff1c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000764:	2006      	movs	r0, #6
 8000766:	f7ff ff19 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800076a:	2006      	movs	r0, #6
 800076c:	f7ff ff16 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000770:	2030      	movs	r0, #48	; 0x30
 8000772:	f7ff ff13 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000776:	2038      	movs	r0, #56	; 0x38
 8000778:	f7ff ff10 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800077c:	200f      	movs	r0, #15
 800077e:	f7ff ff0d 	bl	800059c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000782:	2036      	movs	r0, #54	; 0x36
 8000784:	f7ff fefc 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000788:	20c8      	movs	r0, #200	; 0xc8
 800078a:	f7ff ff07 	bl	800059c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800078e:	202a      	movs	r0, #42	; 0x2a
 8000790:	f7ff fef6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff01 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff fefe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fefb 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80007a6:	20ef      	movs	r0, #239	; 0xef
 80007a8:	f7ff fef8 	bl	800059c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80007ac:	202b      	movs	r0, #43	; 0x2b
 80007ae:	f7ff fee7 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fef2 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff feef 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff feec 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007c4:	203f      	movs	r0, #63	; 0x3f
 80007c6:	f7ff fee9 	bl	800059c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007ca:	203a      	movs	r0, #58	; 0x3a
 80007cc:	f7ff fed8 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007d0:	2055      	movs	r0, #85	; 0x55
 80007d2:	f7ff fee3 	bl	800059c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007d6:	2011      	movs	r0, #17
 80007d8:	f7ff fed2 	bl	8000580 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <LCD_REG_Config+0x230>)
 80007de:	f7ff fe73 	bl	80004c8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007e2:	2029      	movs	r0, #41	; 0x29
 80007e4:	f7ff fecc 	bl	8000580 <LCD_Write_Cmd>
	
	
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0002bffc 	.word	0x0002bffc

080007f0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800080e:	202a      	movs	r0, #42	; 0x2a
 8000810:	f7ff feb6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff febe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	b29b      	uxth	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff feb8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	4413      	add	r3, r2
 8000832:	3b01      	subs	r3, #1
 8000834:	121b      	asrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff feaf 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4413      	add	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	3b01      	subs	r3, #1
 8000848:	b29b      	uxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fea4 	bl	800059c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000854:	202b      	movs	r0, #43	; 0x2b
 8000856:	f7ff fe93 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	b29b      	uxth	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe95 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000872:	88ba      	ldrh	r2, [r7, #4]
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	4413      	add	r3, r2
 8000878:	3b01      	subs	r3, #1
 800087a:	121b      	asrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe8c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000884:	88ba      	ldrh	r2, [r7, #4]
 8000886:	883b      	ldrh	r3, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe81 	bl	800059c <LCD_Write_Data>
	
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd90      	pop	{r4, r7, pc}

080008a2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80008b2:	202c      	movs	r0, #44	; 0x2c
 80008b4:	f7ff fe64 	bl	8000580 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e006      	b.n	80008cc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe6b 	bl	800059c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3f4      	bcc.n	80008be <LCD_FillColor+0x1c>
		
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008de:	b590      	push	{r4, r7, lr}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4604      	mov	r4, r0
 80008e6:	4608      	mov	r0, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	461a      	mov	r2, r3
 80008ec:	4623      	mov	r3, r4
 80008ee:	80fb      	strh	r3, [r7, #6]
 80008f0:	4603      	mov	r3, r0
 80008f2:	80bb      	strh	r3, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
 80008f8:	4613      	mov	r3, r2
 80008fa:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008fc:	883b      	ldrh	r3, [r7, #0]
 80008fe:	887a      	ldrh	r2, [r7, #2]
 8000900:	88b9      	ldrh	r1, [r7, #4]
 8000902:	88f8      	ldrh	r0, [r7, #6]
 8000904:	f7ff ff74 	bl	80007f0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	883a      	ldrh	r2, [r7, #0]
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	461a      	mov	r2, r3
 8000912:	8b3b      	ldrh	r3, [r7, #24]
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f7ff ffc3 	bl	80008a2 <LCD_FillColor>
	
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}

08000924 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	460b      	mov	r3, r1
 8000930:	80bb      	strh	r3, [r7, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	3b20      	subs	r3, #32
 800093a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800093c:	88b9      	ldrh	r1, [r7, #4]
 800093e:	88f8      	ldrh	r0, [r7, #6]
 8000940:	2310      	movs	r3, #16
 8000942:	2208      	movs	r2, #8
 8000944:	f7ff ff54 	bl	80007f0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000948:	202c      	movs	r0, #44	; 0x2c
 800094a:	f7ff fe19 	bl	8000580 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	e023      	b.n	800099c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000954:	7b3a      	ldrb	r2, [r7, #12]
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	4914      	ldr	r1, [pc, #80]	; (80009ac <LCD_DrawChar+0x88>)
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	440a      	add	r2, r1
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000964:	2300      	movs	r3, #0
 8000966:	737b      	strb	r3, [r7, #13]
 8000968:	e012      	b.n	8000990 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d003      	beq.n	800097c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000974:	201f      	movs	r0, #31
 8000976:	f7ff fe11 	bl	800059c <LCD_Write_Data>
 800097a:	e003      	b.n	8000984 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800097c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000980:	f7ff fe0c 	bl	800059c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	3301      	adds	r3, #1
 800098e:	737b      	strb	r3, [r7, #13]
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	2b07      	cmp	r3, #7
 8000994:	d9e9      	bls.n	800096a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	73bb      	strb	r3, [r7, #14]
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d9d8      	bls.n	8000954 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08004334 	.word	0x08004334

080009b0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	603a      	str	r2, [r7, #0]
 80009ba:	80fb      	strh	r3, [r7, #6]
 80009bc:	460b      	mov	r3, r1
 80009be:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80009c0:	e01c      	b.n	80009fc <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2be8      	cmp	r3, #232	; 0xe8
 80009c6:	d904      	bls.n	80009d2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009c8:	2300      	movs	r3, #0
 80009ca:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	3310      	adds	r3, #16
 80009d0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80009d8:	d903      	bls.n	80009e2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009da:	2300      	movs	r3, #0
 80009dc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80009de:	2300      	movs	r3, #0
 80009e0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	88b9      	ldrh	r1, [r7, #4]
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff9a 	bl	8000924 <LCD_DrawChar>
		
		pStr ++;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	3308      	adds	r3, #8
 80009fa:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1de      	bne.n	80009c2 <LCD_DrawString+0x12>
		
	}
	
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 ffed 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f861 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f7ff fcb3 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000a22:	f7ff fbff 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
 8000a26:	f000 fd55 	bl	80014d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2a:	f000 fdeb 	bl	8001604 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a2e:	f000 fcdb 	bl	80013e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a32:	f000 ff43 	bl	80018bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <main+0xc4>)
 8000a3a:	f002 f84b 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4825      	ldr	r0, [pc, #148]	; (8000ad8 <main+0xc8>)
 8000a42:	f002 f847 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <main+0xc4>)
 8000a4a:	f002 f843 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a4e:	210c      	movs	r1, #12
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <main+0xc4>)
 8000a52:	f002 f83f 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a56:	2100      	movs	r1, #0
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <main+0xcc>)
 8000a5a:	f002 f83b 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a5e:	2104      	movs	r1, #4
 8000a60:	481e      	ldr	r0, [pc, #120]	; (8000adc <main+0xcc>)
 8000a62:	f002 f837 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a66:	2108      	movs	r1, #8
 8000a68:	481c      	ldr	r0, [pc, #112]	; (8000adc <main+0xcc>)
 8000a6a:	f002 f833 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a6e:	210c      	movs	r1, #12
 8000a70:	481a      	ldr	r0, [pc, #104]	; (8000adc <main+0xcc>)
 8000a72:	f002 f82f 	bl	8002ad4 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000a76:	f7ff fd38 	bl	80004ea <LCD_INIT>
  servo_pull(2);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f000 faee 	bl	800105c <servo_pull>
  servo_pull(4);
 8000a80:	2004      	movs	r0, #4
 8000a82:	f000 faeb 	bl	800105c <servo_pull>
  servo_pull(6);
 8000a86:	2006      	movs	r0, #6
 8000a88:	f000 fae8 	bl	800105c <servo_pull>
  servo_pull(8);
 8000a8c:	2008      	movs	r0, #8
 8000a8e:	f000 fae5 	bl	800105c <servo_pull>
  HAL_Delay(DELAY_TIME_P);
 8000a92:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000a96:	f001 f80f 	bl	8001ab8 <HAL_Delay>
  centre_0(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fa36 	bl	8000f0c <centre_0>
  centre_0(3);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 fa33 	bl	8000f0c <centre_0>
  centre_0(5);
 8000aa6:	2005      	movs	r0, #5
 8000aa8:	f000 fa30 	bl	8000f0c <centre_0>
  centre_0(7);
 8000aac:	2007      	movs	r0, #7
 8000aae:	f000 fa2d 	bl	8000f0c <centre_0>
  HAL_Delay(DELAY_TIME_90);
 8000ab2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ab6:	f000 ffff 	bl	8001ab8 <HAL_Delay>
  servo_push(north_back);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fb04 	bl	80010c8 <servo_push>
  servo_push(west_back);
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f000 fb01 	bl	80010c8 <servo_push>
  int flag = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
//	  uint8_t choice = 0;
//	  char input[5];
//	  HAL_UART_Receive(&huart1, input, sizeof(input), 0xFFFF);
//	  choice = input[4]-'1'+1;
//	  mode(choice);
	  test_delay(&flag);
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fbf5 	bl	80012bc <test_delay>
 8000ad2:	e7fa      	b.n	8000aca <main+0xba>
 8000ad4:	20000158 	.word	0x20000158
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	20000110 	.word	0x20000110

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	; 0x40
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 ff4a 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fac5 	bl	80020b8 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b34:	f000 f819 	bl	8000b6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fd32 	bl	80025bc <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b5e:	f000 f804 	bl	8000b6a <Error_Handler>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3740      	adds	r7, #64	; 0x40
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6e:	b672      	cpsid	i
}
 8000b70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <Error_Handler+0x8>

08000b74 <movement_scan_up>:
void movement_ad(void) {
	movement_aU();
	movement_Y();
}

void movement_scan_up(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 fa6f 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000b7e:	20c8      	movs	r0, #200	; 0xc8
 8000b80:	f000 ff9a 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000b84:	2006      	movs	r0, #6
 8000b86:	f000 fa69 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b8a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000b8e:	f000 ff93 	bl	8001ab8 <HAL_Delay>
	clockwise_90(south_front);
 8000b92:	2005      	movs	r0, #5
 8000b94:	f000 f9f2 	bl	8000f7c <clockwise_90>
	anticlockwise_90(north_front);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 fa27 	bl	8000fec <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b9e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ba2:	f000 ff89 	bl	8001ab8 <HAL_Delay>
	servo_push(north_back);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f000 fa8e 	bl	80010c8 <servo_push>
	servo_push(south_back);
 8000bac:	2006      	movs	r0, #6
 8000bae:	f000 fa8b 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bb2:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000bb6:	f000 ff7f 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000bba:	2004      	movs	r0, #4
 8000bbc:	f000 fa4e 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000bc0:	20c8      	movs	r0, #200	; 0xc8
 8000bc2:	f000 ff79 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f000 fa48 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000bcc:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000bd0:	f000 ff72 	bl	8001ab8 <HAL_Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <movement_scan_north>:
	HAL_Delay(DELAY_TIME_sP);
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

void movement_scan_north(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	servo_push(east_back);
 8000bdc:	2004      	movs	r0, #4
 8000bde:	f000 fa73 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000be2:	2008      	movs	r0, #8
 8000be4:	f000 fa70 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000be8:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000bec:	f000 ff64 	bl	8001ab8 <HAL_Delay>
	servo_pull(north_back);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 fa33 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000bf6:	20c8      	movs	r0, #200	; 0xc8
 8000bf8:	f000 ff5e 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000bfc:	2006      	movs	r0, #6
 8000bfe:	f000 fa2d 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c02:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000c06:	f000 ff57 	bl	8001ab8 <HAL_Delay>
	centre_0(south_front);
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f000 f97e 	bl	8000f0c <centre_0>
	centre_0(north_front);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 f97b 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c16:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c1a:	f000 ff4d 	bl	8001ab8 <HAL_Delay>
	servo_push(south_back);
 8000c1e:	2006      	movs	r0, #6
 8000c20:	f000 fa52 	bl	80010c8 <servo_push>
	servo_push(north_back);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 fa4f 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c2a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000c2e:	f000 ff43 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000c32:	2004      	movs	r0, #4
 8000c34:	f000 fa12 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000c38:	20c8      	movs	r0, #200	; 0xc8
 8000c3a:	f000 ff3d 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f000 fa0c 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c44:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000c48:	f000 ff36 	bl	8001ab8 <HAL_Delay>
	clockwise_90(south_front);
 8000c4c:	2005      	movs	r0, #5
 8000c4e:	f000 f995 	bl	8000f7c <clockwise_90>
	anticlockwise_90(north_front);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 f9ca 	bl	8000fec <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c58:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c5c:	f000 ff2c 	bl	8001ab8 <HAL_Delay>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <movement_scan_north_r>:

void movement_scan_north_r(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 8000c68:	2005      	movs	r0, #5
 8000c6a:	f000 f9bf 	bl	8000fec <anticlockwise_90>
	clockwise_90(north_front);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 f984 	bl	8000f7c <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8000c74:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8000c78:	f000 ff1e 	bl	8001ab8 <HAL_Delay>
	servo_push(east_back);
 8000c7c:	2004      	movs	r0, #4
 8000c7e:	f000 fa23 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000c82:	2008      	movs	r0, #8
 8000c84:	f000 fa20 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c88:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000c8c:	f000 ff14 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000c90:	2006      	movs	r0, #6
 8000c92:	f000 f9e3 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000c96:	20c8      	movs	r0, #200	; 0xc8
 8000c98:	f000 ff0e 	bl	8001ab8 <HAL_Delay>
	servo_pull(north_back);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 f9dd 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ca2:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000ca6:	f000 ff07 	bl	8001ab8 <HAL_Delay>
	clockwise_90(west_front);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 f966 	bl	8000f7c <clockwise_90>
	anticlockwise_90(east_front);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f99b 	bl	8000fec <anticlockwise_90>
	centre_0(north_front);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 f928 	bl	8000f0c <centre_0>
	centre_0(south_front);
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f000 f925 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000cc2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000cc6:	f000 fef7 	bl	8001ab8 <HAL_Delay>
	servo_push(north_back);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f000 f9fc 	bl	80010c8 <servo_push>
	servo_push(south_back);
 8000cd0:	2006      	movs	r0, #6
 8000cd2:	f000 f9f9 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cd6:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000cda:	f000 feed 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000cde:	2008      	movs	r0, #8
 8000ce0:	f000 f9bc 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f000 fee7 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000cea:	2004      	movs	r0, #4
 8000cec:	f000 f9b6 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000cf0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000cf4:	f000 fee0 	bl	8001ab8 <HAL_Delay>
	centre_0(east_front);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f907 	bl	8000f0c <centre_0>
	centre_0(west_front);
 8000cfe:	2007      	movs	r0, #7
 8000d00:	f000 f904 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d08:	f000 fed6 	bl	8001ab8 <HAL_Delay>
	servo_push(east_back);
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	f000 f9db 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000d12:	2008      	movs	r0, #8
 8000d14:	f000 f9d8 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d18:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000d1c:	f000 fecc 	bl	8001ab8 <HAL_Delay>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <movement_scan_east>:

void movement_scan_east(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	servo_push(east_back);
 8000d28:	2004      	movs	r0, #4
 8000d2a:	f000 f9cd 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000d2e:	2008      	movs	r0, #8
 8000d30:	f000 f9ca 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d34:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000d38:	f000 febe 	bl	8001ab8 <HAL_Delay>
	servo_pull(north_back);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 f98d 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000d42:	20c8      	movs	r0, #200	; 0xc8
 8000d44:	f000 feb8 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000d48:	2006      	movs	r0, #6
 8000d4a:	f000 f987 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d4e:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000d52:	f000 feb1 	bl	8001ab8 <HAL_Delay>
	centre_0(north_front);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 f8d8 	bl	8000f0c <centre_0>
	centre_0(south_front);
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f000 f8d5 	bl	8000f0c <centre_0>
	clockwise_90(east_front);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f90a 	bl	8000f7c <clockwise_90>
	anticlockwise_90(west_front);
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f000 f93f 	bl	8000fec <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d6e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d72:	f000 fea1 	bl	8001ab8 <HAL_Delay>
	servo_push(north_back);
 8000d76:	2002      	movs	r0, #2
 8000d78:	f000 f9a6 	bl	80010c8 <servo_push>
	servo_push(south_back);
 8000d7c:	2006      	movs	r0, #6
 8000d7e:	f000 f9a3 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d82:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000d86:	f000 fe97 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000d8a:	2008      	movs	r0, #8
 8000d8c:	f000 f966 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000d90:	20c8      	movs	r0, #200	; 0xc8
 8000d92:	f000 fe91 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000d96:	2004      	movs	r0, #4
 8000d98:	f000 f960 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d9c:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000da0:	f000 fe8a 	bl	8001ab8 <HAL_Delay>
	anticlockwise_90(south_front);
 8000da4:	2005      	movs	r0, #5
 8000da6:	f000 f921 	bl	8000fec <anticlockwise_90>
	clockwise_90(north_front);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 f8e6 	bl	8000f7c <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000db0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000db4:	f000 fe80 	bl	8001ab8 <HAL_Delay>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <movement_scan_south>:
	movement_scan_up_r();
	movement_Z();
	movement_aX();
}

void movement_scan_south(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	centre_0(north_front);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 f8a3 	bl	8000f0c <centre_0>
	centre_0(south_front);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f000 f8a0 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000dcc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dd0:	f000 fe72 	bl	8001ab8 <HAL_Delay>
	servo_push(east_back);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f000 f977 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000dda:	2008      	movs	r0, #8
 8000ddc:	f000 f974 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000de0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000de4:	f000 fe68 	bl	8001ab8 <HAL_Delay>
	servo_pull(north_back);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f000 f937 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000dee:	20c8      	movs	r0, #200	; 0xc8
 8000df0:	f000 fe62 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000df4:	2006      	movs	r0, #6
 8000df6:	f000 f931 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000dfa:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000dfe:	f000 fe5b 	bl	8001ab8 <HAL_Delay>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <movement_scan_west>:
	HAL_Delay(DELAY_TIME_sP);
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

void movement_scan_west(void) {
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
	centre_0(east_front);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f87e 	bl	8000f0c <centre_0>
	centre_0(west_front);
 8000e10:	2007      	movs	r0, #7
 8000e12:	f000 f87b 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e16:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e1a:	f000 fe4d 	bl	8001ab8 <HAL_Delay>
	servo_push(north_back);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f000 f952 	bl	80010c8 <servo_push>
	servo_push(south_back);
 8000e24:	2006      	movs	r0, #6
 8000e26:	f000 f94f 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e2a:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000e2e:	f000 fe43 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f000 f912 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000e38:	20c8      	movs	r0, #200	; 0xc8
 8000e3a:	f000 fe3d 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000e3e:	2008      	movs	r0, #8
 8000e40:	f000 f90c 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e44:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000e48:	f000 fe36 	bl	8001ab8 <HAL_Delay>
	clockwise_90(south_front);
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f000 f895 	bl	8000f7c <clockwise_90>
	anticlockwise_90(north_front);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 f8ca 	bl	8000fec <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000e58:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e5c:	f000 fe2c 	bl	8001ab8 <HAL_Delay>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <movement_scan_down>:
	movement_scan_up_r();
	movement_aZ();
	movement_aX();
}

void movement_scan_down(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	servo_push(north_back);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 f92d 	bl	80010c8 <servo_push>
	servo_push(south_back);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f000 f92a 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e74:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000e78:	f000 fe1e 	bl	8001ab8 <HAL_Delay>
	servo_pull(west_back);
 8000e7c:	2008      	movs	r0, #8
 8000e7e:	f000 f8ed 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000e82:	20c8      	movs	r0, #200	; 0xc8
 8000e84:	f000 fe18 	bl	8001ab8 <HAL_Delay>
	servo_pull(east_back);
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f000 f8e7 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e8e:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000e92:	f000 fe11 	bl	8001ab8 <HAL_Delay>
	centre_0(east_front);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f838 	bl	8000f0c <centre_0>
	centre_0(west_front);
 8000e9c:	2007      	movs	r0, #7
 8000e9e:	f000 f835 	bl	8000f0c <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ea2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ea6:	f000 fe07 	bl	8001ab8 <HAL_Delay>
	servo_push(east_back);
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f000 f90c 	bl	80010c8 <servo_push>
	servo_push(west_back);
 8000eb0:	2008      	movs	r0, #8
 8000eb2:	f000 f909 	bl	80010c8 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000eb6:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000eba:	f000 fdfd 	bl	8001ab8 <HAL_Delay>
	servo_pull(north_back);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f000 f8cc 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ec4:	20c8      	movs	r0, #200	; 0xc8
 8000ec6:	f000 fdf7 	bl	8001ab8 <HAL_Delay>
	servo_pull(south_back);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f000 f8c6 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ed0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000ed4:	f000 fdf0 	bl	8001ab8 <HAL_Delay>
	clockwise_90(east_front);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f84f 	bl	8000f7c <clockwise_90>
	anticlockwise_90(west_front);
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f000 f884 	bl	8000fec <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000ee4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ee8:	f000 fde6 	bl	8001ab8 <HAL_Delay>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <remove_cube>:
	for (uint8_t i = 1; i <= 4; i++)
		servo_push(i*2);
	HAL_Delay(DELAY_TIME_P);
}

void remove_cube(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8000ef4:	2006      	movs	r0, #6
 8000ef6:	f000 f8b1 	bl	800105c <servo_pull>
	servo_pull(east_back);
 8000efa:	2004      	movs	r0, #4
 8000efc:	f000 f8ae 	bl	800105c <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f00:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8000f04:	f000 fdd8 	bl	8001ab8 <HAL_Delay>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <centre_0>:

void centre_0(servos servo) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d024      	beq.n	8000f6c <centre_0+0x60>
		uint8_t target = servo/2+1;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d81b      	bhi.n	8000f6c <centre_0+0x60>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <centre_0+0x30>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f55 	.word	0x08000f55
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f65 	.word	0x08000f65
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <centre_0+0x6c>)
 8000f4e:	225f      	movs	r2, #95	; 0x5f
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000f52:	e00b      	b.n	8000f6c <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <centre_0+0x6c>)
 8000f56:	2258      	movs	r2, #88	; 0x58
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000f5a:	e007      	b.n	8000f6c <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <centre_0+0x6c>)
 8000f5e:	225c      	movs	r2, #92	; 0x5c
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000f62:	e003      	b.n	8000f6c <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <centre_0+0x6c>)
 8000f66:	225e      	movs	r2, #94	; 0x5e
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000f6a:	bf00      	nop
		}
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40000400 	.word	0x40000400

08000f7c <clockwise_90>:

void clockwise_90(servos servo) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d024      	beq.n	8000fdc <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d81b      	bhi.n	8000fdc <clockwise_90+0x60>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <clockwise_90+0x30>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000fc5 	.word	0x08000fc5
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fd5 	.word	0x08000fd5
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <clockwise_90+0x6c>)
 8000fbe:	2299      	movs	r2, #153	; 0x99
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000fc2:	e00b      	b.n	8000fdc <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <clockwise_90+0x6c>)
 8000fc6:	2291      	movs	r2, #145	; 0x91
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000fca:	e007      	b.n	8000fdc <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <clockwise_90+0x6c>)
 8000fce:	2296      	movs	r2, #150	; 0x96
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000fd2:	e003      	b.n	8000fdc <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <clockwise_90+0x6c>)
 8000fd6:	2299      	movs	r2, #153	; 0x99
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000fda:	bf00      	nop
		}
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40000400 	.word	0x40000400

08000fec <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d024      	beq.n	800104c <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3b01      	subs	r3, #1
 8001010:	2b03      	cmp	r3, #3
 8001012:	d81b      	bhi.n	800104c <anticlockwise_90+0x60>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <anticlockwise_90+0x30>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	0800102d 	.word	0x0800102d
 8001020:	08001035 	.word	0x08001035
 8001024:	0800103d 	.word	0x0800103d
 8001028:	08001045 	.word	0x08001045
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <anticlockwise_90+0x6c>)
 800102e:	2225      	movs	r2, #37	; 0x25
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001032:	e00b      	b.n	800104c <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <anticlockwise_90+0x6c>)
 8001036:	221d      	movs	r2, #29
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800103a:	e007      	b.n	800104c <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <anticlockwise_90+0x6c>)
 800103e:	221f      	movs	r2, #31
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001042:	e003      	b.n	800104c <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <anticlockwise_90+0x6c>)
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800104a:	bf00      	nop
		}
	}
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40000400 	.word	0x40000400

0800105c <servo_pull>:

void servo_pull(servos servo) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d123      	bne.n	80010ba <servo_pull+0x5e>
		uint8_t target = servo/2;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3b01      	subs	r3, #1
 800107c:	2b03      	cmp	r3, #3
 800107e:	d81c      	bhi.n	80010ba <servo_pull+0x5e>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <servo_pull+0x2c>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	08001099 	.word	0x08001099
 800108c:	080010a1 	.word	0x080010a1
 8001090:	080010ab 	.word	0x080010ab
 8001094:	080010b3 	.word	0x080010b3
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <servo_pull+0x68>)
 800109a:	221e      	movs	r2, #30
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800109e:	e00c      	b.n	80010ba <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 80010a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a4:	221e      	movs	r2, #30
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80010a8:	e007      	b.n	80010ba <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <servo_pull+0x68>)
 80010ac:	221e      	movs	r2, #30
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80010b0:	e003      	b.n	80010ba <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <servo_pull+0x68>)
 80010b4:	221e      	movs	r2, #30
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80010b8:	bf00      	nop
		}
	}
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40000800 	.word	0x40000800

080010c8 <servo_push>:

void servo_push(servos servo) {
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d123      	bne.n	8001126 <servo_push+0x5e>
		uint8_t target = servo/2;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d81c      	bhi.n	8001126 <servo_push+0x5e>
 80010ec:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <servo_push+0x2c>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	08001105 	.word	0x08001105
 80010f8:	0800110d 	.word	0x0800110d
 80010fc:	08001117 	.word	0x08001117
 8001100:	0800111f 	.word	0x0800111f
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <servo_push+0x68>)
 8001106:	2264      	movs	r2, #100	; 0x64
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800110a:	e00c      	b.n	8001126 <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 800110c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001114:	e007      	b.n	8001126 <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <servo_push+0x68>)
 8001118:	2264      	movs	r2, #100	; 0x64
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800111c:	e003      	b.n	8001126 <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <servo_push+0x68>)
 8001120:	2264      	movs	r2, #100	; 0x64
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001124:	bf00      	nop
		}
	}
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40000800 	.word	0x40000800

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_MspInit+0x5c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_MspInit+0x5c>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_MspInit+0x5c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x5c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_MspInit+0x60>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_MspInit+0x60>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 fc4f 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) {
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <EXTI0_IRQHandler+0x58>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <EXTI0_IRQHandler+0x54>
		centre_0(south_front);
 80011f8:	2005      	movs	r0, #5
 80011fa:	f7ff fe87 	bl	8000f0c <centre_0>
		centre_0(north_front);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fe84 	bl	8000f0c <centre_0>
		centre_0(east_front);
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff fe81 	bl	8000f0c <centre_0>
		centre_0(west_front);
 800120a:	2007      	movs	r0, #7
 800120c:	f7ff fe7e 	bl	8000f0c <centre_0>
		servo_pull(south_back);
 8001210:	2006      	movs	r0, #6
 8001212:	f7ff ff23 	bl	800105c <servo_pull>
		servo_pull(east_back);
 8001216:	2004      	movs	r0, #4
 8001218:	f7ff ff20 	bl	800105c <servo_pull>
		servo_pull(north_back);
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff ff1d 	bl	800105c <servo_pull>
		servo_pull(west_back);
 8001222:	2008      	movs	r0, #8
 8001224:	f7ff ff1a 	bl	800105c <servo_pull>
		HAL_Delay(0xFFFF);
 8001228:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800122c:	f000 fc44 	bl	8001ab8 <HAL_Delay>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <EXTI0_IRQHandler+0x58>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 ff33 	bl	80020a2 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010400 	.word	0x40010400

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f002 fb90 	bl	8003998 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20010000 	.word	0x20010000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	200000c4 	.word	0x200000c4
 80012ac:	20000330 	.word	0x20000330

080012b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <test_delay>:
// *      Author: justin
// */
//
#include "test.h"

void test_delay(int *flag) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if (*flag == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d17c      	bne.n	80013c6 <test_delay+0x10a>
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	483f      	ldr	r0, [pc, #252]	; (80013d0 <test_delay+0x114>)
 80012d2:	f000 feb7 	bl	8002044 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d174      	bne.n	80013c6 <test_delay+0x10a>
		servo_push(east_back);
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fef3 	bl	80010c8 <servo_push>
		HAL_Delay(DELAY_TIME_sP);
 80012e2:	20c8      	movs	r0, #200	; 0xc8
 80012e4:	f000 fbe8 	bl	8001ab8 <HAL_Delay>
		servo_push(south_back);
 80012e8:	2006      	movs	r0, #6
 80012ea:	f7ff feed 	bl	80010c8 <servo_push>
		HAL_Delay(DELAY_TIME_P);
 80012ee:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80012f2:	f000 fbe1 	bl	8001ab8 <HAL_Delay>
		uint32_t last_tick = HAL_GetTick();
 80012f6:	f000 fbd5 	bl	8001aa4 <HAL_GetTick>
 80012fa:	61f8      	str	r0, [r7, #28]
		char string[20];
		movement_scan_up();
 80012fc:	f7ff fc3a 	bl	8000b74 <movement_scan_up>
		movement_scan_east();
 8001300:	f7ff fd10 	bl	8000d24 <movement_scan_east>
		movement_scan_south();
 8001304:	f7ff fd5a 	bl	8000dbc <movement_scan_south>
		movement_scan_down();
 8001308:	f7ff fdac 	bl	8000e64 <movement_scan_down>
		movement_scan_west();
 800130c:	f7ff fd7b 	bl	8000e06 <movement_scan_west>
		movement_scan_north();
 8001310:	f7ff fc62 	bl	8000bd8 <movement_scan_north>
		movement_scan_north_r();
 8001314:	f7ff fca6 	bl	8000c64 <movement_scan_north_r>
		sprintf(string, "It costs %dms", (HAL_GetTick() - last_tick));
 8001318:	f000 fbc4 	bl	8001aa4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	1ad2      	subs	r2, r2, r3
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	492b      	ldr	r1, [pc, #172]	; (80013d4 <test_delay+0x118>)
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fb0d 	bl	8003948 <siprintf>
		last_tick = HAL_GetTick();
 800132e:	f000 fbb9 	bl	8001aa4 <HAL_GetTick>
 8001332:	61f8      	str	r0, [r7, #28]
		LCD_DrawString(0, 0, string);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	461a      	mov	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fb37 	bl	80009b0 <LCD_DrawString>
		sprintf(string, "Delay time 90: %d", DELAY_TIME_90);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800134a:	4923      	ldr	r1, [pc, #140]	; (80013d8 <test_delay+0x11c>)
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fafb 	bl	8003948 <siprintf>
		LCD_DrawString(0,16, string);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	461a      	mov	r2, r3
 8001358:	2110      	movs	r1, #16
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fb28 	bl	80009b0 <LCD_DrawString>
		sprintf(string, "Delay time 180: %d", DELAY_TIME_180);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	f44f 721b 	mov.w	r2, #620	; 0x26c
 8001368:	491c      	ldr	r1, [pc, #112]	; (80013dc <test_delay+0x120>)
 800136a:	4618      	mov	r0, r3
 800136c:	f002 faec 	bl	8003948 <siprintf>
		LCD_DrawString(0,16*2, string);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	461a      	mov	r2, r3
 8001376:	2120      	movs	r1, #32
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fb19 	bl	80009b0 <LCD_DrawString>
		sprintf(string, "Delay time P: %d", DELAY_TIME_P);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001386:	4916      	ldr	r1, [pc, #88]	; (80013e0 <test_delay+0x124>)
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fadd 	bl	8003948 <siprintf>
		LCD_DrawString(0,16*3, string);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	461a      	mov	r2, r3
 8001394:	2130      	movs	r1, #48	; 0x30
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fb0a 	bl	80009b0 <LCD_DrawString>
		sprintf(string, "Delay time sP: %d", DELAY_TIME_sP);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	22c8      	movs	r2, #200	; 0xc8
 80013a2:	4910      	ldr	r1, [pc, #64]	; (80013e4 <test_delay+0x128>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 facf 	bl	8003948 <siprintf>
		LCD_DrawString(0,16*4, string);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	461a      	mov	r2, r3
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fafc 	bl	80009b0 <LCD_DrawString>
		remove_cube();
 80013b8:	f7ff fd9a 	bl	8000ef0 <remove_cube>
		(*flag)++;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
	}
}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40011000 	.word	0x40011000
 80013d4:	080042c4 	.word	0x080042c4
 80013d8:	080042d4 	.word	0x080042d4
 80013dc:	080042e8 	.word	0x080042e8
 80013e0:	080042fc 	.word	0x080042fc
 80013e4:	08004310 	.word	0x08004310

080013e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_TIM2_Init+0xe8>)
 800141a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001422:	f240 42af 	movw	r2, #1199	; 0x4af
 8001426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_TIM2_Init+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001430:	f240 42af 	movw	r2, #1199	; 0x4af
 8001434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_TIM2_Init+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001442:	4823      	ldr	r0, [pc, #140]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001444:	f001 fa9f 	bl	8002986 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800144e:	f7ff fb8c 	bl	8000b6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	4619      	mov	r1, r3
 800145e:	481c      	ldr	r0, [pc, #112]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001460:	f001 fcb0 	bl	8002dc4 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800146a:	f7ff fb7e 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_TIM2_Init+0xe8>)
 8001470:	f001 fad8 	bl	8002a24 <HAL_TIM_PWM_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800147a:	f7ff fb76 	bl	8000b6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_TIM2_Init+0xe8>)
 800148e:	f002 f83d 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001498:	f7ff fb67 	bl	8000b6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149c:	2360      	movs	r3, #96	; 0x60
 800149e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 80014a0:	231e      	movs	r3, #30
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2208      	movs	r2, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM2_Init+0xe8>)
 80014b4:	f001 fbc8 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014be:	f7ff fb54 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM2_Init+0xe8>)
 80014c4:	f000 f970 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000c8 	.word	0x200000c8

080014d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001504:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <MX_TIM3_Init+0x128>)
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <MX_TIM3_Init+0x12c>)
 8001508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 800150a:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <MX_TIM3_Init+0x128>)
 800150c:	f240 42af 	movw	r2, #1199	; 0x4af
 8001510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <MX_TIM3_Init+0x128>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_TIM3_Init+0x128>)
 800151a:	f240 42af 	movw	r2, #1199	; 0x4af
 800151e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <MX_TIM3_Init+0x128>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_TIM3_Init+0x128>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800152c:	4833      	ldr	r0, [pc, #204]	; (80015fc <MX_TIM3_Init+0x128>)
 800152e:	f001 fa2a 	bl	8002986 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001538:	f7ff fb17 	bl	8000b6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	4619      	mov	r1, r3
 8001548:	482c      	ldr	r0, [pc, #176]	; (80015fc <MX_TIM3_Init+0x128>)
 800154a:	f001 fc3b 	bl	8002dc4 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001554:	f7ff fb09 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <MX_TIM3_Init+0x128>)
 800155a:	f001 fa63 	bl	8002a24 <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001564:	f7ff fb01 	bl	8000b6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	4619      	mov	r1, r3
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <MX_TIM3_Init+0x128>)
 8001578:	f001 ffc8 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001582:	f7ff faf2 	bl	8000b6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 800158a:	231c      	movs	r3, #28
 800158c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <MX_TIM3_Init+0x128>)
 800159e:	f001 fb53 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015a8:	f7ff fadf 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2204      	movs	r2, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <MX_TIM3_Init+0x128>)
 80015b4:	f001 fb48 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80015be:	f7ff fad4 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2208      	movs	r2, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_TIM3_Init+0x128>)
 80015ca:	f001 fb3d 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80015d4:	f7ff fac9 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	220c      	movs	r2, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <MX_TIM3_Init+0x128>)
 80015e0:	f001 fb32 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80015ea:	f7ff fabe 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <MX_TIM3_Init+0x128>)
 80015f0:	f000 f8da 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000110 	.word	0x20000110
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <MX_TIM4_Init+0x114>)
 8001636:	4a39      	ldr	r2, [pc, #228]	; (800171c <MX_TIM4_Init+0x118>)
 8001638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <MX_TIM4_Init+0x114>)
 800163c:	f240 42af 	movw	r2, #1199	; 0x4af
 8001640:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <MX_TIM4_Init+0x114>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <MX_TIM4_Init+0x114>)
 800164a:	f240 42af 	movw	r2, #1199	; 0x4af
 800164e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_TIM4_Init+0x114>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <MX_TIM4_Init+0x114>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800165c:	482e      	ldr	r0, [pc, #184]	; (8001718 <MX_TIM4_Init+0x114>)
 800165e:	f001 f992 	bl	8002986 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001668:	f7ff fa7f 	bl	8000b6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	4827      	ldr	r0, [pc, #156]	; (8001718 <MX_TIM4_Init+0x114>)
 800167a:	f001 fba3 	bl	8002dc4 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001684:	f7ff fa71 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_TIM4_Init+0x114>)
 800168a:	f001 f9cb 	bl	8002a24 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001694:	f7ff fa69 	bl	8000b6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4619      	mov	r1, r3
 80016a6:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_TIM4_Init+0x114>)
 80016a8:	f001 ff30 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016b2:	f7ff fa5a 	bl	8000b6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 80016ba:	231c      	movs	r3, #28
 80016bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <MX_TIM4_Init+0x114>)
 80016ce:	f001 fabb 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016d8:	f7ff fa47 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2208      	movs	r2, #8
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_TIM4_Init+0x114>)
 80016e4:	f001 fab0 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80016ee:	f7ff fa3c 	bl	8000b6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	220c      	movs	r2, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM4_Init+0x114>)
 80016fa:	f001 faa5 	bl	8002c48 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001704:	f7ff fa31 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM4_Init+0x114>)
 800170a:	f000 f84d 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000158 	.word	0x20000158
 800171c:	40000800 	.word	0x40000800

08001720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d10c      	bne.n	800174c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800174a:	e022      	b.n	8001792 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_TIM_Base_MspInit+0x80>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10c      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
}
 800176e:	e010      	b.n	8001792 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10b      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_TIM_Base_MspInit+0x7c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40000800 	.word	0x40000800

080017a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c6:	d118      	bne.n	80017fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017e0:	2304      	movs	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	482c      	ldr	r0, [pc, #176]	; (80018a4 <HAL_TIM_MspPostInit+0xfc>)
 80017f4:	f000 fa92 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017f8:	e04e      	b.n	8001898 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <HAL_TIM_MspPostInit+0x100>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d12b      	bne.n	800185c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800181c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	481e      	ldr	r0, [pc, #120]	; (80018ac <HAL_TIM_MspPostInit+0x104>)
 8001832:	f000 fa73 	bl	8001d1c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_TIM_MspPostInit+0x108>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_TIM_MspPostInit+0x108>)
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	6053      	str	r3, [r2, #4]
}
 800185a:	e01d      	b.n	8001898 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_TIM_MspPostInit+0x10c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d118      	bne.n	8001898 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_TIM_MspPostInit+0xf8>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800187e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <HAL_TIM_MspPostInit+0x110>)
 8001894:	f000 fa42 	bl	8001d1c <HAL_GPIO_Init>
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40000400 	.word	0x40000400
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40010c00 	.word	0x40010c00

080018bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_USART1_UART_Init+0x50>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018f4:	f001 fe76 	bl	80035e4 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018fe:	f7ff f934 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001a0 	.word	0x200001a0
 800190c:	40013800 	.word	0x40013800

08001910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_UART_MspInit+0x8c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d131      	bne.n	8001994 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <HAL_UART_MspInit+0x94>)
 8001976:	f000 f9d1 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_MspInit+0x94>)
 8001990:	f000 f9c4 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40013800 	.word	0x40013800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010800 	.word	0x40010800

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ce:	f7ff fc6f 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f001 ffe7 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff f81b 	bl	8000a10 <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019e4:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 80019e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019ec:	20000330 	.word	0x20000330

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f947 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fb90 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f95f 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f000 f927 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	200001e4 	.word	0x200001e4

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	200001e4 	.word	0x200001e4

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffe0 	bl	8001aa4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e179      	b.n	8002024 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8168 	bne.w	800201e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a96      	ldr	r2, [pc, #600]	; (8001fac <HAL_GPIO_Init+0x290>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a94      	ldr	r2, [pc, #592]	; (8001fac <HAL_GPIO_Init+0x290>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a94      	ldr	r2, [pc, #592]	; (8001fb0 <HAL_GPIO_Init+0x294>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a92      	ldr	r2, [pc, #584]	; (8001fb0 <HAL_GPIO_Init+0x294>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a92      	ldr	r2, [pc, #584]	; (8001fb4 <HAL_GPIO_Init+0x298>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a90      	ldr	r2, [pc, #576]	; (8001fb4 <HAL_GPIO_Init+0x298>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a90      	ldr	r2, [pc, #576]	; (8001fb8 <HAL_GPIO_Init+0x29c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a8e      	ldr	r2, [pc, #568]	; (8001fb8 <HAL_GPIO_Init+0x29c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a8e      	ldr	r2, [pc, #568]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80c1 	beq.w	800201e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_Init+0x204>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x200>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1fc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a39      	ldr	r2, [pc, #228]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1f8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1f4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1f0>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e00a      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	e008      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4924      	ldr	r1, [pc, #144]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4916      	ldr	r1, [pc, #88]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d025      	beq.n	8001fe8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	e025      	b.n	8001ff6 <HAL_GPIO_Init+0x2da>
 8001faa:	bf00      	nop
 8001fac:	10320000 	.word	0x10320000
 8001fb0:	10310000 	.word	0x10310000
 8001fb4:	10220000 	.word	0x10220000
 8001fb8:	10210000 	.word	0x10210000
 8001fbc:	10120000 	.word	0x10120000
 8001fc0:	10110000 	.word	0x10110000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40011400 	.word	0x40011400
 8001fdc:	40011800 	.word	0x40011800
 8001fe0:	40011c00 	.word	0x40011c00
 8001fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4913      	ldr	r1, [pc, #76]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_GPIO_Init+0x324>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_GPIO_Init+0x324>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]
 800200e:	e006      	b.n	800201e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_GPIO_Init+0x324>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	43db      	mvns	r3, r3
 8002018:	4909      	ldr	r1, [pc, #36]	; (8002040 <HAL_GPIO_Init+0x324>)
 800201a:	4013      	ands	r3, r2
 800201c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f47f ae7e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	372c      	adds	r7, #44	; 0x2c
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
 800207e:	4613      	mov	r3, r2
 8002080:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002082:	787b      	ldrb	r3, [r7, #1]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002088:	887a      	ldrh	r2, [r7, #2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800208e:	e003      	b.n	8002098 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	611a      	str	r2, [r3, #16]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e272      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e4:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020f0:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e24c      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7a      	ldr	r2, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a77      	ldr	r2, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a71      	ldr	r2, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002174:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fc86 	bl	8001aa4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc82 	bl	8001aa4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e200      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe4>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fc72 	bl	8001aa4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fc6e 	bl	8001aa4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1ec      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x10c>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fe:	4b49      	ldr	r3, [pc, #292]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1c0      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4939      	ldr	r1, [pc, #228]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fc27 	bl	8001aa4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff fc23 	bl	8001aa4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1a1      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4927      	ldr	r1, [pc, #156]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fc06 	bl	8001aa4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff fc02 	bl	8001aa4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e180      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x274>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff fbe6 	bl	8001aa4 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fbe2 	bl	8001aa4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e160      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fad8 	bl	80028b0 <RCC_Delay>
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_OscConfig+0x274>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fbcc 	bl	8001aa4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fbc8 	bl	8001aa4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d908      	bls.n	8002330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e146      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	42420000 	.word	0x42420000
 800232c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e9      	bne.n	8002310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a6 	beq.w	8002496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a87      	ldr	r2, [pc, #540]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7e      	ldr	r2, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fb89 	bl	8001aa4 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fb85 	bl	8001aa4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e103      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x4c8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023bc:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x334>
 80023d2:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a66      	ldr	r2, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x356>
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a5a      	ldr	r2, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a57      	ldr	r2, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb39 	bl	8001aa4 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff fb35 	bl	8001aa4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0b1      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x37e>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fb23 	bl	8001aa4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff fb1f 	bl	8001aa4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e09b      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b3c      	ldr	r3, [pc, #240]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d061      	beq.n	8002570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_RCC_OscConfig+0x4cc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff faf3 	bl	8001aa4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff faef 	bl	8001aa4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e06d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4921      	ldr	r1, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a19      	ldr	r1, [r3, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	430b      	orrs	r3, r1
 800250e:	491b      	ldr	r1, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4cc>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff fac3 	bl	8001aa4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7ff fabf 	bl	8001aa4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e03d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
 8002540:	e035      	b.n	80025ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x4cc>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff faac 	bl	8001aa4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff faa8 	bl	8001aa4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e026      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x498>
 800256e:	e01e      	b.n	80025ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e019      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x500>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0d0      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4965      	ldr	r1, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d040      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e073      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06b      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4936      	ldr	r1, [pc, #216]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7ff f9fa 	bl	8001aa4 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7ff f9f6 	bl	8001aa4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e053      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d210      	bcs.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f958 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000
 8002780:	40021000 	.word	0x40021000
 8002784:	08004924 	.word	0x08004924
 8002788:	20000000 	.word	0x20000000
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b490      	push	{r4, r7}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_GetSysClockFreq+0xac>)
 8002798:	1d3c      	adds	r4, r7, #4
 800279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a0:	f240 2301 	movw	r3, #513	; 0x201
 80027a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x40>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x46>
 80027ce:	e02b      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d2:	623b      	str	r3, [r7, #32]
      break;
 80027d4:	e02b      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3328      	adds	r3, #40	; 0x28
 80027e0:	443b      	add	r3, r7
 80027e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0c5b      	lsrs	r3, r3, #17
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	3328      	adds	r3, #40	; 0x28
 80027fe:	443b      	add	r3, r7
 8002800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	623b      	str	r3, [r7, #32]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb4>)
 800282a:	623b      	str	r3, [r7, #32]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	6a3b      	ldr	r3, [r7, #32]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc90      	pop	{r4, r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08004324 	.word	0x08004324
 8002840:	40021000 	.word	0x40021000
 8002844:	007a1200 	.word	0x007a1200
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08004934 	.word	0x08004934

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffde 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08004934 	.word	0x08004934

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_SRAM_Init+0x1c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d101      	bne.n	800290c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e038      	b.n	800297e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7fd fd27 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3308      	adds	r3, #8
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f000 ff33 	bl	800379c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	461a      	mov	r2, r3
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	f000 ff95 	bl	8003870 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6858      	ldr	r0, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	f000 ffc0 	bl	80038d8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	f041 0101 	orr.w	r1, r1, #1
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e041      	b.n	8002a1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fe feb7 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 fac1 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f839 	bl	8002ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fa72 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e022      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e015      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e072      	b.n	8002c2c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	e00b      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b74:	e003      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fc9c 	bl	80034c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_TIM_PWM_Start+0x160>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_PWM_Start+0xcc>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <HAL_TIM_PWM_Start+0x164>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_PWM_Start+0xd0>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_TIM_PWM_Start+0xd2>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_TIM_PWM_Start+0x160>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x122>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_TIM_PWM_Start+0x164>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x122>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x122>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_TIM_PWM_Start+0x168>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x122>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_PWM_Start+0x16c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x122>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_TIM_PWM_Start+0x170>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d111      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d010      	beq.n	8002c2a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	e007      	b.n	8002c2a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00

08002c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0ac      	b.n	8002dbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	f200 809f 	bhi.w	8002db0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002db1 	.word	0x08002db1
 8002c80:	08002db1 	.word	0x08002db1
 8002c84:	08002db1 	.word	0x08002db1
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002db1 	.word	0x08002db1
 8002c90:	08002db1 	.word	0x08002db1
 8002c94:	08002db1 	.word	0x08002db1
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002db1 	.word	0x08002db1
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	08002db1 	.word	0x08002db1
 8002ca8:	08002d6f 	.word	0x08002d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f9c4 	bl	8003040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      break;
 8002cea:	e062      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fa14 	bl	8003120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      break;
 8002d2c:	e041      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa67 	bl	8003208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e021      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fabb 	bl	80032f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	61da      	str	r2, [r3, #28]
      break;
 8002dae:	e000      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_ConfigClockSource+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0b3      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x180>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e14:	d03e      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0xd0>
 8002e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1a:	f200 8087 	bhi.w	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	f000 8085 	beq.w	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	d87f      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e2c:	2b70      	cmp	r3, #112	; 0x70
 8002e2e:	d01a      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0xa2>
 8002e30:	2b70      	cmp	r3, #112	; 0x70
 8002e32:	d87b      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d050      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x116>
 8002e38:	2b60      	cmp	r3, #96	; 0x60
 8002e3a:	d877      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e3c:	2b50      	cmp	r3, #80	; 0x50
 8002e3e:	d03c      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xf6>
 8002e40:	2b50      	cmp	r3, #80	; 0x50
 8002e42:	d873      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d058      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x136>
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d86f      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e4c:	2b30      	cmp	r3, #48	; 0x30
 8002e4e:	d064      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x156>
 8002e50:	2b30      	cmp	r3, #48	; 0x30
 8002e52:	d86b      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d060      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x156>
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d867      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05c      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x156>
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d05a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e64:	e062      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f000 fb06 	bl	8003486 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	609a      	str	r2, [r3, #8]
      break;
 8002e92:	e04e      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f000 faef 	bl	8003486 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb6:	609a      	str	r2, [r3, #8]
      break;
 8002eb8:	e03b      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 fa66 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2150      	movs	r1, #80	; 0x50
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fabd 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e02b      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f000 fa84 	bl	80033f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2160      	movs	r1, #96	; 0x60
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 faad 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002ef8:	e01b      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f000 fa46 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa9d 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f18:	e00b      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f000 fa94 	bl	8003452 <TIM_ITRx_SetConfig>
        break;
 8002f2a:	e002      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <TIM_Base_SetConfig+0xe0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a32      	ldr	r2, [pc, #200]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00f      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d00b      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <TIM_Base_SetConfig+0xe8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a2e      	ldr	r2, [pc, #184]	; (8003038 <TIM_Base_SetConfig+0xec>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a2d      	ldr	r2, [pc, #180]	; (800303c <TIM_Base_SetConfig+0xf0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <TIM_Base_SetConfig+0xe0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <TIM_Base_SetConfig+0x82>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a21      	ldr	r2, [pc, #132]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00f      	beq.n	8002fce <TIM_Base_SetConfig+0x82>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d00b      	beq.n	8002fce <TIM_Base_SetConfig+0x82>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <TIM_Base_SetConfig+0xe8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <TIM_Base_SetConfig+0x82>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <TIM_Base_SetConfig+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0x82>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <TIM_Base_SetConfig+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <TIM_Base_SetConfig+0xe0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <TIM_Base_SetConfig+0xe4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d103      	bne.n	800301c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	615a      	str	r2, [r3, #20]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00

08003040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0302 	bic.w	r3, r3, #2
 8003088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a20      	ldr	r2, [pc, #128]	; (8003118 <TIM_OC1_SetConfig+0xd8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC1_SetConfig+0x64>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <TIM_OC1_SetConfig+0xdc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10c      	bne.n	80030be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0308 	bic.w	r3, r3, #8
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <TIM_OC1_SetConfig+0xd8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_OC1_SetConfig+0x8e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <TIM_OC1_SetConfig+0xdc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40013400 	.word	0x40013400

08003120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0210 	bic.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0320 	bic.w	r3, r3, #32
 800316a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <TIM_OC2_SetConfig+0xe0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC2_SetConfig+0x68>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <TIM_OC2_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10d      	bne.n	80031a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a16      	ldr	r2, [pc, #88]	; (8003200 <TIM_OC2_SetConfig+0xe0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC2_SetConfig+0x94>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a15      	ldr	r2, [pc, #84]	; (8003204 <TIM_OC2_SetConfig+0xe4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d113      	bne.n	80031dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40013400 	.word	0x40013400

08003208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <TIM_OC3_SetConfig+0xe0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC3_SetConfig+0x66>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a20      	ldr	r2, [pc, #128]	; (80032ec <TIM_OC3_SetConfig+0xe4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10d      	bne.n	800328a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <TIM_OC3_SetConfig+0xe0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC3_SetConfig+0x92>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <TIM_OC3_SetConfig+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d113      	bne.n	80032c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40013400 	.word	0x40013400

080032f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <TIM_OC4_SetConfig+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_OC4_SetConfig+0x68>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <TIM_OC4_SetConfig+0xa4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40013400 	.word	0x40013400

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 0210 	bic.w	r2, r3, #16
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	031b      	lsls	r3, r3, #12
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	609a      	str	r2, [r3, #8]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e050      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e03f      	b.n	8003676 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f980 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f829 	bl	8003680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ba:	f023 030c 	bic.w	r3, r3, #12
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <UART_SetConfig+0x114>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7ff f8ce 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	e002      	b.n	80036f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7ff f8b6 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80036f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	0119      	lsls	r1, r3, #4
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009a      	lsls	r2, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fbb2 f2f3 	udiv	r2, r2, r3
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <UART_SetConfig+0x118>)
 800372e:	fba3 0302 	umull	r0, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2064      	movs	r0, #100	; 0x64
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	3332      	adds	r3, #50	; 0x32
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	4419      	add	r1, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <UART_SetConfig+0x118>)
 8003766:	fba3 0302 	umull	r0, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2064      	movs	r0, #100	; 0x64
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <UART_SetConfig+0x118>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	440a      	add	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40013800 	.word	0x40013800
 8003798:	51eb851f 	.word	0x51eb851f

0800379c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f023 0101 	bic.w	r1, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d102      	bne.n	80037cc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e001      	b.n	80037d0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80037dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80037e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80037e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80037ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80037f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80037fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003800:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003806:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800380c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <FSMC_NORSRAM_Init+0xd0>)
 800382c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003834:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800383c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43db      	mvns	r3, r3
 800384c:	ea02 0103 	and.w	r1, r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4319      	orrs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	0008fb7f 	.word	0x0008fb7f

08003870 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003886:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	431a      	orrs	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	431a      	orrs	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	051b      	lsls	r3, r3, #20
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	3b02      	subs	r3, #2
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	3201      	adds	r2, #1
 80038c4:	4319      	orrs	r1, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ec:	d11d      	bne.n	800392a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	6811      	ldr	r1, [r2, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	4311      	orrs	r1, r2
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	0212      	lsls	r2, r2, #8
 800390c:	4311      	orrs	r1, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	6992      	ldr	r2, [r2, #24]
 8003912:	4311      	orrs	r1, r2
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	0412      	lsls	r2, r2, #16
 800391a:	430a      	orrs	r2, r1
 800391c:	ea43 0102 	orr.w	r1, r3, r2
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003928:	e005      	b.n	8003936 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	cff00000 	.word	0xcff00000

08003948 <siprintf>:
 8003948:	b40e      	push	{r1, r2, r3}
 800394a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800394e:	b500      	push	{lr}
 8003950:	b09c      	sub	sp, #112	; 0x70
 8003952:	ab1d      	add	r3, sp, #116	; 0x74
 8003954:	9002      	str	r0, [sp, #8]
 8003956:	9006      	str	r0, [sp, #24]
 8003958:	9107      	str	r1, [sp, #28]
 800395a:	9104      	str	r1, [sp, #16]
 800395c:	4808      	ldr	r0, [pc, #32]	; (8003980 <siprintf+0x38>)
 800395e:	4909      	ldr	r1, [pc, #36]	; (8003984 <siprintf+0x3c>)
 8003960:	f853 2b04 	ldr.w	r2, [r3], #4
 8003964:	9105      	str	r1, [sp, #20]
 8003966:	6800      	ldr	r0, [r0, #0]
 8003968:	a902      	add	r1, sp, #8
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	f000 f89a 	bl	8003aa4 <_svfiprintf_r>
 8003970:	2200      	movs	r2, #0
 8003972:	9b02      	ldr	r3, [sp, #8]
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	b01c      	add	sp, #112	; 0x70
 8003978:	f85d eb04 	ldr.w	lr, [sp], #4
 800397c:	b003      	add	sp, #12
 800397e:	4770      	bx	lr
 8003980:	20000058 	.word	0x20000058
 8003984:	ffff0208 	.word	0xffff0208

08003988 <memset>:
 8003988:	4603      	mov	r3, r0
 800398a:	4402      	add	r2, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000058 	.word	0x20000058

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	2600      	movs	r6, #0
 80039a8:	4d0c      	ldr	r5, [pc, #48]	; (80039dc <__libc_init_array+0x38>)
 80039aa:	4c0d      	ldr	r4, [pc, #52]	; (80039e0 <__libc_init_array+0x3c>)
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	f000 fc7a 	bl	80042ac <_init>
 80039b8:	2600      	movs	r6, #0
 80039ba:	4d0a      	ldr	r5, [pc, #40]	; (80039e4 <__libc_init_array+0x40>)
 80039bc:	4c0a      	ldr	r4, [pc, #40]	; (80039e8 <__libc_init_array+0x44>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08004970 	.word	0x08004970
 80039e0:	08004970 	.word	0x08004970
 80039e4:	08004970 	.word	0x08004970
 80039e8:	08004974 	.word	0x08004974

080039ec <__retarget_lock_acquire_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_release_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <__ssputs_r>:
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	461f      	mov	r7, r3
 80039f6:	688e      	ldr	r6, [r1, #8]
 80039f8:	4682      	mov	sl, r0
 80039fa:	42be      	cmp	r6, r7
 80039fc:	460c      	mov	r4, r1
 80039fe:	4690      	mov	r8, r2
 8003a00:	680b      	ldr	r3, [r1, #0]
 8003a02:	d82c      	bhi.n	8003a5e <__ssputs_r+0x6e>
 8003a04:	898a      	ldrh	r2, [r1, #12]
 8003a06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a0a:	d026      	beq.n	8003a5a <__ssputs_r+0x6a>
 8003a0c:	6965      	ldr	r5, [r4, #20]
 8003a0e:	6909      	ldr	r1, [r1, #16]
 8003a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a14:	eba3 0901 	sub.w	r9, r3, r1
 8003a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a1c:	1c7b      	adds	r3, r7, #1
 8003a1e:	444b      	add	r3, r9
 8003a20:	106d      	asrs	r5, r5, #1
 8003a22:	429d      	cmp	r5, r3
 8003a24:	bf38      	it	cc
 8003a26:	461d      	movcc	r5, r3
 8003a28:	0553      	lsls	r3, r2, #21
 8003a2a:	d527      	bpl.n	8003a7c <__ssputs_r+0x8c>
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f000 f957 	bl	8003ce0 <_malloc_r>
 8003a32:	4606      	mov	r6, r0
 8003a34:	b360      	cbz	r0, 8003a90 <__ssputs_r+0xa0>
 8003a36:	464a      	mov	r2, r9
 8003a38:	6921      	ldr	r1, [r4, #16]
 8003a3a:	f000 fbd9 	bl	80041f0 <memcpy>
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	6126      	str	r6, [r4, #16]
 8003a4c:	444e      	add	r6, r9
 8003a4e:	6026      	str	r6, [r4, #0]
 8003a50:	463e      	mov	r6, r7
 8003a52:	6165      	str	r5, [r4, #20]
 8003a54:	eba5 0509 	sub.w	r5, r5, r9
 8003a58:	60a5      	str	r5, [r4, #8]
 8003a5a:	42be      	cmp	r6, r7
 8003a5c:	d900      	bls.n	8003a60 <__ssputs_r+0x70>
 8003a5e:	463e      	mov	r6, r7
 8003a60:	4632      	mov	r2, r6
 8003a62:	4641      	mov	r1, r8
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	f000 fb8a 	bl	800417e <memmove>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	68a3      	ldr	r3, [r4, #8]
 8003a6e:	1b9b      	subs	r3, r3, r6
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	4433      	add	r3, r6
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	f000 fb4f 	bl	8004120 <_realloc_r>
 8003a82:	4606      	mov	r6, r0
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1e0      	bne.n	8003a4a <__ssputs_r+0x5a>
 8003a88:	4650      	mov	r0, sl
 8003a8a:	6921      	ldr	r1, [r4, #16]
 8003a8c:	f000 fbbe 	bl	800420c <_free_r>
 8003a90:	230c      	movs	r3, #12
 8003a92:	f8ca 3000 	str.w	r3, [sl]
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	e7e9      	b.n	8003a78 <__ssputs_r+0x88>

08003aa4 <_svfiprintf_r>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	898b      	ldrh	r3, [r1, #12]
 8003aac:	4607      	mov	r7, r0
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	460d      	mov	r5, r1
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	b09d      	sub	sp, #116	; 0x74
 8003ab6:	d50e      	bpl.n	8003ad6 <_svfiprintf_r+0x32>
 8003ab8:	690b      	ldr	r3, [r1, #16]
 8003aba:	b963      	cbnz	r3, 8003ad6 <_svfiprintf_r+0x32>
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	f000 f90f 	bl	8003ce0 <_malloc_r>
 8003ac2:	6028      	str	r0, [r5, #0]
 8003ac4:	6128      	str	r0, [r5, #16]
 8003ac6:	b920      	cbnz	r0, 8003ad2 <_svfiprintf_r+0x2e>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ad0:	e0d0      	b.n	8003c74 <_svfiprintf_r+0x1d0>
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	616b      	str	r3, [r5, #20]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	2320      	movs	r3, #32
 8003adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ae0:	2330      	movs	r3, #48	; 0x30
 8003ae2:	f04f 0901 	mov.w	r9, #1
 8003ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003c8c <_svfiprintf_r+0x1e8>
 8003aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af2:	4623      	mov	r3, r4
 8003af4:	469a      	mov	sl, r3
 8003af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afa:	b10a      	cbz	r2, 8003b00 <_svfiprintf_r+0x5c>
 8003afc:	2a25      	cmp	r2, #37	; 0x25
 8003afe:	d1f9      	bne.n	8003af4 <_svfiprintf_r+0x50>
 8003b00:	ebba 0b04 	subs.w	fp, sl, r4
 8003b04:	d00b      	beq.n	8003b1e <_svfiprintf_r+0x7a>
 8003b06:	465b      	mov	r3, fp
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f7ff ff6f 	bl	80039f0 <__ssputs_r>
 8003b12:	3001      	adds	r0, #1
 8003b14:	f000 80a9 	beq.w	8003c6a <_svfiprintf_r+0x1c6>
 8003b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b1a:	445a      	add	r2, fp
 8003b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a1 	beq.w	8003c6a <_svfiprintf_r+0x1c6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b32:	f10a 0a01 	add.w	sl, sl, #1
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	9307      	str	r3, [sp, #28]
 8003b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b40:	4654      	mov	r4, sl
 8003b42:	2205      	movs	r2, #5
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	4850      	ldr	r0, [pc, #320]	; (8003c8c <_svfiprintf_r+0x1e8>)
 8003b4a:	f000 fb43 	bl	80041d4 <memchr>
 8003b4e:	9a04      	ldr	r2, [sp, #16]
 8003b50:	b9d8      	cbnz	r0, 8003b8a <_svfiprintf_r+0xe6>
 8003b52:	06d0      	lsls	r0, r2, #27
 8003b54:	bf44      	itt	mi
 8003b56:	2320      	movmi	r3, #32
 8003b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5c:	0711      	lsls	r1, r2, #28
 8003b5e:	bf44      	itt	mi
 8003b60:	232b      	movmi	r3, #43	; 0x2b
 8003b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b66:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6c:	d015      	beq.n	8003b9a <_svfiprintf_r+0xf6>
 8003b6e:	4654      	mov	r4, sl
 8003b70:	2000      	movs	r0, #0
 8003b72:	f04f 0c0a 	mov.w	ip, #10
 8003b76:	9a07      	ldr	r2, [sp, #28]
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7e:	3b30      	subs	r3, #48	; 0x30
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d94d      	bls.n	8003c20 <_svfiprintf_r+0x17c>
 8003b84:	b1b0      	cbz	r0, 8003bb4 <_svfiprintf_r+0x110>
 8003b86:	9207      	str	r2, [sp, #28]
 8003b88:	e014      	b.n	8003bb4 <_svfiprintf_r+0x110>
 8003b8a:	eba0 0308 	sub.w	r3, r0, r8
 8003b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b92:	4313      	orrs	r3, r2
 8003b94:	46a2      	mov	sl, r4
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	e7d2      	b.n	8003b40 <_svfiprintf_r+0x9c>
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	1d19      	adds	r1, r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	9103      	str	r1, [sp, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfbb      	ittet	lt
 8003ba6:	425b      	neglt	r3, r3
 8003ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bac:	9307      	strge	r3, [sp, #28]
 8003bae:	9307      	strlt	r3, [sp, #28]
 8003bb0:	bfb8      	it	lt
 8003bb2:	9204      	strlt	r2, [sp, #16]
 8003bb4:	7823      	ldrb	r3, [r4, #0]
 8003bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb8:	d10c      	bne.n	8003bd4 <_svfiprintf_r+0x130>
 8003bba:	7863      	ldrb	r3, [r4, #1]
 8003bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bbe:	d134      	bne.n	8003c2a <_svfiprintf_r+0x186>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	3402      	adds	r4, #2
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9203      	str	r2, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfb8      	it	lt
 8003bce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003c90 <_svfiprintf_r+0x1ec>
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4650      	mov	r0, sl
 8003bdc:	7821      	ldrb	r1, [r4, #0]
 8003bde:	f000 faf9 	bl	80041d4 <memchr>
 8003be2:	b138      	cbz	r0, 8003bf4 <_svfiprintf_r+0x150>
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	eba0 000a 	sub.w	r0, r0, sl
 8003bec:	4082      	lsls	r2, r0
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	9304      	str	r3, [sp, #16]
 8003bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf8:	2206      	movs	r2, #6
 8003bfa:	4826      	ldr	r0, [pc, #152]	; (8003c94 <_svfiprintf_r+0x1f0>)
 8003bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c00:	f000 fae8 	bl	80041d4 <memchr>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d038      	beq.n	8003c7a <_svfiprintf_r+0x1d6>
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <_svfiprintf_r+0x1f4>)
 8003c0a:	bb1b      	cbnz	r3, 8003c54 <_svfiprintf_r+0x1b0>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	3307      	adds	r3, #7
 8003c10:	f023 0307 	bic.w	r3, r3, #7
 8003c14:	3308      	adds	r3, #8
 8003c16:	9303      	str	r3, [sp, #12]
 8003c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1a:	4433      	add	r3, r6
 8003c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1e:	e768      	b.n	8003af2 <_svfiprintf_r+0x4e>
 8003c20:	460c      	mov	r4, r1
 8003c22:	2001      	movs	r0, #1
 8003c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c28:	e7a6      	b.n	8003b78 <_svfiprintf_r+0xd4>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f04f 0c0a 	mov.w	ip, #10
 8003c30:	4619      	mov	r1, r3
 8003c32:	3401      	adds	r4, #1
 8003c34:	9305      	str	r3, [sp, #20]
 8003c36:	4620      	mov	r0, r4
 8003c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3c:	3a30      	subs	r2, #48	; 0x30
 8003c3e:	2a09      	cmp	r2, #9
 8003c40:	d903      	bls.n	8003c4a <_svfiprintf_r+0x1a6>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0c6      	beq.n	8003bd4 <_svfiprintf_r+0x130>
 8003c46:	9105      	str	r1, [sp, #20]
 8003c48:	e7c4      	b.n	8003bd4 <_svfiprintf_r+0x130>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c52:	e7f0      	b.n	8003c36 <_svfiprintf_r+0x192>
 8003c54:	ab03      	add	r3, sp, #12
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <_svfiprintf_r+0x1f8>)
 8003c5e:	a904      	add	r1, sp, #16
 8003c60:	f3af 8000 	nop.w
 8003c64:	1c42      	adds	r2, r0, #1
 8003c66:	4606      	mov	r6, r0
 8003c68:	d1d6      	bne.n	8003c18 <_svfiprintf_r+0x174>
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	065b      	lsls	r3, r3, #25
 8003c6e:	f53f af2d 	bmi.w	8003acc <_svfiprintf_r+0x28>
 8003c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c74:	b01d      	add	sp, #116	; 0x74
 8003c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7a:	ab03      	add	r3, sp, #12
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	462a      	mov	r2, r5
 8003c80:	4638      	mov	r0, r7
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <_svfiprintf_r+0x1f8>)
 8003c84:	a904      	add	r1, sp, #16
 8003c86:	f000 f91d 	bl	8003ec4 <_printf_i>
 8003c8a:	e7eb      	b.n	8003c64 <_svfiprintf_r+0x1c0>
 8003c8c:	0800493c 	.word	0x0800493c
 8003c90:	08004942 	.word	0x08004942
 8003c94:	08004946 	.word	0x08004946
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	080039f1 	.word	0x080039f1

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0e      	ldr	r6, [pc, #56]	; (8003cdc <sbrk_aligned+0x3c>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 fa82 	bl	80041b4 <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 fa7d 	bl	80041b4 <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d00a      	beq.n	8003cd4 <sbrk_aligned+0x34>
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d007      	beq.n	8003cd8 <sbrk_aligned+0x38>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fa72 	bl	80041b4 <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d101      	bne.n	8003cd8 <sbrk_aligned+0x38>
 8003cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cd8:	4620      	mov	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	20000328 	.word	0x20000328

08003ce0 <_malloc_r>:
 8003ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	1ccd      	adds	r5, r1, #3
 8003ce6:	f025 0503 	bic.w	r5, r5, #3
 8003cea:	3508      	adds	r5, #8
 8003cec:	2d0c      	cmp	r5, #12
 8003cee:	bf38      	it	cc
 8003cf0:	250c      	movcc	r5, #12
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	db01      	blt.n	8003cfc <_malloc_r+0x1c>
 8003cf8:	42a9      	cmp	r1, r5
 8003cfa:	d905      	bls.n	8003d08 <_malloc_r+0x28>
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	2600      	movs	r6, #0
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4630      	mov	r0, r6
 8003d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ddc <_malloc_r+0xfc>
 8003d0c:	f000 f9fc 	bl	8004108 <__malloc_lock>
 8003d10:	f8d8 3000 	ldr.w	r3, [r8]
 8003d14:	461c      	mov	r4, r3
 8003d16:	bb5c      	cbnz	r4, 8003d70 <_malloc_r+0x90>
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	f7ff ffc0 	bl	8003ca0 <sbrk_aligned>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	4604      	mov	r4, r0
 8003d24:	d155      	bne.n	8003dd2 <_malloc_r+0xf2>
 8003d26:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2a:	4626      	mov	r6, r4
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	d145      	bne.n	8003dbc <_malloc_r+0xdc>
 8003d30:	2c00      	cmp	r4, #0
 8003d32:	d048      	beq.n	8003dc6 <_malloc_r+0xe6>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	4631      	mov	r1, r6
 8003d38:	4638      	mov	r0, r7
 8003d3a:	eb04 0903 	add.w	r9, r4, r3
 8003d3e:	f000 fa39 	bl	80041b4 <_sbrk_r>
 8003d42:	4581      	cmp	r9, r0
 8003d44:	d13f      	bne.n	8003dc6 <_malloc_r+0xe6>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	4638      	mov	r0, r7
 8003d4a:	1a6d      	subs	r5, r5, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	f7ff ffa7 	bl	8003ca0 <sbrk_aligned>
 8003d52:	3001      	adds	r0, #1
 8003d54:	d037      	beq.n	8003dc6 <_malloc_r+0xe6>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	442b      	add	r3, r5
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d038      	beq.n	8003dd6 <_malloc_r+0xf6>
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	42a2      	cmp	r2, r4
 8003d68:	d12b      	bne.n	8003dc2 <_malloc_r+0xe2>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	e00f      	b.n	8003d90 <_malloc_r+0xb0>
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	1b52      	subs	r2, r2, r5
 8003d74:	d41f      	bmi.n	8003db6 <_malloc_r+0xd6>
 8003d76:	2a0b      	cmp	r2, #11
 8003d78:	d917      	bls.n	8003daa <_malloc_r+0xca>
 8003d7a:	1961      	adds	r1, r4, r5
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	6025      	str	r5, [r4, #0]
 8003d80:	bf18      	it	ne
 8003d82:	6059      	strne	r1, [r3, #4]
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	bf08      	it	eq
 8003d88:	f8c8 1000 	streq.w	r1, [r8]
 8003d8c:	5162      	str	r2, [r4, r5]
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	4638      	mov	r0, r7
 8003d92:	f104 060b 	add.w	r6, r4, #11
 8003d96:	f000 f9bd 	bl	8004114 <__malloc_unlock>
 8003d9a:	f026 0607 	bic.w	r6, r6, #7
 8003d9e:	1d23      	adds	r3, r4, #4
 8003da0:	1af2      	subs	r2, r6, r3
 8003da2:	d0ae      	beq.n	8003d02 <_malloc_r+0x22>
 8003da4:	1b9b      	subs	r3, r3, r6
 8003da6:	50a3      	str	r3, [r4, r2]
 8003da8:	e7ab      	b.n	8003d02 <_malloc_r+0x22>
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	6862      	ldr	r2, [r4, #4]
 8003dae:	d1dd      	bne.n	8003d6c <_malloc_r+0x8c>
 8003db0:	f8c8 2000 	str.w	r2, [r8]
 8003db4:	e7ec      	b.n	8003d90 <_malloc_r+0xb0>
 8003db6:	4623      	mov	r3, r4
 8003db8:	6864      	ldr	r4, [r4, #4]
 8003dba:	e7ac      	b.n	8003d16 <_malloc_r+0x36>
 8003dbc:	4634      	mov	r4, r6
 8003dbe:	6876      	ldr	r6, [r6, #4]
 8003dc0:	e7b4      	b.n	8003d2c <_malloc_r+0x4c>
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	e7cc      	b.n	8003d60 <_malloc_r+0x80>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	4638      	mov	r0, r7
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	f000 f9a2 	bl	8004114 <__malloc_unlock>
 8003dd0:	e797      	b.n	8003d02 <_malloc_r+0x22>
 8003dd2:	6025      	str	r5, [r4, #0]
 8003dd4:	e7dc      	b.n	8003d90 <_malloc_r+0xb0>
 8003dd6:	605b      	str	r3, [r3, #4]
 8003dd8:	deff      	udf	#255	; 0xff
 8003dda:	bf00      	nop
 8003ddc:	20000324 	.word	0x20000324

08003de0 <_printf_common>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	4616      	mov	r6, r2
 8003de6:	4699      	mov	r9, r3
 8003de8:	688a      	ldr	r2, [r1, #8]
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4607      	mov	r7, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	bfb8      	it	lt
 8003df2:	4613      	movlt	r3, r2
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e00:	b10a      	cbz	r2, 8003e06 <_printf_common+0x26>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0699      	lsls	r1, r3, #26
 8003e0a:	bf42      	ittt	mi
 8003e0c:	6833      	ldrmi	r3, [r6, #0]
 8003e0e:	3302      	addmi	r3, #2
 8003e10:	6033      	strmi	r3, [r6, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	f015 0506 	ands.w	r5, r5, #6
 8003e18:	d106      	bne.n	8003e28 <_printf_common+0x48>
 8003e1a:	f104 0a19 	add.w	sl, r4, #25
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	6832      	ldr	r2, [r6, #0]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc2b      	bgt.n	8003e80 <_printf_common+0xa0>
 8003e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e2c:	1e13      	subs	r3, r2, #0
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	0692      	lsls	r2, r2, #26
 8003e36:	d430      	bmi.n	8003e9a <_printf_common+0xba>
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e40:	47c0      	blx	r8
 8003e42:	3001      	adds	r0, #1
 8003e44:	d023      	beq.n	8003e8e <_printf_common+0xae>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf14      	ite	ne
 8003e52:	2500      	movne	r5, #0
 8003e54:	6833      	ldreq	r3, [r6, #0]
 8003e56:	f04f 0600 	mov.w	r6, #0
 8003e5a:	bf08      	it	eq
 8003e5c:	68e5      	ldreq	r5, [r4, #12]
 8003e5e:	f104 041a 	add.w	r4, r4, #26
 8003e62:	bf08      	it	eq
 8003e64:	1aed      	subeq	r5, r5, r3
 8003e66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e6a:	bf08      	it	eq
 8003e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bfc4      	itt	gt
 8003e74:	1a9b      	subgt	r3, r3, r2
 8003e76:	18ed      	addgt	r5, r5, r3
 8003e78:	42b5      	cmp	r5, r6
 8003e7a:	d11a      	bne.n	8003eb2 <_printf_common+0xd2>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e008      	b.n	8003e92 <_printf_common+0xb2>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4652      	mov	r2, sl
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d103      	bne.n	8003e96 <_printf_common+0xb6>
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	3501      	adds	r5, #1
 8003e98:	e7c1      	b.n	8003e1e <_printf_common+0x3e>
 8003e9a:	2030      	movs	r0, #48	; 0x30
 8003e9c:	18e1      	adds	r1, r4, r3
 8003e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ea8:	4422      	add	r2, r4
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eb0:	e7c2      	b.n	8003e38 <_printf_common+0x58>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4638      	mov	r0, r7
 8003eba:	47c0      	blx	r8
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d0e6      	beq.n	8003e8e <_printf_common+0xae>
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7d9      	b.n	8003e78 <_printf_common+0x98>

08003ec4 <_printf_i>:
 8003ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	7e0f      	ldrb	r7, [r1, #24]
 8003eca:	4691      	mov	r9, r2
 8003ecc:	2f78      	cmp	r7, #120	; 0x78
 8003ece:	4680      	mov	r8, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	469a      	mov	sl, r3
 8003ed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eda:	d807      	bhi.n	8003eec <_printf_i+0x28>
 8003edc:	2f62      	cmp	r7, #98	; 0x62
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x32>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	f000 80d5 	beq.w	8004090 <_printf_i+0x1cc>
 8003ee6:	2f58      	cmp	r7, #88	; 0x58
 8003ee8:	f000 80c1 	beq.w	800406e <_printf_i+0x1aa>
 8003eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ef4:	e03a      	b.n	8003f6c <_printf_i+0xa8>
 8003ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003efa:	2b15      	cmp	r3, #21
 8003efc:	d8f6      	bhi.n	8003eec <_printf_i+0x28>
 8003efe:	a101      	add	r1, pc, #4	; (adr r1, 8003f04 <_printf_i+0x40>)
 8003f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003eed 	.word	0x08003eed
 8003f10:	08003eed 	.word	0x08003eed
 8003f14:	08003eed 	.word	0x08003eed
 8003f18:	08003eed 	.word	0x08003eed
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003eed 	.word	0x08003eed
 8003f24:	08003eed 	.word	0x08003eed
 8003f28:	08003eed 	.word	0x08003eed
 8003f2c:	08003eed 	.word	0x08003eed
 8003f30:	08004077 	.word	0x08004077
 8003f34:	08003f9d 	.word	0x08003f9d
 8003f38:	08004031 	.word	0x08004031
 8003f3c:	08003eed 	.word	0x08003eed
 8003f40:	08003eed 	.word	0x08003eed
 8003f44:	08004099 	.word	0x08004099
 8003f48:	08003eed 	.word	0x08003eed
 8003f4c:	08003f9d 	.word	0x08003f9d
 8003f50:	08003eed 	.word	0x08003eed
 8003f54:	08003eed 	.word	0x08003eed
 8003f58:	08004039 	.word	0x08004039
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	602a      	str	r2, [r5, #0]
 8003f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0a0      	b.n	80040b2 <_printf_i+0x1ee>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	0607      	lsls	r7, r0, #24
 8003f76:	f103 0104 	add.w	r1, r3, #4
 8003f7a:	6029      	str	r1, [r5, #0]
 8003f7c:	d501      	bpl.n	8003f82 <_printf_i+0xbe>
 8003f7e:	681e      	ldr	r6, [r3, #0]
 8003f80:	e003      	b.n	8003f8a <_printf_i+0xc6>
 8003f82:	0646      	lsls	r6, r0, #25
 8003f84:	d5fb      	bpl.n	8003f7e <_printf_i+0xba>
 8003f86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f8a:	2e00      	cmp	r6, #0
 8003f8c:	da03      	bge.n	8003f96 <_printf_i+0xd2>
 8003f8e:	232d      	movs	r3, #45	; 0x2d
 8003f90:	4276      	negs	r6, r6
 8003f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f96:	230a      	movs	r3, #10
 8003f98:	4859      	ldr	r0, [pc, #356]	; (8004100 <_printf_i+0x23c>)
 8003f9a:	e012      	b.n	8003fc2 <_printf_i+0xfe>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	6820      	ldr	r0, [r4, #0]
 8003fa0:	1d19      	adds	r1, r3, #4
 8003fa2:	6029      	str	r1, [r5, #0]
 8003fa4:	0605      	lsls	r5, r0, #24
 8003fa6:	d501      	bpl.n	8003fac <_printf_i+0xe8>
 8003fa8:	681e      	ldr	r6, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <_printf_i+0xee>
 8003fac:	0641      	lsls	r1, r0, #25
 8003fae:	d5fb      	bpl.n	8003fa8 <_printf_i+0xe4>
 8003fb0:	881e      	ldrh	r6, [r3, #0]
 8003fb2:	2f6f      	cmp	r7, #111	; 0x6f
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2308      	moveq	r3, #8
 8003fb8:	230a      	movne	r3, #10
 8003fba:	4851      	ldr	r0, [pc, #324]	; (8004100 <_printf_i+0x23c>)
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fc2:	6865      	ldr	r5, [r4, #4]
 8003fc4:	2d00      	cmp	r5, #0
 8003fc6:	bfa8      	it	ge
 8003fc8:	6821      	ldrge	r1, [r4, #0]
 8003fca:	60a5      	str	r5, [r4, #8]
 8003fcc:	bfa4      	itt	ge
 8003fce:	f021 0104 	bicge.w	r1, r1, #4
 8003fd2:	6021      	strge	r1, [r4, #0]
 8003fd4:	b90e      	cbnz	r6, 8003fda <_printf_i+0x116>
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	d04b      	beq.n	8004072 <_printf_i+0x1ae>
 8003fda:	4615      	mov	r5, r2
 8003fdc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fe0:	fb03 6711 	mls	r7, r3, r1, r6
 8003fe4:	5dc7      	ldrb	r7, [r0, r7]
 8003fe6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fea:	4637      	mov	r7, r6
 8003fec:	42bb      	cmp	r3, r7
 8003fee:	460e      	mov	r6, r1
 8003ff0:	d9f4      	bls.n	8003fdc <_printf_i+0x118>
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d10b      	bne.n	800400e <_printf_i+0x14a>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	07de      	lsls	r6, r3, #31
 8003ffa:	d508      	bpl.n	800400e <_printf_i+0x14a>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	6861      	ldr	r1, [r4, #4]
 8004000:	4299      	cmp	r1, r3
 8004002:	bfde      	ittt	le
 8004004:	2330      	movle	r3, #48	; 0x30
 8004006:	f805 3c01 	strble.w	r3, [r5, #-1]
 800400a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800400e:	1b52      	subs	r2, r2, r5
 8004010:	6122      	str	r2, [r4, #16]
 8004012:	464b      	mov	r3, r9
 8004014:	4621      	mov	r1, r4
 8004016:	4640      	mov	r0, r8
 8004018:	f8cd a000 	str.w	sl, [sp]
 800401c:	aa03      	add	r2, sp, #12
 800401e:	f7ff fedf 	bl	8003de0 <_printf_common>
 8004022:	3001      	adds	r0, #1
 8004024:	d14a      	bne.n	80040bc <_printf_i+0x1f8>
 8004026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402a:	b004      	add	sp, #16
 800402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f043 0320 	orr.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	2778      	movs	r7, #120	; 0x78
 800403a:	4832      	ldr	r0, [pc, #200]	; (8004104 <_printf_i+0x240>)
 800403c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	6829      	ldr	r1, [r5, #0]
 8004044:	061f      	lsls	r7, r3, #24
 8004046:	f851 6b04 	ldr.w	r6, [r1], #4
 800404a:	d402      	bmi.n	8004052 <_printf_i+0x18e>
 800404c:	065f      	lsls	r7, r3, #25
 800404e:	bf48      	it	mi
 8004050:	b2b6      	uxthmi	r6, r6
 8004052:	07df      	lsls	r7, r3, #31
 8004054:	bf48      	it	mi
 8004056:	f043 0320 	orrmi.w	r3, r3, #32
 800405a:	6029      	str	r1, [r5, #0]
 800405c:	bf48      	it	mi
 800405e:	6023      	strmi	r3, [r4, #0]
 8004060:	b91e      	cbnz	r6, 800406a <_printf_i+0x1a6>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f023 0320 	bic.w	r3, r3, #32
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	2310      	movs	r3, #16
 800406c:	e7a6      	b.n	8003fbc <_printf_i+0xf8>
 800406e:	4824      	ldr	r0, [pc, #144]	; (8004100 <_printf_i+0x23c>)
 8004070:	e7e4      	b.n	800403c <_printf_i+0x178>
 8004072:	4615      	mov	r5, r2
 8004074:	e7bd      	b.n	8003ff2 <_printf_i+0x12e>
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	6826      	ldr	r6, [r4, #0]
 800407a:	1d18      	adds	r0, r3, #4
 800407c:	6961      	ldr	r1, [r4, #20]
 800407e:	6028      	str	r0, [r5, #0]
 8004080:	0635      	lsls	r5, r6, #24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	d501      	bpl.n	800408a <_printf_i+0x1c6>
 8004086:	6019      	str	r1, [r3, #0]
 8004088:	e002      	b.n	8004090 <_printf_i+0x1cc>
 800408a:	0670      	lsls	r0, r6, #25
 800408c:	d5fb      	bpl.n	8004086 <_printf_i+0x1c2>
 800408e:	8019      	strh	r1, [r3, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	4615      	mov	r5, r2
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	e7bc      	b.n	8004012 <_printf_i+0x14e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	2100      	movs	r1, #0
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	602a      	str	r2, [r5, #0]
 80040a0:	681d      	ldr	r5, [r3, #0]
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	4628      	mov	r0, r5
 80040a6:	f000 f895 	bl	80041d4 <memchr>
 80040aa:	b108      	cbz	r0, 80040b0 <_printf_i+0x1ec>
 80040ac:	1b40      	subs	r0, r0, r5
 80040ae:	6060      	str	r0, [r4, #4]
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	2300      	movs	r3, #0
 80040b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ba:	e7aa      	b.n	8004012 <_printf_i+0x14e>
 80040bc:	462a      	mov	r2, r5
 80040be:	4649      	mov	r1, r9
 80040c0:	4640      	mov	r0, r8
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	47d0      	blx	sl
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0ad      	beq.n	8004026 <_printf_i+0x162>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	079b      	lsls	r3, r3, #30
 80040ce:	d413      	bmi.n	80040f8 <_printf_i+0x234>
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	4298      	cmp	r0, r3
 80040d6:	bfb8      	it	lt
 80040d8:	4618      	movlt	r0, r3
 80040da:	e7a6      	b.n	800402a <_printf_i+0x166>
 80040dc:	2301      	movs	r3, #1
 80040de:	4632      	mov	r2, r6
 80040e0:	4649      	mov	r1, r9
 80040e2:	4640      	mov	r0, r8
 80040e4:	47d0      	blx	sl
 80040e6:	3001      	adds	r0, #1
 80040e8:	d09d      	beq.n	8004026 <_printf_i+0x162>
 80040ea:	3501      	adds	r5, #1
 80040ec:	68e3      	ldr	r3, [r4, #12]
 80040ee:	9903      	ldr	r1, [sp, #12]
 80040f0:	1a5b      	subs	r3, r3, r1
 80040f2:	42ab      	cmp	r3, r5
 80040f4:	dcf2      	bgt.n	80040dc <_printf_i+0x218>
 80040f6:	e7eb      	b.n	80040d0 <_printf_i+0x20c>
 80040f8:	2500      	movs	r5, #0
 80040fa:	f104 0619 	add.w	r6, r4, #25
 80040fe:	e7f5      	b.n	80040ec <_printf_i+0x228>
 8004100:	0800494d 	.word	0x0800494d
 8004104:	0800495e 	.word	0x0800495e

08004108 <__malloc_lock>:
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <__malloc_lock+0x8>)
 800410a:	f7ff bc6f 	b.w	80039ec <__retarget_lock_acquire_recursive>
 800410e:	bf00      	nop
 8004110:	20000320 	.word	0x20000320

08004114 <__malloc_unlock>:
 8004114:	4801      	ldr	r0, [pc, #4]	; (800411c <__malloc_unlock+0x8>)
 8004116:	f7ff bc6a 	b.w	80039ee <__retarget_lock_release_recursive>
 800411a:	bf00      	nop
 800411c:	20000320 	.word	0x20000320

08004120 <_realloc_r>:
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	4680      	mov	r8, r0
 8004126:	4614      	mov	r4, r2
 8004128:	460e      	mov	r6, r1
 800412a:	b921      	cbnz	r1, 8004136 <_realloc_r+0x16>
 800412c:	4611      	mov	r1, r2
 800412e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	f7ff bdd5 	b.w	8003ce0 <_malloc_r>
 8004136:	b92a      	cbnz	r2, 8004144 <_realloc_r+0x24>
 8004138:	f000 f868 	bl	800420c <_free_r>
 800413c:	4625      	mov	r5, r4
 800413e:	4628      	mov	r0, r5
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	f000 f8aa 	bl	800429c <_malloc_usable_size_r>
 8004148:	4284      	cmp	r4, r0
 800414a:	4607      	mov	r7, r0
 800414c:	d802      	bhi.n	8004154 <_realloc_r+0x34>
 800414e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004152:	d812      	bhi.n	800417a <_realloc_r+0x5a>
 8004154:	4621      	mov	r1, r4
 8004156:	4640      	mov	r0, r8
 8004158:	f7ff fdc2 	bl	8003ce0 <_malloc_r>
 800415c:	4605      	mov	r5, r0
 800415e:	2800      	cmp	r0, #0
 8004160:	d0ed      	beq.n	800413e <_realloc_r+0x1e>
 8004162:	42bc      	cmp	r4, r7
 8004164:	4622      	mov	r2, r4
 8004166:	4631      	mov	r1, r6
 8004168:	bf28      	it	cs
 800416a:	463a      	movcs	r2, r7
 800416c:	f000 f840 	bl	80041f0 <memcpy>
 8004170:	4631      	mov	r1, r6
 8004172:	4640      	mov	r0, r8
 8004174:	f000 f84a 	bl	800420c <_free_r>
 8004178:	e7e1      	b.n	800413e <_realloc_r+0x1e>
 800417a:	4635      	mov	r5, r6
 800417c:	e7df      	b.n	800413e <_realloc_r+0x1e>

0800417e <memmove>:
 800417e:	4288      	cmp	r0, r1
 8004180:	b510      	push	{r4, lr}
 8004182:	eb01 0402 	add.w	r4, r1, r2
 8004186:	d902      	bls.n	800418e <memmove+0x10>
 8004188:	4284      	cmp	r4, r0
 800418a:	4623      	mov	r3, r4
 800418c:	d807      	bhi.n	800419e <memmove+0x20>
 800418e:	1e43      	subs	r3, r0, #1
 8004190:	42a1      	cmp	r1, r4
 8004192:	d008      	beq.n	80041a6 <memmove+0x28>
 8004194:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004198:	f803 2f01 	strb.w	r2, [r3, #1]!
 800419c:	e7f8      	b.n	8004190 <memmove+0x12>
 800419e:	4601      	mov	r1, r0
 80041a0:	4402      	add	r2, r0
 80041a2:	428a      	cmp	r2, r1
 80041a4:	d100      	bne.n	80041a8 <memmove+0x2a>
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041b0:	e7f7      	b.n	80041a2 <memmove+0x24>
	...

080041b4 <_sbrk_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	2300      	movs	r3, #0
 80041b8:	4d05      	ldr	r5, [pc, #20]	; (80041d0 <_sbrk_r+0x1c>)
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	f7fd f840 	bl	8001244 <_sbrk>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_sbrk_r+0x1a>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_sbrk_r+0x1a>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	2000032c 	.word	0x2000032c

080041d4 <memchr>:
 80041d4:	4603      	mov	r3, r0
 80041d6:	b510      	push	{r4, lr}
 80041d8:	b2c9      	uxtb	r1, r1
 80041da:	4402      	add	r2, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	d101      	bne.n	80041e6 <memchr+0x12>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e003      	b.n	80041ee <memchr+0x1a>
 80041e6:	7804      	ldrb	r4, [r0, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	428c      	cmp	r4, r1
 80041ec:	d1f6      	bne.n	80041dc <memchr+0x8>
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <memcpy>:
 80041f0:	440a      	add	r2, r1
 80041f2:	4291      	cmp	r1, r2
 80041f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041f8:	d100      	bne.n	80041fc <memcpy+0xc>
 80041fa:	4770      	bx	lr
 80041fc:	b510      	push	{r4, lr}
 80041fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004202:	4291      	cmp	r1, r2
 8004204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004208:	d1f9      	bne.n	80041fe <memcpy+0xe>
 800420a:	bd10      	pop	{r4, pc}

0800420c <_free_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4605      	mov	r5, r0
 8004210:	2900      	cmp	r1, #0
 8004212:	d040      	beq.n	8004296 <_free_r+0x8a>
 8004214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004218:	1f0c      	subs	r4, r1, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfb8      	it	lt
 800421e:	18e4      	addlt	r4, r4, r3
 8004220:	f7ff ff72 	bl	8004108 <__malloc_lock>
 8004224:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <_free_r+0x8c>)
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	b933      	cbnz	r3, 8004238 <_free_r+0x2c>
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	6014      	str	r4, [r2, #0]
 800422e:	4628      	mov	r0, r5
 8004230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004234:	f7ff bf6e 	b.w	8004114 <__malloc_unlock>
 8004238:	42a3      	cmp	r3, r4
 800423a:	d908      	bls.n	800424e <_free_r+0x42>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	1821      	adds	r1, r4, r0
 8004240:	428b      	cmp	r3, r1
 8004242:	bf01      	itttt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	1809      	addeq	r1, r1, r0
 800424a:	6021      	streq	r1, [r4, #0]
 800424c:	e7ed      	b.n	800422a <_free_r+0x1e>
 800424e:	461a      	mov	r2, r3
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	b10b      	cbz	r3, 8004258 <_free_r+0x4c>
 8004254:	42a3      	cmp	r3, r4
 8004256:	d9fa      	bls.n	800424e <_free_r+0x42>
 8004258:	6811      	ldr	r1, [r2, #0]
 800425a:	1850      	adds	r0, r2, r1
 800425c:	42a0      	cmp	r0, r4
 800425e:	d10b      	bne.n	8004278 <_free_r+0x6c>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	4401      	add	r1, r0
 8004264:	1850      	adds	r0, r2, r1
 8004266:	4283      	cmp	r3, r0
 8004268:	6011      	str	r1, [r2, #0]
 800426a:	d1e0      	bne.n	800422e <_free_r+0x22>
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4408      	add	r0, r1
 8004272:	6010      	str	r0, [r2, #0]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	e7da      	b.n	800422e <_free_r+0x22>
 8004278:	d902      	bls.n	8004280 <_free_r+0x74>
 800427a:	230c      	movs	r3, #12
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	e7d6      	b.n	800422e <_free_r+0x22>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	1821      	adds	r1, r4, r0
 8004284:	428b      	cmp	r3, r1
 8004286:	bf01      	itttt	eq
 8004288:	6819      	ldreq	r1, [r3, #0]
 800428a:	685b      	ldreq	r3, [r3, #4]
 800428c:	1809      	addeq	r1, r1, r0
 800428e:	6021      	streq	r1, [r4, #0]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	6054      	str	r4, [r2, #4]
 8004294:	e7cb      	b.n	800422e <_free_r+0x22>
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000324 	.word	0x20000324

0800429c <_malloc_usable_size_r>:
 800429c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a0:	1f18      	subs	r0, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfbc      	itt	lt
 80042a6:	580b      	ldrlt	r3, [r1, r0]
 80042a8:	18c0      	addlt	r0, r0, r3
 80042aa:	4770      	bx	lr

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
