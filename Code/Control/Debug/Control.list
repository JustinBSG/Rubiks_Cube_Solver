
Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000536c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005be8  08005be8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be8  08005be8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08005c4c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005c4c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae83  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002265  00000000  00000000  0002af4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a8d5  00000000  00000000  0002ea09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f156  00000000  00000000  000492de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009987e  00000000  00000000  00058434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be8  00000000  00000000  000f1cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005538 	.word	0x08005538

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08005538 	.word	0x08005538

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f003 fd37 	bl	8003d30 <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 ff93 	bl	80011f2 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000078 	.word	0x20000078
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f002 ff4c 	bl	80031d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f002 ff3f 	bl	80031d8 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000c0 	.word	0x200000c0
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <MX_GPIO_Init+0x118>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a3f      	ldr	r2, [pc, #252]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a39      	ldr	r2, [pc, #228]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0x118>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0x118>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <MX_GPIO_Init+0x11c>)
 800041c:	f003 f887 	bl	800352e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000426:	f003 f882 	bl	800352e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481b      	ldr	r0, [pc, #108]	; (80004ac <MX_GPIO_Init+0x124>)
 8000440:	f002 feca 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044c:	2302      	movs	r3, #2
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000458:	f002 febe 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x11c>)
 8000476:	f002 feaf 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000492:	f002 fea1 	bl	80031d8 <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010800 	.word	0x40010800

080004b4 <Delay>:

void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	e002      	b.n	80004c4 <Delay+0x10>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f9      	bne.n	80004be <Delay+0xa>
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f829 	bl	8000534 <LCD_BackLed_Control>
	LCD_Rst();
 80004e2:	f000 f80f 	bl	8000504 <LCD_Rst>
	LCD_REG_Config();
 80004e6:	f000 f85f 	bl	80005a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004f4:	22f0      	movs	r2, #240	; 0xf0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9e6 	bl	80008ca <LCD_Clear>
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <LCD_Rst+0x28>)
 800050e:	f003 f80e 	bl	800352e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <LCD_Rst+0x2c>)
 8000514:	f7ff ffce 	bl	80004b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LCD_Rst+0x28>)
 800051e:	f003 f806 	bl	800352e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <LCD_Rst+0x2c>)
 8000524:	f7ff ffc6 	bl	80004b4 <Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40011800 	.word	0x40011800
 8000530:	0002bffc 	.word	0x0002bffc

08000534 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <LCD_BackLed_Control+0x34>)
 800054c:	f002 ffef 	bl	800352e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000550:	e005      	b.n	800055e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <LCD_BackLed_Control+0x34>)
 800055a:	f002 ffe8 	bl	800352e <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40011400 	.word	0x40011400

0800056c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000576:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	8013      	strh	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LCD_Write_Data+0x1c>)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	8013      	strh	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	60020000 	.word	0x60020000

080005a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005ac:	20cf      	movs	r0, #207	; 0xcf
 80005ae:	f7ff ffdd 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffe8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005b8:	2081      	movs	r0, #129	; 0x81
 80005ba:	f7ff ffe5 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005be:	2030      	movs	r0, #48	; 0x30
 80005c0:	f7ff ffe2 	bl	8000588 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005c4:	20ed      	movs	r0, #237	; 0xed
 80005c6:	f7ff ffd1 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f7ff ffdc 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ffd9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005d6:	2012      	movs	r0, #18
 80005d8:	f7ff ffd6 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005dc:	2081      	movs	r0, #129	; 0x81
 80005de:	f7ff ffd3 	bl	8000588 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005e2:	20e8      	movs	r0, #232	; 0xe8
 80005e4:	f7ff ffc2 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005e8:	2085      	movs	r0, #133	; 0x85
 80005ea:	f7ff ffcd 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005ee:	2010      	movs	r0, #16
 80005f0:	f7ff ffca 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f7ff ffc7 	bl	8000588 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80005fa:	20cb      	movs	r0, #203	; 0xcb
 80005fc:	f7ff ffb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000600:	2039      	movs	r0, #57	; 0x39
 8000602:	f7ff ffc1 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000606:	202c      	movs	r0, #44	; 0x2c
 8000608:	f7ff ffbe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffbb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000612:	2034      	movs	r0, #52	; 0x34
 8000614:	f7ff ffb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ffb5 	bl	8000588 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800061e:	20f7      	movs	r0, #247	; 0xf7
 8000620:	f7ff ffa4 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000624:	2020      	movs	r0, #32
 8000626:	f7ff ffaf 	bl	8000588 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800062a:	20ea      	movs	r0, #234	; 0xea
 800062c:	f7ff ff9e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffa9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffa6 	bl	8000588 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800063c:	20b1      	movs	r0, #177	; 0xb1
 800063e:	f7ff ff95 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffa0 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000648:	201b      	movs	r0, #27
 800064a:	f7ff ff9d 	bl	8000588 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f7ff ff8c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000654:	200a      	movs	r0, #10
 8000656:	f7ff ff97 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800065a:	20a2      	movs	r0, #162	; 0xa2
 800065c:	f7ff ff94 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000660:	20c0      	movs	r0, #192	; 0xc0
 8000662:	f7ff ff83 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000666:	2035      	movs	r0, #53	; 0x35
 8000668:	f7ff ff8e 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800066c:	20c1      	movs	r0, #193	; 0xc1
 800066e:	f7ff ff7d 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000672:	2011      	movs	r0, #17
 8000674:	f7ff ff88 	bl	8000588 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000678:	20c5      	movs	r0, #197	; 0xc5
 800067a:	f7ff ff77 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f7ff ff82 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f7ff ff7f 	bl	8000588 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800068a:	20c7      	movs	r0, #199	; 0xc7
 800068c:	f7ff ff6e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000690:	20a2      	movs	r0, #162	; 0xa2
 8000692:	f7ff ff79 	bl	8000588 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000696:	20f2      	movs	r0, #242	; 0xf2
 8000698:	f7ff ff68 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff73 	bl	8000588 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006a2:	2026      	movs	r0, #38	; 0x26
 80006a4:	f7ff ff62 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff6d 	bl	8000588 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006ae:	20e0      	movs	r0, #224	; 0xe0
 80006b0:	f7ff ff5c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006b4:	200f      	movs	r0, #15
 80006b6:	f7ff ff67 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ba:	2026      	movs	r0, #38	; 0x26
 80006bc:	f7ff ff64 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006c0:	2024      	movs	r0, #36	; 0x24
 80006c2:	f7ff ff61 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006c6:	200b      	movs	r0, #11
 80006c8:	f7ff ff5e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff5b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006d2:	2009      	movs	r0, #9
 80006d4:	f7ff ff58 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006d8:	2054      	movs	r0, #84	; 0x54
 80006da:	f7ff ff55 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006de:	20a8      	movs	r0, #168	; 0xa8
 80006e0:	f7ff ff52 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006e4:	2046      	movs	r0, #70	; 0x46
 80006e6:	f7ff ff4f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ff4c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80006f0:	2017      	movs	r0, #23
 80006f2:	f7ff ff49 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006f6:	2009      	movs	r0, #9
 80006f8:	f7ff ff46 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff ff43 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000702:	2007      	movs	r0, #7
 8000704:	f7ff ff40 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff3d 	bl	8000588 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800070e:	20e1      	movs	r0, #225	; 0xe1
 8000710:	f7ff ff2c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800071a:	2019      	movs	r0, #25
 800071c:	f7ff ff34 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff ff31 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff2e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff ff2b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff28 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000738:	202a      	movs	r0, #42	; 0x2a
 800073a:	f7ff ff25 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800073e:	2047      	movs	r0, #71	; 0x47
 8000740:	f7ff ff22 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000744:	2039      	movs	r0, #57	; 0x39
 8000746:	f7ff ff1f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff ff1c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff ff19 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000756:	2006      	movs	r0, #6
 8000758:	f7ff ff16 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800075c:	2030      	movs	r0, #48	; 0x30
 800075e:	f7ff ff13 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000762:	2038      	movs	r0, #56	; 0x38
 8000764:	f7ff ff10 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000768:	200f      	movs	r0, #15
 800076a:	f7ff ff0d 	bl	8000588 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fefc 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f7ff ff07 	bl	8000588 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fef6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff01 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fefe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fefb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000792:	20ef      	movs	r0, #239	; 0xef
 8000794:	f7ff fef8 	bl	8000588 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000798:	202b      	movs	r0, #43	; 0x2b
 800079a:	f7ff fee7 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fef2 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff feef 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff feec 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007b0:	203f      	movs	r0, #63	; 0x3f
 80007b2:	f7ff fee9 	bl	8000588 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007b6:	203a      	movs	r0, #58	; 0x3a
 80007b8:	f7ff fed8 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007bc:	2055      	movs	r0, #85	; 0x55
 80007be:	f7ff fee3 	bl	8000588 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff fed2 	bl	800056c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <LCD_REG_Config+0x230>)
 80007ca:	f7ff fe73 	bl	80004b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007ce:	2029      	movs	r0, #41	; 0x29
 80007d0:	f7ff fecc 	bl	800056c <LCD_Write_Cmd>
	
	
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	0002bffc 	.word	0x0002bffc

080007dc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80007fa:	202a      	movs	r0, #42	; 0x2a
 80007fc:	f7ff feb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b29b      	uxth	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff febe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	4413      	add	r3, r2
 800081e:	3b01      	subs	r3, #1
 8000820:	121b      	asrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff feaf 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	4413      	add	r3, r2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3b01      	subs	r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	b29b      	uxth	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fea4 	bl	8000588 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fe93 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe9b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe95 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800085e:	88ba      	ldrh	r2, [r7, #4]
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	3b01      	subs	r3, #1
 8000866:	121b      	asrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe8c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	883b      	ldrh	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe81 	bl	8000588 <LCD_Write_Data>
	
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f7ff fe64 	bl	800056c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e006      	b.n	80008b8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe6b 	bl	8000588 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3f4      	bcc.n	80008aa <LCD_FillColor+0x1c>
		
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	4623      	mov	r3, r4
 80008da:	80fb      	strh	r3, [r7, #6]
 80008dc:	4603      	mov	r3, r0
 80008de:	80bb      	strh	r3, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	807b      	strh	r3, [r7, #2]
 80008e4:	4613      	mov	r3, r2
 80008e6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	887a      	ldrh	r2, [r7, #2]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88f8      	ldrh	r0, [r7, #6]
 80008f0:	f7ff ff74 	bl	80007dc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	883a      	ldrh	r2, [r7, #0]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	8b3b      	ldrh	r3, [r7, #24]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f7ff ffc3 	bl	800088e <LCD_FillColor>
	
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	460b      	mov	r3, r1
 800091c:	80bb      	strh	r3, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	3b20      	subs	r3, #32
 8000926:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000928:	88b9      	ldrh	r1, [r7, #4]
 800092a:	88f8      	ldrh	r0, [r7, #6]
 800092c:	2310      	movs	r3, #16
 800092e:	2208      	movs	r2, #8
 8000930:	f7ff ff54 	bl	80007dc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff fe19 	bl	800056c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800093a:	2300      	movs	r3, #0
 800093c:	73bb      	strb	r3, [r7, #14]
 800093e:	e023      	b.n	8000988 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000940:	7b3a      	ldrb	r2, [r7, #12]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	4914      	ldr	r1, [pc, #80]	; (8000998 <LCD_DrawChar+0x88>)
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	440a      	add	r2, r1
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000950:	2300      	movs	r3, #0
 8000952:	737b      	strb	r3, [r7, #13]
 8000954:	e012      	b.n	800097c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d003      	beq.n	8000968 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000960:	201f      	movs	r0, #31
 8000962:	f7ff fe11 	bl	8000588 <LCD_Write_Data>
 8000966:	e003      	b.n	8000970 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000968:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800096c:	f7ff fe0c 	bl	8000588 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	3301      	adds	r3, #1
 800097a:	737b      	strb	r3, [r7, #13]
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	2b07      	cmp	r3, #7
 8000980:	d9e9      	bls.n	8000956 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	3301      	adds	r3, #1
 8000986:	73bb      	strb	r3, [r7, #14]
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d9d8      	bls.n	8000940 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	080055b4 	.word	0x080055b4

0800099c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	603a      	str	r2, [r7, #0]
 80009a6:	80fb      	strh	r3, [r7, #6]
 80009a8:	460b      	mov	r3, r1
 80009aa:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80009ac:	e01c      	b.n	80009e8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2be8      	cmp	r3, #232	; 0xe8
 80009b2:	d904      	bls.n	80009be <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009b4:	2300      	movs	r3, #0
 80009b6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	3310      	adds	r3, #16
 80009bc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80009c4:	d903      	bls.n	80009ce <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009c6:	2300      	movs	r3, #0
 80009c8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	88b9      	ldrh	r1, [r7, #4]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff9a 	bl	8000910 <LCD_DrawChar>
		
		pStr ++;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	3308      	adds	r3, #8
 80009e6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1de      	bne.n	80009ae <LCD_DrawString+0x12>
		
	}
	
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <display_servo_info>:
			height++;
		}
	}
}

void display_servo_info(uint32_t *last_tick) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09a      	sub	sp, #104	; 0x68
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - (*last_tick) > 500) {
 8000a04:	f002 fad6 	bl	8002fb4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a14:	d97d      	bls.n	8000b12 <display_servo_info+0x116>
		char servo_east_back[10];
		char servo_south_front[10];
		char servo_south_back[10];
		char servo_west_front[10];
		char servo_west_back[10];
		sprintf(servo_north_front, "N_F: %d", TIM3->CCR1);
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <display_servo_info+0x120>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a1e:	4940      	ldr	r1, [pc, #256]	; (8000b20 <display_servo_info+0x124>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 f8d7 	bl	8004bd4 <siprintf>
		sprintf(servo_north_back, "N_B: %d", TIM4->CCR1);
 8000a26:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <display_servo_info+0x128>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a2e:	493e      	ldr	r1, [pc, #248]	; (8000b28 <display_servo_info+0x12c>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 f8cf 	bl	8004bd4 <siprintf>
		sprintf(servo_east_front, "E_F: %d", TIM3->CCR2);
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <display_servo_info+0x120>)
 8000a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	493b      	ldr	r1, [pc, #236]	; (8000b2c <display_servo_info+0x130>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f8c7 	bl	8004bd4 <siprintf>
		sprintf(servo_east_back, "E_B: %d", TIM2->CCR3);
 8000a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a50:	4937      	ldr	r1, [pc, #220]	; (8000b30 <display_servo_info+0x134>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f004 f8be 	bl	8004bd4 <siprintf>
		sprintf(servo_south_front, "S_F: %d", TIM3->CCR3);
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <display_servo_info+0x120>)
 8000a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4934      	ldr	r1, [pc, #208]	; (8000b34 <display_servo_info+0x138>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 f8b6 	bl	8004bd4 <siprintf>
		sprintf(servo_south_back, "S_B: %d", TIM4->CCR3);
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <display_servo_info+0x128>)
 8000a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4931      	ldr	r1, [pc, #196]	; (8000b38 <display_servo_info+0x13c>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 f8ae 	bl	8004bd4 <siprintf>
		sprintf(servo_west_front, "W_F: %d", TIM3->CCR4);
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <display_servo_info+0x120>)
 8000a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	492e      	ldr	r1, [pc, #184]	; (8000b3c <display_servo_info+0x140>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 f8a6 	bl	8004bd4 <siprintf>
		sprintf(servo_west_back, "W_B: %d", TIM4->CCR4);
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <display_servo_info+0x128>)
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	492b      	ldr	r1, [pc, #172]	; (8000b40 <display_servo_info+0x144>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 f89e 	bl	8004bd4 <siprintf>
		LCD_DrawString(0, HEIGHT_EN_CHAR*0, servo_north_front);
 8000a98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff ff7b 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*1, servo_north_back);
 8000aa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2110      	movs	r1, #16
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff74 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*2, servo_east_front);
 8000ab4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2120      	movs	r1, #32
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ff6d 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*3, servo_east_back);
 8000ac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2130      	movs	r1, #48	; 0x30
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff ff66 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*4, servo_south_front);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ff5f 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*5, servo_south_back);
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2150      	movs	r1, #80	; 0x50
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ff58 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*6, servo_west_front);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	461a      	mov	r2, r3
 8000af2:	2160      	movs	r1, #96	; 0x60
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff ff51 	bl	800099c <LCD_DrawString>
		LCD_DrawString(0, HEIGHT_EN_CHAR*7, servo_west_back);
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	461a      	mov	r2, r3
 8000b00:	2170      	movs	r1, #112	; 0x70
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff4a 	bl	800099c <LCD_DrawString>
		(*last_tick) = HAL_GetTick();
 8000b08:	f002 fa54 	bl	8002fb4 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
	}
}
 8000b12:	bf00      	nop
 8000b14:	3768      	adds	r7, #104	; 0x68
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40000400 	.word	0x40000400
 8000b20:	08005550 	.word	0x08005550
 8000b24:	40000800 	.word	0x40000800
 8000b28:	08005558 	.word	0x08005558
 8000b2c:	08005560 	.word	0x08005560
 8000b30:	08005568 	.word	0x08005568
 8000b34:	08005570 	.word	0x08005570
 8000b38:	08005578 	.word	0x08005578
 8000b3c:	08005580 	.word	0x08005580
 8000b40:	08005588 	.word	0x08005588

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f002 f9db 	bl	8002f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 fb0b 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f7ff fc19 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000b56:	f7ff fb65 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
 8000b5a:	f001 ffb9 	bl	8002ad0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b5e:	f002 f84f 	bl	8002c00 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000b62:	f001 ff3f 	bl	80029e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b66:	2100      	movs	r1, #0
 8000b68:	48dd      	ldr	r0, [pc, #884]	; (8000ee0 <main+0x39c>)
 8000b6a:	f003 f9d5 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b6e:	2108      	movs	r1, #8
 8000b70:	48dc      	ldr	r0, [pc, #880]	; (8000ee4 <main+0x3a0>)
 8000b72:	f003 f9d1 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b76:	2108      	movs	r1, #8
 8000b78:	48d9      	ldr	r0, [pc, #868]	; (8000ee0 <main+0x39c>)
 8000b7a:	f003 f9cd 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b7e:	210c      	movs	r1, #12
 8000b80:	48d7      	ldr	r0, [pc, #860]	; (8000ee0 <main+0x39c>)
 8000b82:	f003 f9c9 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b86:	2100      	movs	r1, #0
 8000b88:	48d7      	ldr	r0, [pc, #860]	; (8000ee8 <main+0x3a4>)
 8000b8a:	f003 f9c5 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b8e:	2104      	movs	r1, #4
 8000b90:	48d5      	ldr	r0, [pc, #852]	; (8000ee8 <main+0x3a4>)
 8000b92:	f003 f9c1 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b96:	2108      	movs	r1, #8
 8000b98:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <main+0x3a4>)
 8000b9a:	f003 f9bd 	bl	8003f18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	48d1      	ldr	r0, [pc, #836]	; (8000ee8 <main+0x3a4>)
 8000ba2:	f003 f9b9 	bl	8003f18 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000ba6:	f7ff fc96 	bl	80004d6 <LCD_INIT>
  uint8_t flag = 4, start = 0;
 8000baa:	2304      	movs	r3, #4
 8000bac:	77fb      	strb	r3, [r7, #31]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	77bb      	strb	r3, [r7, #30]
  uint32_t last_tick = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char string[20];
	  sprintf(string, "It is now flag %d.", flag);
 8000bb6:	7ffa      	ldrb	r2, [r7, #31]
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	49cc      	ldr	r1, [pc, #816]	; (8000eec <main+0x3a8>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 f809 	bl	8004bd4 <siprintf>
	  LCD_DrawString(0, HEIGHT_EN_CHAR*8, string);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee7 	bl	800099c <LCD_DrawString>
	  display_servo_info(&last_tick);
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff12 	bl	80009fc <display_servo_info>
	  if (start <= 1)
 8000bd8:	7fbb      	ldrb	r3, [r7, #30]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d805      	bhi.n	8000bea <main+0xa6>
		  insert_cube(&start);
 8000bde:	f107 031e 	add.w	r3, r7, #30
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fcda 	bl	800259c <insert_cube>
 8000be8:	e7e5      	b.n	8000bb6 <main+0x72>
	  else {
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET) {
 8000bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bee:	48c0      	ldr	r0, [pc, #768]	; (8000ef0 <main+0x3ac>)
 8000bf0:	f002 fc86 	bl	8003500 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d1dd      	bne.n	8000bb6 <main+0x72>
			  switch (flag) {
 8000bfa:	7ffb      	ldrb	r3, [r7, #31]
 8000bfc:	2b64      	cmp	r3, #100	; 0x64
 8000bfe:	f200 82ab 	bhi.w	8001158 <main+0x614>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <main+0xc4>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000d9d 	.word	0x08000d9d
 8000c0c:	08000dc1 	.word	0x08000dc1
 8000c10:	08000de5 	.word	0x08000de5
 8000c14:	08000e09 	.word	0x08000e09
 8000c18:	08000e2d 	.word	0x08000e2d
 8000c1c:	08000e51 	.word	0x08000e51
 8000c20:	08000e75 	.word	0x08000e75
 8000c24:	08000e99 	.word	0x08000e99
 8000c28:	08000ebd 	.word	0x08000ebd
 8000c2c:	08000ef5 	.word	0x08000ef5
 8000c30:	08000f19 	.word	0x08000f19
 8000c34:	08000f3d 	.word	0x08000f3d
 8000c38:	08000f61 	.word	0x08000f61
 8000c3c:	08000f85 	.word	0x08000f85
 8000c40:	08000fa9 	.word	0x08000fa9
 8000c44:	08000fcd 	.word	0x08000fcd
 8000c48:	08000ff1 	.word	0x08000ff1
 8000c4c:	08001015 	.word	0x08001015
 8000c50:	08001039 	.word	0x08001039
 8000c54:	0800105d 	.word	0x0800105d
 8000c58:	08001081 	.word	0x08001081
 8000c5c:	080010a5 	.word	0x080010a5
 8000c60:	080010c9 	.word	0x080010c9
 8000c64:	080010ed 	.word	0x080010ed
 8000c68:	08001159 	.word	0x08001159
 8000c6c:	08001159 	.word	0x08001159
 8000c70:	08001159 	.word	0x08001159
 8000c74:	08001159 	.word	0x08001159
 8000c78:	08001159 	.word	0x08001159
 8000c7c:	08001159 	.word	0x08001159
 8000c80:	08001159 	.word	0x08001159
 8000c84:	08001159 	.word	0x08001159
 8000c88:	08001159 	.word	0x08001159
 8000c8c:	08001159 	.word	0x08001159
 8000c90:	08001159 	.word	0x08001159
 8000c94:	08001159 	.word	0x08001159
 8000c98:	08001159 	.word	0x08001159
 8000c9c:	08001159 	.word	0x08001159
 8000ca0:	08001159 	.word	0x08001159
 8000ca4:	08001159 	.word	0x08001159
 8000ca8:	08001159 	.word	0x08001159
 8000cac:	08001159 	.word	0x08001159
 8000cb0:	08001159 	.word	0x08001159
 8000cb4:	08001159 	.word	0x08001159
 8000cb8:	08001159 	.word	0x08001159
 8000cbc:	08001159 	.word	0x08001159
 8000cc0:	08001159 	.word	0x08001159
 8000cc4:	08001159 	.word	0x08001159
 8000cc8:	08001159 	.word	0x08001159
 8000ccc:	08001159 	.word	0x08001159
 8000cd0:	08001159 	.word	0x08001159
 8000cd4:	08001159 	.word	0x08001159
 8000cd8:	08001159 	.word	0x08001159
 8000cdc:	08001159 	.word	0x08001159
 8000ce0:	08001159 	.word	0x08001159
 8000ce4:	08001159 	.word	0x08001159
 8000ce8:	08001159 	.word	0x08001159
 8000cec:	08001159 	.word	0x08001159
 8000cf0:	08001159 	.word	0x08001159
 8000cf4:	08001159 	.word	0x08001159
 8000cf8:	08001159 	.word	0x08001159
 8000cfc:	08001159 	.word	0x08001159
 8000d00:	08001159 	.word	0x08001159
 8000d04:	08001159 	.word	0x08001159
 8000d08:	08001159 	.word	0x08001159
 8000d0c:	08001159 	.word	0x08001159
 8000d10:	08001159 	.word	0x08001159
 8000d14:	08001159 	.word	0x08001159
 8000d18:	08001159 	.word	0x08001159
 8000d1c:	08001159 	.word	0x08001159
 8000d20:	08001159 	.word	0x08001159
 8000d24:	08001159 	.word	0x08001159
 8000d28:	08001159 	.word	0x08001159
 8000d2c:	08001159 	.word	0x08001159
 8000d30:	08001159 	.word	0x08001159
 8000d34:	08001159 	.word	0x08001159
 8000d38:	08001159 	.word	0x08001159
 8000d3c:	08001159 	.word	0x08001159
 8000d40:	08001159 	.word	0x08001159
 8000d44:	08001159 	.word	0x08001159
 8000d48:	08001159 	.word	0x08001159
 8000d4c:	08001159 	.word	0x08001159
 8000d50:	08001159 	.word	0x08001159
 8000d54:	08001159 	.word	0x08001159
 8000d58:	08001159 	.word	0x08001159
 8000d5c:	08001159 	.word	0x08001159
 8000d60:	08001159 	.word	0x08001159
 8000d64:	08001159 	.word	0x08001159
 8000d68:	08001159 	.word	0x08001159
 8000d6c:	08001159 	.word	0x08001159
 8000d70:	08001159 	.word	0x08001159
 8000d74:	08001159 	.word	0x08001159
 8000d78:	08001159 	.word	0x08001159
 8000d7c:	08001159 	.word	0x08001159
 8000d80:	08001159 	.word	0x08001159
 8000d84:	08001159 	.word	0x08001159
 8000d88:	08001159 	.word	0x08001159
 8000d8c:	08001159 	.word	0x08001159
 8000d90:	08001159 	.word	0x08001159
 8000d94:	08001159 	.word	0x08001159
 8000d98:	08001115 	.word	0x08001115
			  	  case 0:
			  		  movement_F();
 8000d9c:	f000 fa2e 	bl	80011fc <movement_F>
			  		  movement_aF();
 8000da0:	f000 fa4c 	bl	800123c <movement_aF>
			  		  flag++;
 8000da4:	7ffb      	ldrb	r3, [r7, #31]
 8000da6:	3301      	adds	r3, #1
 8000da8:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000db4:	22f0      	movs	r2, #240	; 0xf0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd86 	bl	80008ca <LCD_Clear>
			  		  break;
 8000dbe:	e1cd      	b.n	800115c <main+0x618>
			  	  case 1:
			  		  movement_R();
 8000dc0:	f000 fa5c 	bl	800127c <movement_R>
					  movement_aR();
 8000dc4:	f000 fa7a 	bl	80012bc <movement_aR>
					  flag++;
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dd8:	22f0      	movs	r2, #240	; 0xf0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fd74 	bl	80008ca <LCD_Clear>
					  break;
 8000de2:	e1bb      	b.n	800115c <main+0x618>
			  	  case 2:
			  		  movement_L();
 8000de4:	f000 fa8a 	bl	80012fc <movement_L>
					  movement_aL();
 8000de8:	f000 faa8 	bl	800133c <movement_aL>
					  flag++;
 8000dec:	7ffb      	ldrb	r3, [r7, #31]
 8000dee:	3301      	adds	r3, #1
 8000df0:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dfc:	22f0      	movs	r2, #240	; 0xf0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fd62 	bl	80008ca <LCD_Clear>
					  break;
 8000e06:	e1a9      	b.n	800115c <main+0x618>
			  	  case 3:
			  		  movement_B();
 8000e08:	f000 fab8 	bl	800137c <movement_B>
					  movement_aB();
 8000e0c:	f000 fad6 	bl	80013bc <movement_aB>
					  flag++;
 8000e10:	7ffb      	ldrb	r3, [r7, #31]
 8000e12:	3301      	adds	r3, #1
 8000e14:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e20:	22f0      	movs	r2, #240	; 0xf0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fd50 	bl	80008ca <LCD_Clear>
					  break;
 8000e2a:	e197      	b.n	800115c <main+0x618>
			  	  case 4:
			  		  movement_U();
 8000e2c:	f000 fae6 	bl	80013fc <movement_U>
					  movement_aU();
 8000e30:	f000 fb6a 	bl	8001508 <movement_aU>
					  flag++;
 8000e34:	7ffb      	ldrb	r3, [r7, #31]
 8000e36:	3301      	adds	r3, #1
 8000e38:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e44:	22f0      	movs	r2, #240	; 0xf0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fd3e 	bl	80008ca <LCD_Clear>
					  break;
 8000e4e:	e185      	b.n	800115c <main+0x618>
			  	  case 5:
			  		  movement_D();
 8000e50:	f000 fbe0 	bl	8001614 <movement_D>
					  movement_aD();
 8000e54:	f000 fc70 	bl	8001738 <movement_aD>
					  flag++;
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e68:	22f0      	movs	r2, #240	; 0xf0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd2c 	bl	80008ca <LCD_Clear>
					  break;
 8000e72:	e173      	b.n	800115c <main+0x618>
			  	  case 6:
			  		  movement_X();
 8000e74:	f001 f936 	bl	80020e4 <movement_X>
					  movement_aX();
 8000e78:	f001 f97a 	bl	8002170 <movement_aX>
					  flag++;
 8000e7c:	7ffb      	ldrb	r3, [r7, #31]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e8c:	22f0      	movs	r2, #240	; 0xf0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fd1a 	bl	80008ca <LCD_Clear>
					  break;
 8000e96:	e161      	b.n	800115c <main+0x618>
			  	  case 7:
			  		  movement_Y();
 8000e98:	f001 f9b0 	bl	80021fc <movement_Y>
					  movement_aY();
 8000e9c:	f001 f9b8 	bl	8002210 <movement_aY>
					  flag++;
 8000ea0:	7ffb      	ldrb	r3, [r7, #31]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eb0:	22f0      	movs	r2, #240	; 0xf0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fd08 	bl	80008ca <LCD_Clear>
					  break;
 8000eba:	e14f      	b.n	800115c <main+0x618>
			  	  case 8:
			  		  movement_Z();
 8000ebc:	f001 f9b2 	bl	8002224 <movement_Z>
					  movement_aZ();
 8000ec0:	f001 f9f6 	bl	80022b0 <movement_aZ>
					  flag++;
 8000ec4:	7ffb      	ldrb	r3, [r7, #31]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ed4:	22f0      	movs	r2, #240	; 0xf0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fcf6 	bl	80008ca <LCD_Clear>
					  break;
 8000ede:	e13d      	b.n	800115c <main+0x618>
 8000ee0:	20000158 	.word	0x20000158
 8000ee4:	200000c8 	.word	0x200000c8
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	08005590 	.word	0x08005590
 8000ef0:	40011000 	.word	0x40011000
			  	  case 9:
			  		  movement_M();
 8000ef4:	f001 fa22 	bl	800233c <movement_M>
					  movement_aM();
 8000ef8:	f001 fa4f 	bl	800239a <movement_aM>
					  flag++;
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	3301      	adds	r3, #1
 8000f00:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f0c:	22f0      	movs	r2, #240	; 0xf0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fcda 	bl	80008ca <LCD_Clear>
					  break;
 8000f16:	e121      	b.n	800115c <main+0x618>
			  	  case 10:
			  		  movement_E();
 8000f18:	f001 fa6e 	bl	80023f8 <movement_E>
					  movement_aE();
 8000f1c:	f001 fa76 	bl	800240c <movement_aE>
					  flag++;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	3301      	adds	r3, #1
 8000f24:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f30:	22f0      	movs	r2, #240	; 0xf0
 8000f32:	2100      	movs	r1, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fcc8 	bl	80008ca <LCD_Clear>
					  break;
 8000f3a:	e10f      	b.n	800115c <main+0x618>
			  	  case 11:
			  		  movement_S();
 8000f3c:	f001 fa70 	bl	8002420 <movement_S>
					  movement_aS();
 8000f40:	f001 fa9d 	bl	800247e <movement_aS>
					  flag++;
 8000f44:	7ffb      	ldrb	r3, [r7, #31]
 8000f46:	3301      	adds	r3, #1
 8000f48:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fcb6 	bl	80008ca <LCD_Clear>
					  break;
 8000f5e:	e0fd      	b.n	800115c <main+0x618>
			  	  case 12:
			  		  movement_u();
 8000f60:	f001 fabc 	bl	80024dc <movement_u>
					  movement_au();
 8000f64:	f001 fac2 	bl	80024ec <movement_au>
					  flag++;
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f78:	22f0      	movs	r2, #240	; 0xf0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fca4 	bl	80008ca <LCD_Clear>
					  break;
 8000f82:	e0eb      	b.n	800115c <main+0x618>
			  	  case 13:
			  		  movement_l();
 8000f84:	f001 faba 	bl	80024fc <movement_l>
					  movement_al();
 8000f88:	f001 fac0 	bl	800250c <movement_al>
					  flag++;
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f9c:	22f0      	movs	r2, #240	; 0xf0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fc92 	bl	80008ca <LCD_Clear>
					  break;
 8000fa6:	e0d9      	b.n	800115c <main+0x618>
			  	  case 14:
			  		  movement_f();
 8000fa8:	f001 fab8 	bl	800251c <movement_f>
					  movement_af();
 8000fac:	f001 fabe 	bl	800252c <movement_af>
					  flag++;
 8000fb0:	7ffb      	ldrb	r3, [r7, #31]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fc0:	22f0      	movs	r2, #240	; 0xf0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fc80 	bl	80008ca <LCD_Clear>
					  break;
 8000fca:	e0c7      	b.n	800115c <main+0x618>
			  	  case 15:
			  		  movement_r();
 8000fcc:	f001 fab6 	bl	800253c <movement_r>
					  movement_ar();
 8000fd0:	f001 fabc 	bl	800254c <movement_ar>
					  flag++;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe4:	22f0      	movs	r2, #240	; 0xf0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fc6e 	bl	80008ca <LCD_Clear>
					  break;
 8000fee:	e0b5      	b.n	800115c <main+0x618>
			  	  case 16:
			  		  movement_b();
 8000ff0:	f001 fab4 	bl	800255c <movement_b>
					  movement_ab();
 8000ff4:	f001 faba 	bl	800256c <movement_ab>
					  flag++;
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001008:	22f0      	movs	r2, #240	; 0xf0
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fc5c 	bl	80008ca <LCD_Clear>
					  break;
 8001012:	e0a3      	b.n	800115c <main+0x618>
			  	  case 17:
			  		  movement_d();
 8001014:	f001 fab2 	bl	800257c <movement_d>
					  movement_ad();
 8001018:	f001 fab8 	bl	800258c <movement_ad>
					  flag++;
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	3301      	adds	r3, #1
 8001020:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800102c:	22f0      	movs	r2, #240	; 0xf0
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fc4a 	bl	80008ca <LCD_Clear>
					  break;
 8001036:	e091      	b.n	800115c <main+0x618>
			  	  case 18:
			  		  movement_F2();
 8001038:	f000 fc10 	bl	800185c <movement_F2>
					  movement_aF2();
 800103c:	f000 fc43 	bl	80018c6 <movement_aF2>
					  flag++;
 8001040:	7ffb      	ldrb	r3, [r7, #31]
 8001042:	3301      	adds	r3, #1
 8001044:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001050:	22f0      	movs	r2, #240	; 0xf0
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fc38 	bl	80008ca <LCD_Clear>
					  break;
 800105a:	e07f      	b.n	800115c <main+0x618>
			  	  case 19:
			  		  movement_R2();
 800105c:	f000 fc68 	bl	8001930 <movement_R2>
					  movement_aR2();
 8001060:	f000 fc9b 	bl	800199a <movement_aR2>
					  flag++;
 8001064:	7ffb      	ldrb	r3, [r7, #31]
 8001066:	3301      	adds	r3, #1
 8001068:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800106a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001074:	22f0      	movs	r2, #240	; 0xf0
 8001076:	2100      	movs	r1, #0
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fc26 	bl	80008ca <LCD_Clear>
					  break;
 800107e:	e06d      	b.n	800115c <main+0x618>
			  	  case 20:
			  		  movement_L2();
 8001080:	f000 fcc0 	bl	8001a04 <movement_L2>
					  movement_aL2();
 8001084:	f000 fcf3 	bl	8001a6e <movement_aL2>
					  flag++;
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001098:	22f0      	movs	r2, #240	; 0xf0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fc14 	bl	80008ca <LCD_Clear>
					  break;
 80010a2:	e05b      	b.n	800115c <main+0x618>
			  	  case 21:
			  		  movement_B2();
 80010a4:	f000 fd18 	bl	8001ad8 <movement_B2>
					  movement_aB2();
 80010a8:	f000 fd4b 	bl	8001b42 <movement_aB2>
					  flag++;
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	3301      	adds	r3, #1
 80010b0:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010bc:	22f0      	movs	r2, #240	; 0xf0
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fc02 	bl	80008ca <LCD_Clear>
					  break;
 80010c6:	e049      	b.n	800115c <main+0x618>
			  	  case 22:
			  		  movement_U2();
 80010c8:	f000 fd70 	bl	8001bac <movement_U2>
					  movement_aU2();
 80010cc:	f000 fe15 	bl	8001cfa <movement_aU2>
					  flag++;
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	3301      	adds	r3, #1
 80010d4:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80010d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010e0:	22f0      	movs	r2, #240	; 0xf0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fbf0 	bl	80008ca <LCD_Clear>
					  break;
 80010ea:	e037      	b.n	800115c <main+0x618>
			  	  case 23:
			  		  movement_D2();
 80010ec:	f000 feac 	bl	8001e48 <movement_D2>
					  movement_aD2();
 80010f0:	f000 ff51 	bl	8001f96 <movement_aD2>
					  remove_cube();
 80010f4:	f001 fabe 	bl	8002674 <remove_cube>
					  flag++;
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	3301      	adds	r3, #1
 80010fc:	77fb      	strb	r3, [r7, #31]
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80010fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001108:	22f0      	movs	r2, #240	; 0xf0
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fbdc 	bl	80008ca <LCD_Clear>
					  break;
 8001112:	e023      	b.n	800115c <main+0x618>
			  	  case 100:
			  		  servo_pull(north_back);
 8001114:	2002      	movs	r0, #2
 8001116:	f001 fb63 	bl	80027e0 <servo_pull>
			  		  servo_pull(south_back);
 800111a:	2006      	movs	r0, #6
 800111c:	f001 fb60 	bl	80027e0 <servo_pull>
			  		  HAL_Delay(DELAY_TIME_P);
 8001120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001124:	f001 ff50 	bl	8002fc8 <HAL_Delay>
			  		  clockwise_90(west_front);
 8001128:	2007      	movs	r0, #7
 800112a:	f001 fae9 	bl	8002700 <clockwise_90>
			  		  anticlockwise_90(east_front);
 800112e:	2003      	movs	r0, #3
 8001130:	f001 fb1e 	bl	8002770 <anticlockwise_90>
			  		  HAL_Delay(DELAY_TIME_90);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f001 ff46 	bl	8002fc8 <HAL_Delay>
			  		  LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800113c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001146:	22f0      	movs	r2, #240	; 0xf0
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fbbd 	bl	80008ca <LCD_Clear>
			  		  flag++;
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	3301      	adds	r3, #1
 8001154:	77fb      	strb	r3, [r7, #31]
			  		  break;
 8001156:	e001      	b.n	800115c <main+0x618>
			  	  default:
			  		  return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <main+0x61a>
  {
 800115c:	e52b      	b.n	8000bb6 <main+0x72>
			  }
		  }
	  }
  }
  /* USER CODE END 3 */
}
 800115e:	4618      	mov	r0, r3
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fd4c 	bl	8004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f9d5 	bl	8003560 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011bc:	f000 f819 	bl	80011f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fc42 	bl	8003a64 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011e6:	f000 f804 	bl	80011f2 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f6:	b672      	cpsid	i
}
 80011f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fa:	e7fe      	b.n	80011fa <Error_Handler+0x8>

080011fc <movement_F>:
 */

#include "movement.h"

// Number of Delay: 4
void movement_F(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	clockwise_90(south_front);
 8001200:	2005      	movs	r0, #5
 8001202:	f001 fa7d 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120a:	f001 fedd 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 800120e:	2006      	movs	r0, #6
 8001210:	f001 fae6 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001218:	f001 fed6 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 800121c:	2005      	movs	r0, #5
 800121e:	f001 fa37 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001226:	f001 fecf 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 800122a:	2006      	movs	r0, #6
 800122c:	f001 fb0e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f001 fec8 	bl	8002fc8 <HAL_Delay>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <movement_aF>:

// Number of Delay: 4
void movement_aF(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 8001240:	2005      	movs	r0, #5
 8001242:	f001 fa95 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124a:	f001 febd 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 800124e:	2006      	movs	r0, #6
 8001250:	f001 fac6 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001258:	f001 feb6 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 800125c:	2005      	movs	r0, #5
 800125e:	f001 fa17 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001266:	f001 feaf 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 800126a:	2006      	movs	r0, #6
 800126c:	f001 faee 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001274:	f001 fea8 	bl	8002fc8 <HAL_Delay>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <movement_R>:

// Number of Delay: 4
void movement_R(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8001280:	2003      	movs	r0, #3
 8001282:	f001 fa3d 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128a:	f001 fe9d 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 800128e:	2004      	movs	r0, #4
 8001290:	f001 faa6 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001298:	f001 fe96 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 800129c:	2003      	movs	r0, #3
 800129e:	f001 f9f7 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f001 fe8f 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80012aa:	2004      	movs	r0, #4
 80012ac:	f001 face 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b4:	f001 fe88 	bl	8002fc8 <HAL_Delay>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <movement_aR>:

// Number of Delay: 4
void movement_aR(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f001 fa55 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80012c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ca:	f001 fe7d 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 80012ce:	2004      	movs	r0, #4
 80012d0:	f001 fa86 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d8:	f001 fe76 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 80012dc:	2003      	movs	r0, #3
 80012de:	f001 f9d7 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80012e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e6:	f001 fe6f 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80012ea:	2004      	movs	r0, #4
 80012ec:	f001 faae 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f4:	f001 fe68 	bl	8002fc8 <HAL_Delay>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <movement_L>:

// Number of Delay: 4
void movement_L(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	clockwise_90(west_front);
 8001300:	2007      	movs	r0, #7
 8001302:	f001 f9fd 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130a:	f001 fe5d 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 800130e:	2008      	movs	r0, #8
 8001310:	f001 fa66 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f001 fe56 	bl	8002fc8 <HAL_Delay>
	centre_0(west_front);
 800131c:	2007      	movs	r0, #7
 800131e:	f001 f9b7 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001326:	f001 fe4f 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 800132a:	2008      	movs	r0, #8
 800132c:	f001 fa8e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001334:	f001 fe48 	bl	8002fc8 <HAL_Delay>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <movement_aL>:

// Number of Delay: 4
void movement_aL(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	anticlockwise_90(west_front);
 8001340:	2007      	movs	r0, #7
 8001342:	f001 fa15 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134a:	f001 fe3d 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 800134e:	2008      	movs	r0, #8
 8001350:	f001 fa46 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001358:	f001 fe36 	bl	8002fc8 <HAL_Delay>
	centre_0(west_front);
 800135c:	2007      	movs	r0, #7
 800135e:	f001 f997 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f001 fe2f 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 800136a:	2008      	movs	r0, #8
 800136c:	f001 fa6e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001374:	f001 fe28 	bl	8002fc8 <HAL_Delay>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <movement_B>:

// Number of Delay: 4
void movement_B(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8001380:	2001      	movs	r0, #1
 8001382:	f001 f9bd 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138a:	f001 fe1d 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800138e:	2002      	movs	r0, #2
 8001390:	f001 fa26 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001398:	f001 fe16 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 800139c:	2001      	movs	r0, #1
 800139e:	f001 f977 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80013a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a6:	f001 fe0f 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f001 fa4e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b4:	f001 fe08 	bl	8002fc8 <HAL_Delay>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <movement_aB>:

// Number of Delay: 4
void movement_aB(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f001 f9d5 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80013c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ca:	f001 fdfd 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80013ce:	2002      	movs	r0, #2
 80013d0:	f001 fa06 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d8:	f001 fdf6 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 80013dc:	2001      	movs	r0, #1
 80013de:	f001 f957 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80013e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e6:	f001 fdef 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f001 fa2e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f4:	f001 fde8 	bl	8002fc8 <HAL_Delay>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <movement_U>:

// Number of Delay: 13
void movement_U(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001400:	2004      	movs	r0, #4
 8001402:	f001 f9ed 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8001406:	2008      	movs	r0, #8
 8001408:	f001 f9ea 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800140c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001410:	f001 fdda 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001414:	2005      	movs	r0, #5
 8001416:	f001 f973 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 800141a:	2001      	movs	r0, #1
 800141c:	f001 f9a8 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001424:	f001 fdd0 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001428:	2004      	movs	r0, #4
 800142a:	f001 fa0f 	bl	800284c <servo_push>
	servo_push(west_back);
 800142e:	2008      	movs	r0, #8
 8001430:	f001 fa0c 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001434:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001438:	f001 fdc6 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800143c:	2002      	movs	r0, #2
 800143e:	f001 f9cf 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8001442:	2006      	movs	r0, #6
 8001444:	f001 f9cc 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800144c:	f001 fdbc 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001450:	2001      	movs	r0, #1
 8001452:	f001 f91d 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001456:	2005      	movs	r0, #5
 8001458:	f001 f91a 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800145c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001460:	f001 fdb2 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001464:	2002      	movs	r0, #2
 8001466:	f001 f9f1 	bl	800284c <servo_push>
	servo_push(south_back);
 800146a:	2006      	movs	r0, #6
 800146c:	f001 f9ee 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001474:	f001 fda8 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 8001478:	2003      	movs	r0, #3
 800147a:	f001 f941 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800147e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001482:	f001 fda1 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001486:	2004      	movs	r0, #4
 8001488:	f001 f9aa 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 800148c:	2008      	movs	r0, #8
 800148e:	f001 f9a7 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f001 fd97 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 800149a:	2005      	movs	r0, #5
 800149c:	f001 f968 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f001 f92d 	bl	8002700 <clockwise_90>
	centre_0(east_front);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f001 f8f2 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80014ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b0:	f001 fd8a 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80014b4:	2004      	movs	r0, #4
 80014b6:	f001 f9c9 	bl	800284c <servo_push>
	servo_push(west_back);
 80014ba:	2008      	movs	r0, #8
 80014bc:	f001 f9c6 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80014c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c4:	f001 fd80 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f001 f989 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 80014ce:	2006      	movs	r0, #6
 80014d0:	f001 f986 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d8:	f001 fd76 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 80014dc:	2005      	movs	r0, #5
 80014de:	f001 f8d7 	bl	8002690 <centre_0>
	centre_0(north_front);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 f8d4 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80014e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ec:	f001 fd6c 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80014f0:	2002      	movs	r0, #2
 80014f2:	f001 f9ab 	bl	800284c <servo_push>
	servo_push(south_back);
 80014f6:	2006      	movs	r0, #6
 80014f8:	f001 f9a8 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80014fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001500:	f001 fd62 	bl	8002fc8 <HAL_Delay>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <movement_aU>:

// Number of Delay: 13
void movement_aU(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 800150c:	2004      	movs	r0, #4
 800150e:	f001 f967 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8001512:	2008      	movs	r0, #8
 8001514:	f001 f964 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800151c:	f001 fd54 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001520:	2005      	movs	r0, #5
 8001522:	f001 f8ed 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001526:	2001      	movs	r0, #1
 8001528:	f001 f922 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800152c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001530:	f001 fd4a 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001534:	2004      	movs	r0, #4
 8001536:	f001 f989 	bl	800284c <servo_push>
	servo_push(west_back);
 800153a:	2008      	movs	r0, #8
 800153c:	f001 f986 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001544:	f001 fd40 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001548:	2002      	movs	r0, #2
 800154a:	f001 f949 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 800154e:	2006      	movs	r0, #6
 8001550:	f001 f946 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001558:	f001 fd36 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 800155c:	2001      	movs	r0, #1
 800155e:	f001 f897 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001562:	2005      	movs	r0, #5
 8001564:	f001 f894 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800156c:	f001 fd2c 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001570:	2002      	movs	r0, #2
 8001572:	f001 f96b 	bl	800284c <servo_push>
	servo_push(south_back);
 8001576:	2006      	movs	r0, #6
 8001578:	f001 f968 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800157c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001580:	f001 fd22 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(east_front);
 8001584:	2003      	movs	r0, #3
 8001586:	f001 f8f3 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800158a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158e:	f001 fd1b 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001592:	2004      	movs	r0, #4
 8001594:	f001 f924 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8001598:	2008      	movs	r0, #8
 800159a:	f001 f921 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800159e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a2:	f001 fd11 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 80015a6:	2005      	movs	r0, #5
 80015a8:	f001 f8e2 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 f8a7 	bl	8002700 <clockwise_90>
	centre_0(east_front);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f001 f86c 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80015b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015bc:	f001 fd04 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80015c0:	2004      	movs	r0, #4
 80015c2:	f001 f943 	bl	800284c <servo_push>
	servo_push(west_back);
 80015c6:	2008      	movs	r0, #8
 80015c8:	f001 f940 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80015cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d0:	f001 fcfa 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f001 f903 	bl	80027e0 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 80015da:	2006      	movs	r0, #6
 80015dc:	f001 f900 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e4:	f001 fcf0 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 80015e8:	2005      	movs	r0, #5
 80015ea:	f001 f851 	bl	8002690 <centre_0>
	centre_0(north_front);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f001 f84e 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80015f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f8:	f001 fce6 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f001 f925 	bl	800284c <servo_push>
	servo_push(south_back);
 8001602:	2006      	movs	r0, #6
 8001604:	f001 f922 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160c:	f001 fcdc 	bl	8002fc8 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <movement_D>:

// Number of Delay: 13
void movement_D(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001618:	2004      	movs	r0, #4
 800161a:	f001 f8e1 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800161e:	20af      	movs	r0, #175	; 0xaf
 8001620:	f001 fcd2 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001624:	2008      	movs	r0, #8
 8001626:	f001 f8db 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f001 fccb 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001632:	2005      	movs	r0, #5
 8001634:	f001 f864 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001638:	2001      	movs	r0, #1
 800163a:	f001 f899 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800163e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001642:	f001 fcc1 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001646:	2004      	movs	r0, #4
 8001648:	f001 f900 	bl	800284c <servo_push>
	servo_push(west_back);
 800164c:	2008      	movs	r0, #8
 800164e:	f001 f8fd 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001656:	f001 fcb7 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800165a:	2002      	movs	r0, #2
 800165c:	f001 f8c0 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001660:	20af      	movs	r0, #175	; 0xaf
 8001662:	f001 fcb1 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001666:	2006      	movs	r0, #6
 8001668:	f001 f8ba 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800166c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001670:	f001 fcaa 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001674:	2001      	movs	r0, #1
 8001676:	f001 f80b 	bl	8002690 <centre_0>
	centre_0(south_front);
 800167a:	2005      	movs	r0, #5
 800167c:	f001 f808 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001684:	f001 fca0 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001688:	2002      	movs	r0, #2
 800168a:	f001 f8df 	bl	800284c <servo_push>
	servo_push(south_back);
 800168e:	2006      	movs	r0, #6
 8001690:	f001 f8dc 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001698:	f001 fc96 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 800169c:	2007      	movs	r0, #7
 800169e:	f001 f82f 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80016a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a6:	f001 fc8f 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 80016aa:	2004      	movs	r0, #4
 80016ac:	f001 f898 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80016b0:	20af      	movs	r0, #175	; 0xaf
 80016b2:	f001 fc89 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 80016b6:	2008      	movs	r0, #8
 80016b8:	f001 f892 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80016bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c0:	f001 fc82 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 80016c4:	2005      	movs	r0, #5
 80016c6:	f001 f853 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f001 f818 	bl	8002700 <clockwise_90>
	centre_0(west_front);
 80016d0:	2007      	movs	r0, #7
 80016d2:	f000 ffdd 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80016d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016da:	f001 fc75 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80016de:	2004      	movs	r0, #4
 80016e0:	f001 f8b4 	bl	800284c <servo_push>
	servo_push(west_back);
 80016e4:	2008      	movs	r0, #8
 80016e6:	f001 f8b1 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80016ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ee:	f001 fc6b 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80016f2:	2002      	movs	r0, #2
 80016f4:	f001 f874 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80016f8:	20af      	movs	r0, #175	; 0xaf
 80016fa:	f001 fc65 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 80016fe:	2006      	movs	r0, #6
 8001700:	f001 f86e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001708:	f001 fc5e 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 800170c:	2005      	movs	r0, #5
 800170e:	f000 ffbf 	bl	8002690 <centre_0>
	centre_0(north_front);
 8001712:	2001      	movs	r0, #1
 8001714:	f000 ffbc 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171c:	f001 fc54 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001720:	2002      	movs	r0, #2
 8001722:	f001 f893 	bl	800284c <servo_push>
	servo_push(south_back);
 8001726:	2006      	movs	r0, #6
 8001728:	f001 f890 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f001 fc4a 	bl	8002fc8 <HAL_Delay>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <movement_aD>:

// Number of Delay: 13
void movement_aD(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 800173c:	2004      	movs	r0, #4
 800173e:	f001 f84f 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001742:	20af      	movs	r0, #175	; 0xaf
 8001744:	f001 fc40 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001748:	2008      	movs	r0, #8
 800174a:	f001 f849 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800174e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001752:	f001 fc39 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001756:	2005      	movs	r0, #5
 8001758:	f000 ffd2 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 800175c:	2001      	movs	r0, #1
 800175e:	f001 f807 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001766:	f001 fc2f 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 800176a:	2004      	movs	r0, #4
 800176c:	f001 f86e 	bl	800284c <servo_push>
	servo_push(west_back);
 8001770:	2008      	movs	r0, #8
 8001772:	f001 f86b 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177a:	f001 fc25 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800177e:	2002      	movs	r0, #2
 8001780:	f001 f82e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001784:	20af      	movs	r0, #175	; 0xaf
 8001786:	f001 fc1f 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 800178a:	2006      	movs	r0, #6
 800178c:	f001 f828 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001794:	f001 fc18 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001798:	2001      	movs	r0, #1
 800179a:	f000 ff79 	bl	8002690 <centre_0>
	centre_0(south_front);
 800179e:	2005      	movs	r0, #5
 80017a0:	f000 ff76 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80017a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a8:	f001 fc0e 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f001 f84d 	bl	800284c <servo_push>
	servo_push(south_back);
 80017b2:	2006      	movs	r0, #6
 80017b4:	f001 f84a 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80017b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017bc:	f001 fc04 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(west_front);
 80017c0:	2007      	movs	r0, #7
 80017c2:	f000 ffd5 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80017c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ca:	f001 fbfd 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 80017ce:	2004      	movs	r0, #4
 80017d0:	f001 f806 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80017d4:	20af      	movs	r0, #175	; 0xaf
 80017d6:	f001 fbf7 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 80017da:	2008      	movs	r0, #8
 80017dc:	f001 f800 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e4:	f001 fbf0 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 80017e8:	2005      	movs	r0, #5
 80017ea:	f000 ffc1 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 ff86 	bl	8002700 <clockwise_90>
	centre_0(west_front);
 80017f4:	2007      	movs	r0, #7
 80017f6:	f000 ff4b 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80017fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fe:	f001 fbe3 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001802:	2004      	movs	r0, #4
 8001804:	f001 f822 	bl	800284c <servo_push>
	servo_push(west_back);
 8001808:	2008      	movs	r0, #8
 800180a:	f001 f81f 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800180e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001812:	f001 fbd9 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001816:	2002      	movs	r0, #2
 8001818:	f000 ffe2 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800181c:	20af      	movs	r0, #175	; 0xaf
 800181e:	f001 fbd3 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001822:	2006      	movs	r0, #6
 8001824:	f000 ffdc 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800182c:	f001 fbcc 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8001830:	2005      	movs	r0, #5
 8001832:	f000 ff2d 	bl	8002690 <centre_0>
	centre_0(north_front);
 8001836:	2001      	movs	r0, #1
 8001838:	f000 ff2a 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800183c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001840:	f001 fbc2 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001844:	2002      	movs	r0, #2
 8001846:	f001 f801 	bl	800284c <servo_push>
	servo_push(south_back);
 800184a:	2006      	movs	r0, #6
 800184c:	f000 fffe 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001854:	f001 fbb8 	bl	8002fc8 <HAL_Delay>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <movement_F2>:

// Number of Delay: 8
void movement_F2(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8001860:	2006      	movs	r0, #6
 8001862:	f000 ffbd 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186a:	f001 fbad 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 800186e:	2005      	movs	r0, #5
 8001870:	f000 ff7e 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001878:	f001 fba6 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 800187c:	2006      	movs	r0, #6
 800187e:	f000 ffe5 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001886:	f001 fb9f 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 800188a:	2005      	movs	r0, #5
 800188c:	f000 ff38 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001890:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001894:	f001 fb98 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001898:	2006      	movs	r0, #6
 800189a:	f000 ffa1 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f001 fb91 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 80018a6:	2005      	movs	r0, #5
 80018a8:	f000 fef2 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80018ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b0:	f001 fb8a 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 80018b4:	2006      	movs	r0, #6
 80018b6:	f000 ffc9 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80018ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018be:	f001 fb83 	bl	8002fc8 <HAL_Delay>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <movement_aF2>:

// Number of Delay: 8
void movement_aF2(void) {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 80018ca:	2006      	movs	r0, #6
 80018cc:	f000 ff88 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80018d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d4:	f001 fb78 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 80018d8:	2005      	movs	r0, #5
 80018da:	f000 ff11 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80018de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e2:	f001 fb71 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 80018e6:	2006      	movs	r0, #6
 80018e8:	f000 ffb0 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80018ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f0:	f001 fb6a 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 80018f4:	2005      	movs	r0, #5
 80018f6:	f000 ff3b 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80018fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80018fe:	f001 fb63 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001902:	2006      	movs	r0, #6
 8001904:	f000 ff6c 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f001 fb5c 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8001910:	2005      	movs	r0, #5
 8001912:	f000 febd 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191a:	f001 fb55 	bl	8002fc8 <HAL_Delay>
	servo_push(south_back);
 800191e:	2006      	movs	r0, #6
 8001920:	f000 ff94 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001928:	f001 fb4e 	bl	8002fc8 <HAL_Delay>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <movement_R2>:

// Number of Delay: 8
void movement_R2(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001934:	2004      	movs	r0, #4
 8001936:	f000 ff53 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800193a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193e:	f001 fb43 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(east_front);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 ff14 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800194c:	f001 fb3c 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001950:	2004      	movs	r0, #4
 8001952:	f000 ff7b 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f001 fb35 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 800195e:	2003      	movs	r0, #3
 8001960:	f000 fece 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001964:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001968:	f001 fb2e 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 800196c:	2004      	movs	r0, #4
 800196e:	f000 ff37 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001976:	f001 fb27 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 800197a:	2003      	movs	r0, #3
 800197c:	f000 fe88 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001984:	f001 fb20 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001988:	2004      	movs	r0, #4
 800198a:	f000 ff5f 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800198e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001992:	f001 fb19 	bl	8002fc8 <HAL_Delay>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <movement_aR2>:

// Number of Delay: 8
void movement_aR2(void) {
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 800199e:	2004      	movs	r0, #4
 80019a0:	f000 ff1e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80019a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a8:	f001 fb0e 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 fea7 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80019b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b6:	f001 fb07 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80019ba:	2004      	movs	r0, #4
 80019bc:	f000 ff46 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80019c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c4:	f001 fb00 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(east_front);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f000 fed1 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80019ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80019d2:	f001 faf9 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 80019d6:	2004      	movs	r0, #4
 80019d8:	f000 ff02 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80019dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e0:	f001 faf2 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 fe53 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80019ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ee:	f001 faeb 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80019f2:	2004      	movs	r0, #4
 80019f4:	f000 ff2a 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80019f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019fc:	f001 fae4 	bl	8002fc8 <HAL_Delay>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <movement_L2>:

// Number of Delay: 8
void movement_L2(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001a08:	2008      	movs	r0, #8
 8001a0a:	f000 fee9 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a12:	f001 fad9 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(west_front);
 8001a16:	2007      	movs	r0, #7
 8001a18:	f000 feaa 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a20:	f001 fad2 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 8001a24:	2008      	movs	r0, #8
 8001a26:	f000 ff11 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a2e:	f001 facb 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f000 fe64 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001a38:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001a3c:	f001 fac4 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001a40:	2008      	movs	r0, #8
 8001a42:	f000 fecd 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4a:	f001 fabd 	bl	8002fc8 <HAL_Delay>
	centre_0(west_front);
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f000 fe1e 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a58:	f001 fab6 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f000 fef5 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a66:	f001 faaf 	bl	8002fc8 <HAL_Delay>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <movement_aL2>:

// Number of Delay: 8
void movement_aL2(void) {
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001a72:	2008      	movs	r0, #8
 8001a74:	f000 feb4 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a7c:	f001 faa4 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 8001a80:	2007      	movs	r0, #7
 8001a82:	f000 fe3d 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a8a:	f001 fa9d 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 8001a8e:	2008      	movs	r0, #8
 8001a90:	f000 fedc 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a98:	f001 fa96 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(west_front);
 8001a9c:	2007      	movs	r0, #7
 8001a9e:	f000 fe67 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001aa2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001aa6:	f001 fa8f 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001aaa:	2008      	movs	r0, #8
 8001aac:	f000 fe98 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab4:	f001 fa88 	bl	8002fc8 <HAL_Delay>
	centre_0(west_front);
 8001ab8:	2007      	movs	r0, #7
 8001aba:	f000 fde9 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac2:	f001 fa81 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f000 fec0 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad0:	f001 fa7a 	bl	8002fc8 <HAL_Delay>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <movement_B2>:

// Number of Delay: 8
void movement_B2(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001adc:	2002      	movs	r0, #2
 8001ade:	f000 fe7f 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae6:	f001 fa6f 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(north_front);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fe40 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af4:	f001 fa68 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001af8:	2002      	movs	r0, #2
 8001afa:	f000 fea7 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b02:	f001 fa61 	bl	8002fc8 <HAL_Delay>
	clockwise_90(north_front);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fdfa 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001b0c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001b10:	f001 fa5a 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f000 fe63 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1e:	f001 fa53 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 fdb4 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b2c:	f001 fa4c 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f000 fe8b 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001b36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b3a:	f001 fa45 	bl	8002fc8 <HAL_Delay>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <movement_aB2>:

// Number of Delay: 8
void movement_aB2(void) {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001b46:	2002      	movs	r0, #2
 8001b48:	f000 fe4a 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b50:	f001 fa3a 	bl	8002fc8 <HAL_Delay>
	clockwise_90(north_front);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 fdd3 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b5e:	f001 fa33 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001b62:	2002      	movs	r0, #2
 8001b64:	f000 fe72 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b6c:	f001 fa2c 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(north_front);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f000 fdfd 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001b76:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001b7a:	f001 fa25 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f000 fe2e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b88:	f001 fa1e 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fd7f 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b96:	f001 fa17 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f000 fe56 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba4:	f001 fa10 	bl	8002fc8 <HAL_Delay>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <movement_U2>:

// Number of Delay: 17
void movement_U2(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001bb0:	2004      	movs	r0, #4
 8001bb2:	f000 fe15 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001bb6:	20af      	movs	r0, #175	; 0xaf
 8001bb8:	f001 fa06 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001bbc:	2008      	movs	r0, #8
 8001bbe:	f000 fe0f 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc6:	f001 f9ff 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001bca:	2005      	movs	r0, #5
 8001bcc:	f000 fd98 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 fdcd 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bda:	f001 f9f5 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001bde:	2004      	movs	r0, #4
 8001be0:	f000 fe34 	bl	800284c <servo_push>
	servo_push(west_back);
 8001be4:	2008      	movs	r0, #8
 8001be6:	f000 fe31 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bee:	f001 f9eb 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f000 fdf4 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001bf8:	20af      	movs	r0, #175	; 0xaf
 8001bfa:	f001 f9e5 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f000 fdee 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c08:	f001 f9de 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 fd3f 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001c12:	2005      	movs	r0, #5
 8001c14:	f000 fd3c 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c1c:	f001 f9d4 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f000 fe13 	bl	800284c <servo_push>
	servo_push(south_back);
 8001c26:	2006      	movs	r0, #6
 8001c28:	f000 fe10 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c30:	f001 f9ca 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001c34:	2004      	movs	r0, #4
 8001c36:	f000 fdd3 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3e:	f001 f9c3 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(east_front);
 8001c42:	2003      	movs	r0, #3
 8001c44:	f000 fd94 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c4c:	f001 f9bc 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001c50:	2004      	movs	r0, #4
 8001c52:	f000 fdfb 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001c56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c5a:	f001 f9b5 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 8001c5e:	2003      	movs	r0, #3
 8001c60:	f000 fd4e 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001c64:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001c68:	f001 f9ae 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f000 fdb7 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001c72:	20af      	movs	r0, #175	; 0xaf
 8001c74:	f001 f9a8 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001c78:	2008      	movs	r0, #8
 8001c7a:	f000 fdb1 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c82:	f001 f9a1 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 8001c86:	2005      	movs	r0, #5
 8001c88:	f000 fd72 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f000 fd37 	bl	8002700 <clockwise_90>
	centre_0(east_front);
 8001c92:	2003      	movs	r0, #3
 8001c94:	f000 fcfc 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c9c:	f001 f994 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001ca0:	2004      	movs	r0, #4
 8001ca2:	f000 fdd3 	bl	800284c <servo_push>
	servo_push(west_back);
 8001ca6:	2008      	movs	r0, #8
 8001ca8:	f000 fdd0 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb0:	f001 f98a 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f000 fd93 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001cba:	20af      	movs	r0, #175	; 0xaf
 8001cbc:	f001 f984 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001cc0:	2006      	movs	r0, #6
 8001cc2:	f000 fd8d 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001cc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cca:	f001 f97d 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8001cce:	2005      	movs	r0, #5
 8001cd0:	f000 fcde 	bl	8002690 <centre_0>
	centre_0(north_front);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 fcdb 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cde:	f001 f973 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f000 fdb2 	bl	800284c <servo_push>
	servo_push(south_back);
 8001ce8:	2006      	movs	r0, #6
 8001cea:	f000 fdaf 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001cee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cf2:	f001 f969 	bl	8002fc8 <HAL_Delay>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <movement_aU2>:

// Number of Delay: 17
void movement_aU2(void) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001cfe:	2004      	movs	r0, #4
 8001d00:	f000 fd6e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001d04:	20af      	movs	r0, #175	; 0xaf
 8001d06:	f001 f95f 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001d0a:	2008      	movs	r0, #8
 8001d0c:	f000 fd68 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d14:	f001 f958 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f000 fcf1 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 fd26 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f001 f94e 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001d2c:	2004      	movs	r0, #4
 8001d2e:	f000 fd8d 	bl	800284c <servo_push>
	servo_push(west_back);
 8001d32:	2008      	movs	r0, #8
 8001d34:	f000 fd8a 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3c:	f001 f944 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f000 fd4d 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001d46:	20af      	movs	r0, #175	; 0xaf
 8001d48:	f001 f93e 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001d4c:	2006      	movs	r0, #6
 8001d4e:	f000 fd47 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d56:	f001 f937 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fc98 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001d60:	2005      	movs	r0, #5
 8001d62:	f000 fc95 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6a:	f001 f92d 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f000 fd6c 	bl	800284c <servo_push>
	servo_push(south_back);
 8001d74:	2006      	movs	r0, #6
 8001d76:	f000 fd69 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7e:	f001 f923 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001d82:	2004      	movs	r0, #4
 8001d84:	f000 fd2c 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8c:	f001 f91c 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 fcb5 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d9a:	f001 f915 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001d9e:	2004      	movs	r0, #4
 8001da0:	f000 fd54 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001da8:	f001 f90e 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(east_front);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 fcdf 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001db2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001db6:	f001 f907 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001dba:	2004      	movs	r0, #4
 8001dbc:	f000 fd10 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001dc0:	20af      	movs	r0, #175	; 0xaf
 8001dc2:	f001 f901 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001dc6:	2008      	movs	r0, #8
 8001dc8:	f000 fd0a 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd0:	f001 f8fa 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f000 fccb 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fc90 	bl	8002700 <clockwise_90>
	centre_0(east_front);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 fc55 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dea:	f001 f8ed 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001dee:	2004      	movs	r0, #4
 8001df0:	f000 fd2c 	bl	800284c <servo_push>
	servo_push(west_back);
 8001df4:	2008      	movs	r0, #8
 8001df6:	f000 fd29 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dfe:	f001 f8e3 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001e02:	2002      	movs	r0, #2
 8001e04:	f000 fcec 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001e08:	20af      	movs	r0, #175	; 0xaf
 8001e0a:	f001 f8dd 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f000 fce6 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e18:	f001 f8d6 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8001e1c:	2005      	movs	r0, #5
 8001e1e:	f000 fc37 	bl	8002690 <centre_0>
	centre_0(north_front);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fc34 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e2c:	f001 f8cc 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f000 fd0b 	bl	800284c <servo_push>
	servo_push(south_back);
 8001e36:	2006      	movs	r0, #6
 8001e38:	f000 fd08 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e40:	f001 f8c2 	bl	8002fc8 <HAL_Delay>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <movement_D2>:

// Number of Delay: 17
void movement_D2(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001e4c:	2004      	movs	r0, #4
 8001e4e:	f000 fcc7 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001e52:	20af      	movs	r0, #175	; 0xaf
 8001e54:	f001 f8b8 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001e58:	2008      	movs	r0, #8
 8001e5a:	f000 fcc1 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001e5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e62:	f001 f8b1 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001e66:	2005      	movs	r0, #5
 8001e68:	f000 fc4a 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 fc7f 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e76:	f001 f8a7 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	f000 fce6 	bl	800284c <servo_push>
	servo_push(west_back);
 8001e80:	2008      	movs	r0, #8
 8001e82:	f000 fce3 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e8a:	f001 f89d 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f000 fca6 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001e94:	20af      	movs	r0, #175	; 0xaf
 8001e96:	f001 f897 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f000 fca0 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea4:	f001 f890 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 fbf1 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f000 fbee 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001eb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb8:	f001 f886 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f000 fcc5 	bl	800284c <servo_push>
	servo_push(south_back);
 8001ec2:	2006      	movs	r0, #6
 8001ec4:	f000 fcc2 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ecc:	f001 f87c 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001ed0:	2008      	movs	r0, #8
 8001ed2:	f000 fc85 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eda:	f001 f875 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(west_front);
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f000 fc46 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee8:	f001 f86e 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 8001eec:	2008      	movs	r0, #8
 8001eee:	f000 fcad 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001ef2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef6:	f001 f867 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 8001efa:	2007      	movs	r0, #7
 8001efc:	f000 fc00 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001f00:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001f04:	f001 f860 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f000 fc69 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001f0e:	20af      	movs	r0, #175	; 0xaf
 8001f10:	f001 f85a 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001f14:	2008      	movs	r0, #8
 8001f16:	f000 fc63 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f1e:	f001 f853 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 8001f22:	2005      	movs	r0, #5
 8001f24:	f000 fc24 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f000 fbe9 	bl	8002700 <clockwise_90>
	centre_0(west_front);
 8001f2e:	2007      	movs	r0, #7
 8001f30:	f000 fbae 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f38:	f001 f846 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f000 fc85 	bl	800284c <servo_push>
	servo_push(west_back);
 8001f42:	2008      	movs	r0, #8
 8001f44:	f000 fc82 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4c:	f001 f83c 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001f50:	2002      	movs	r0, #2
 8001f52:	f000 fc45 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001f56:	20af      	movs	r0, #175	; 0xaf
 8001f58:	f001 f836 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001f5c:	2006      	movs	r0, #6
 8001f5e:	f000 fc3f 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f66:	f001 f82f 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8001f6a:	2005      	movs	r0, #5
 8001f6c:	f000 fb90 	bl	8002690 <centre_0>
	centre_0(north_front);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f000 fb8d 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f7a:	f001 f825 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f000 fc64 	bl	800284c <servo_push>
	servo_push(south_back);
 8001f84:	2006      	movs	r0, #6
 8001f86:	f000 fc61 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8e:	f001 f81b 	bl	8002fc8 <HAL_Delay>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <movement_aD2>:

// Number of Delay: 17
void movement_aD2(void) {
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001f9a:	2004      	movs	r0, #4
 8001f9c:	f000 fc20 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001fa0:	20af      	movs	r0, #175	; 0xaf
 8001fa2:	f001 f811 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8001fa6:	2008      	movs	r0, #8
 8001fa8:	f000 fc1a 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fb0:	f001 f80a 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8001fb4:	2005      	movs	r0, #5
 8001fb6:	f000 fba3 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 fbd8 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc4:	f001 f800 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8001fc8:	2004      	movs	r0, #4
 8001fca:	f000 fc3f 	bl	800284c <servo_push>
	servo_push(west_back);
 8001fce:	2008      	movs	r0, #8
 8001fd0:	f000 fc3c 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001fd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd8:	f000 fff6 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f000 fbff 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001fe2:	20af      	movs	r0, #175	; 0xaf
 8001fe4:	f000 fff0 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f000 fbf9 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001fee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff2:	f000 ffe9 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fb4a 	bl	8002690 <centre_0>
	centre_0(south_front);
 8001ffc:	2005      	movs	r0, #5
 8001ffe:	f000 fb47 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8002002:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002006:	f000 ffdf 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 800200a:	2002      	movs	r0, #2
 800200c:	f000 fc1e 	bl	800284c <servo_push>
	servo_push(south_back);
 8002010:	2006      	movs	r0, #6
 8002012:	f000 fc1b 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800201a:	f000 ffd5 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 800201e:	2008      	movs	r0, #8
 8002020:	f000 fbde 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002028:	f000 ffce 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 800202c:	2007      	movs	r0, #7
 800202e:	f000 fb67 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8002032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002036:	f000 ffc7 	bl	8002fc8 <HAL_Delay>
	servo_push(west_back);
 800203a:	2008      	movs	r0, #8
 800203c:	f000 fc06 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002044:	f000 ffc0 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(west_front);
 8002048:	2007      	movs	r0, #7
 800204a:	f000 fb91 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 800204e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002052:	f000 ffb9 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8002056:	2004      	movs	r0, #4
 8002058:	f000 fbc2 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800205c:	20af      	movs	r0, #175	; 0xaf
 800205e:	f000 ffb3 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8002062:	2008      	movs	r0, #8
 8002064:	f000 fbbc 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800206c:	f000 ffac 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 8002070:	2005      	movs	r0, #5
 8002072:	f000 fb7d 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 fb42 	bl	8002700 <clockwise_90>
	centre_0(west_front);
 800207c:	2007      	movs	r0, #7
 800207e:	f000 fb07 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8002082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002086:	f000 ff9f 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 800208a:	2004      	movs	r0, #4
 800208c:	f000 fbde 	bl	800284c <servo_push>
	servo_push(west_back);
 8002090:	2008      	movs	r0, #8
 8002092:	f000 fbdb 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209a:	f000 ff95 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800209e:	2002      	movs	r0, #2
 80020a0:	f000 fb9e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80020a4:	20af      	movs	r0, #175	; 0xaf
 80020a6:	f000 ff8f 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 80020aa:	2006      	movs	r0, #6
 80020ac:	f000 fb98 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80020b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020b4:	f000 ff88 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 80020b8:	2005      	movs	r0, #5
 80020ba:	f000 fae9 	bl	8002690 <centre_0>
	centre_0(north_front);
 80020be:	2001      	movs	r0, #1
 80020c0:	f000 fae6 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80020c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c8:	f000 ff7e 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80020cc:	2002      	movs	r0, #2
 80020ce:	f000 fbbd 	bl	800284c <servo_push>
	servo_push(south_back);
 80020d2:	2006      	movs	r0, #6
 80020d4:	f000 fbba 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_90);
 80020d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020dc:	f000 ff74 	bl	8002fc8 <HAL_Delay>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <movement_X>:

// Number of Delay: 6
void movement_X(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 80020e8:	2002      	movs	r0, #2
 80020ea:	f000 fb79 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80020ee:	20af      	movs	r0, #175	; 0xaf
 80020f0:	f000 ff6a 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 80020f4:	2006      	movs	r0, #6
 80020f6:	f000 fb73 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80020fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020fe:	f000 ff63 	bl	8002fc8 <HAL_Delay>
	clockwise_90(east_front);
 8002102:	2003      	movs	r0, #3
 8002104:	f000 fafc 	bl	8002700 <clockwise_90>
	anticlockwise_90(west_front);
 8002108:	2007      	movs	r0, #7
 800210a:	f000 fb31 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800210e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002112:	f000 ff59 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8002116:	2002      	movs	r0, #2
 8002118:	f000 fb98 	bl	800284c <servo_push>
	servo_push(south_back);
 800211c:	2006      	movs	r0, #6
 800211e:	f000 fb95 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002126:	f000 ff4f 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 800212a:	2004      	movs	r0, #4
 800212c:	f000 fb58 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8002130:	20af      	movs	r0, #175	; 0xaf
 8002132:	f000 ff49 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8002136:	2008      	movs	r0, #8
 8002138:	f000 fb52 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800213c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002140:	f000 ff42 	bl	8002fc8 <HAL_Delay>
	centre_0(west_front);
 8002144:	2007      	movs	r0, #7
 8002146:	f000 faa3 	bl	8002690 <centre_0>
	centre_0(east_front);
 800214a:	2003      	movs	r0, #3
 800214c:	f000 faa0 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8002150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002154:	f000 ff38 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8002158:	2004      	movs	r0, #4
 800215a:	f000 fb77 	bl	800284c <servo_push>
	servo_push(west_back);
 800215e:	2008      	movs	r0, #8
 8002160:	f000 fb74 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002168:	f000 ff2e 	bl	8002fc8 <HAL_Delay>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <movement_aX>:

// Number of Delay: 6
void movement_aX(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8002174:	2002      	movs	r0, #2
 8002176:	f000 fb33 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800217a:	20af      	movs	r0, #175	; 0xaf
 800217c:	f000 ff24 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8002180:	2006      	movs	r0, #6
 8002182:	f000 fb2d 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218a:	f000 ff1d 	bl	8002fc8 <HAL_Delay>
	clockwise_90(west_front);
 800218e:	2007      	movs	r0, #7
 8002190:	f000 fab6 	bl	8002700 <clockwise_90>
	anticlockwise_90(east_front);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 faeb 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800219a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800219e:	f000 ff13 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80021a2:	2002      	movs	r0, #2
 80021a4:	f000 fb52 	bl	800284c <servo_push>
	servo_push(south_back);
 80021a8:	2006      	movs	r0, #6
 80021aa:	f000 fb4f 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80021ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b2:	f000 ff09 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 80021b6:	2004      	movs	r0, #4
 80021b8:	f000 fb12 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80021bc:	20af      	movs	r0, #175	; 0xaf
 80021be:	f000 ff03 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 80021c2:	2008      	movs	r0, #8
 80021c4:	f000 fb0c 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80021c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021cc:	f000 fefc 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 fa5d 	bl	8002690 <centre_0>
	centre_0(west_front);
 80021d6:	2007      	movs	r0, #7
 80021d8:	f000 fa5a 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80021dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e0:	f000 fef2 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80021e4:	2004      	movs	r0, #4
 80021e6:	f000 fb31 	bl	800284c <servo_push>
	servo_push(west_back);
 80021ea:	2008      	movs	r0, #8
 80021ec:	f000 fb2e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80021f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021f4:	f000 fee8 	bl	8002fc8 <HAL_Delay>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <movement_Y>:

// Number of Delay: 18
void movement_Y(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	movement_X();
 8002200:	f7ff ff70 	bl	80020e4 <movement_X>
	movement_aZ();
 8002204:	f000 f854 	bl	80022b0 <movement_aZ>
	movement_aX();
 8002208:	f7ff ffb2 	bl	8002170 <movement_aX>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <movement_aY>:

// Number of Delay: 18
void movement_aY(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	movement_X();
 8002214:	f7ff ff66 	bl	80020e4 <movement_X>
	movement_Z();
 8002218:	f000 f804 	bl	8002224 <movement_Z>
	movement_aX();
 800221c:	f7ff ffa8 	bl	8002170 <movement_aX>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <movement_Z>:

// Number of Delay: 6
void movement_Z(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8002228:	2004      	movs	r0, #4
 800222a:	f000 fad9 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800222e:	20af      	movs	r0, #175	; 0xaf
 8002230:	f000 feca 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8002234:	2008      	movs	r0, #8
 8002236:	f000 fad3 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800223a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223e:	f000 fec3 	bl	8002fc8 <HAL_Delay>
	clockwise_90(south_front);
 8002242:	2005      	movs	r0, #5
 8002244:	f000 fa5c 	bl	8002700 <clockwise_90>
	anticlockwise_90(north_front);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fa91 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800224e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002252:	f000 feb9 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8002256:	2004      	movs	r0, #4
 8002258:	f000 faf8 	bl	800284c <servo_push>
	servo_push(west_back);
 800225c:	2008      	movs	r0, #8
 800225e:	f000 faf5 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002266:	f000 feaf 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 800226a:	2002      	movs	r0, #2
 800226c:	f000 fab8 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8002270:	20af      	movs	r0, #175	; 0xaf
 8002272:	f000 fea9 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8002276:	2006      	movs	r0, #6
 8002278:	f000 fab2 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800227c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002280:	f000 fea2 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8002284:	2005      	movs	r0, #5
 8002286:	f000 fa03 	bl	8002690 <centre_0>
	centre_0(north_front);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 fa00 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8002290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002294:	f000 fe98 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8002298:	2002      	movs	r0, #2
 800229a:	f000 fad7 	bl	800284c <servo_push>
	servo_push(south_back);
 800229e:	2006      	movs	r0, #6
 80022a0:	f000 fad4 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80022a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a8:	f000 fe8e 	bl	8002fc8 <HAL_Delay>
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <movement_aZ>:

// Number of Delay: 6
void movement_aZ(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 80022b4:	2004      	movs	r0, #4
 80022b6:	f000 fa93 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80022ba:	20af      	movs	r0, #175	; 0xaf
 80022bc:	f000 fe84 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 80022c0:	2008      	movs	r0, #8
 80022c2:	f000 fa8d 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80022c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ca:	f000 fe7d 	bl	8002fc8 <HAL_Delay>
	anticlockwise_90(south_front);
 80022ce:	2005      	movs	r0, #5
 80022d0:	f000 fa4e 	bl	8002770 <anticlockwise_90>
	clockwise_90(north_front);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f000 fa13 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80022da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022de:	f000 fe73 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80022e2:	2004      	movs	r0, #4
 80022e4:	f000 fab2 	bl	800284c <servo_push>
	servo_push(west_back);
 80022e8:	2008      	movs	r0, #8
 80022ea:	f000 faaf 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80022ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f2:	f000 fe69 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80022f6:	2002      	movs	r0, #2
 80022f8:	f000 fa72 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80022fc:	20af      	movs	r0, #175	; 0xaf
 80022fe:	f000 fe63 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8002302:	2006      	movs	r0, #6
 8002304:	f000 fa6c 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230c:	f000 fe5c 	bl	8002fc8 <HAL_Delay>
	centre_0(south_front);
 8002310:	2005      	movs	r0, #5
 8002312:	f000 f9bd 	bl	8002690 <centre_0>
	centre_0(north_front);
 8002316:	2001      	movs	r0, #1
 8002318:	f000 f9ba 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800231c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002320:	f000 fe52 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8002324:	2002      	movs	r0, #2
 8002326:	f000 fa91 	bl	800284c <servo_push>
	servo_push(south_back);
 800232a:	2006      	movs	r0, #6
 800232c:	f000 fa8e 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002334:	f000 fe48 	bl	8002fc8 <HAL_Delay>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <movement_M>:

// Number of Delay: 4
void movement_M(void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f9dd 	bl	8002700 <clockwise_90>
	anticlockwise_90(west_front);
 8002346:	2007      	movs	r0, #7
 8002348:	f000 fa12 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800234c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002350:	f000 fe3a 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 8002354:	2002      	movs	r0, #2
 8002356:	f000 fa43 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800235a:	20af      	movs	r0, #175	; 0xaf
 800235c:	f000 fe34 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 8002360:	2006      	movs	r0, #6
 8002362:	f000 fa3d 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800236a:	f000 fe2d 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 800236e:	2003      	movs	r0, #3
 8002370:	f000 f98e 	bl	8002690 <centre_0>
	centre_0(west_front);
 8002374:	2007      	movs	r0, #7
 8002376:	f000 f98b 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800237a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800237e:	f000 fe23 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 8002382:	2002      	movs	r0, #2
 8002384:	f000 fa62 	bl	800284c <servo_push>
	servo_push(south_back);
 8002388:	2006      	movs	r0, #6
 800238a:	f000 fa5f 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800238e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002392:	f000 fe19 	bl	8002fc8 <HAL_Delay>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}

0800239a <movement_aM>:

// Number of Delay: 4
void movement_aM(void) {
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 800239e:	2003      	movs	r0, #3
 80023a0:	f000 f9e6 	bl	8002770 <anticlockwise_90>
	clockwise_90(west_front);
 80023a4:	2007      	movs	r0, #7
 80023a6:	f000 f9ab 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80023aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ae:	f000 fe0b 	bl	8002fc8 <HAL_Delay>
	servo_pull(north_back);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f000 fa14 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80023b8:	20af      	movs	r0, #175	; 0xaf
 80023ba:	f000 fe05 	bl	8002fc8 <HAL_Delay>
	servo_pull(south_back);
 80023be:	2006      	movs	r0, #6
 80023c0:	f000 fa0e 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80023c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023c8:	f000 fdfe 	bl	8002fc8 <HAL_Delay>
	centre_0(east_front);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f95f 	bl	8002690 <centre_0>
	centre_0(west_front);
 80023d2:	2007      	movs	r0, #7
 80023d4:	f000 f95c 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80023d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023dc:	f000 fdf4 	bl	8002fc8 <HAL_Delay>
	servo_push(north_back);
 80023e0:	2002      	movs	r0, #2
 80023e2:	f000 fa33 	bl	800284c <servo_push>
	servo_push(south_back);
 80023e6:	2006      	movs	r0, #6
 80023e8:	f000 fa30 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80023ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023f0:	f000 fdea 	bl	8002fc8 <HAL_Delay>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <movement_E>:

// Number of Delay: 14
void movement_E(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	movement_Z();
 80023fc:	f7ff ff12 	bl	8002224 <movement_Z>
	movement_M();
 8002400:	f7ff ff9c 	bl	800233c <movement_M>
	movement_aZ();
 8002404:	f7ff ff54 	bl	80022b0 <movement_aZ>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <movement_aE>:

// Number of Delay: 14
void movement_aE(void) {
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	movement_aZ();
 8002410:	f7ff ff4e 	bl	80022b0 <movement_aZ>
	movement_M();
 8002414:	f7ff ff92 	bl	800233c <movement_M>
	movement_Z();
 8002418:	f7ff ff04 	bl	8002224 <movement_Z>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <movement_S>:

// Number of Delay: 4
void movement_S(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8002424:	2001      	movs	r0, #1
 8002426:	f000 f96b 	bl	8002700 <clockwise_90>
	anticlockwise_90(south_front);
 800242a:	2005      	movs	r0, #5
 800242c:	f000 f9a0 	bl	8002770 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8002430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002434:	f000 fdc8 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8002438:	2004      	movs	r0, #4
 800243a:	f000 f9d1 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800243e:	20af      	movs	r0, #175	; 0xaf
 8002440:	f000 fdc2 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 8002444:	2008      	movs	r0, #8
 8002446:	f000 f9cb 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800244a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800244e:	f000 fdbb 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 f91c 	bl	8002690 <centre_0>
	centre_0(south_front);
 8002458:	2005      	movs	r0, #5
 800245a:	f000 f919 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800245e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002462:	f000 fdb1 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 8002466:	2004      	movs	r0, #4
 8002468:	f000 f9f0 	bl	800284c <servo_push>
	servo_push(west_back);
 800246c:	2008      	movs	r0, #8
 800246e:	f000 f9ed 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8002472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002476:	f000 fda7 	bl	8002fc8 <HAL_Delay>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}

0800247e <movement_aS>:

// Number of Delay: 4
void movement_aS(void) {
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 8002482:	2001      	movs	r0, #1
 8002484:	f000 f974 	bl	8002770 <anticlockwise_90>
	clockwise_90(south_front);
 8002488:	2005      	movs	r0, #5
 800248a:	f000 f939 	bl	8002700 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800248e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002492:	f000 fd99 	bl	8002fc8 <HAL_Delay>
	servo_pull(east_back);
 8002496:	2004      	movs	r0, #4
 8002498:	f000 f9a2 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800249c:	20af      	movs	r0, #175	; 0xaf
 800249e:	f000 fd93 	bl	8002fc8 <HAL_Delay>
	servo_pull(west_back);
 80024a2:	2008      	movs	r0, #8
 80024a4:	f000 f99c 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80024a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ac:	f000 fd8c 	bl	8002fc8 <HAL_Delay>
	centre_0(north_front);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f000 f8ed 	bl	8002690 <centre_0>
	centre_0(south_front);
 80024b6:	2005      	movs	r0, #5
 80024b8:	f000 f8ea 	bl	8002690 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80024bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c0:	f000 fd82 	bl	8002fc8 <HAL_Delay>
	servo_push(east_back);
 80024c4:	2004      	movs	r0, #4
 80024c6:	f000 f9c1 	bl	800284c <servo_push>
	servo_push(west_back);
 80024ca:	2008      	movs	r0, #8
 80024cc:	f000 f9be 	bl	800284c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80024d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024d4:	f000 fd78 	bl	8002fc8 <HAL_Delay>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <movement_u>:

// Number of Delay: 31
void movement_u(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	movement_D();
 80024e0:	f7ff f898 	bl	8001614 <movement_D>
	movement_Y();
 80024e4:	f7ff fe8a 	bl	80021fc <movement_Y>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <movement_au>:

// Number of Delay: 31
void movement_au(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	movement_aD();
 80024f0:	f7ff f922 	bl	8001738 <movement_aD>
	movement_aY();
 80024f4:	f7ff fe8c 	bl	8002210 <movement_aY>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <movement_l>:

// Number of Delay: 10
void movement_l(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	movement_R();
 8002500:	f7fe febc 	bl	800127c <movement_R>
	movement_aX();
 8002504:	f7ff fe34 	bl	8002170 <movement_aX>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <movement_al>:

// Number of Delay: 10
void movement_al(void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	movement_aR();
 8002510:	f7fe fed4 	bl	80012bc <movement_aR>
	movement_X();
 8002514:	f7ff fde6 	bl	80020e4 <movement_X>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <movement_f>:

// Number of Delay: 10
void movement_f(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	movement_B();
 8002520:	f7fe ff2c 	bl	800137c <movement_B>
	movement_Z();
 8002524:	f7ff fe7e 	bl	8002224 <movement_Z>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <movement_af>:

// Number of Delay: 10
void movement_af(void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	movement_aB();
 8002530:	f7fe ff44 	bl	80013bc <movement_aB>
	movement_aZ();
 8002534:	f7ff febc 	bl	80022b0 <movement_aZ>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <movement_r>:

// Number of Delay: 10
void movement_r(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	movement_L();
 8002540:	f7fe fedc 	bl	80012fc <movement_L>
	movement_X();
 8002544:	f7ff fdce 	bl	80020e4 <movement_X>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <movement_ar>:

// Number of Delay: 10
void movement_ar(void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	movement_aL();
 8002550:	f7fe fef4 	bl	800133c <movement_aL>
	movement_aX();
 8002554:	f7ff fe0c 	bl	8002170 <movement_aX>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <movement_b>:

// Number of Delay: 10
void movement_b(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	movement_F();
 8002560:	f7fe fe4c 	bl	80011fc <movement_F>
	movement_aZ();
 8002564:	f7ff fea4 	bl	80022b0 <movement_aZ>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <movement_ab>:

// Number of Delay: 10
void movement_ab(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	movement_aF();
 8002570:	f7fe fe64 	bl	800123c <movement_aF>
	movement_Z();
 8002574:	f7ff fe56 	bl	8002224 <movement_Z>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <movement_d>:

// Number of Delay: 31
void movement_d(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	movement_U();
 8002580:	f7fe ff3c 	bl	80013fc <movement_U>
	movement_aY();
 8002584:	f7ff fe44 	bl	8002210 <movement_aY>
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <movement_ad>:

// Number of Delay: 31
void movement_ad(void) {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	movement_aU();
 8002590:	f7fe ffba 	bl	8001508 <movement_aU>
	movement_Y();
 8002594:	f7ff fe32 	bl	80021fc <movement_Y>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <insert_cube>:
		servo_pull(i*2);
		centre_0(i*2-1);
	}
}

void insert_cube(uint8_t *start) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	if (*start == 0) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d138      	bne.n	800261e <insert_cube+0x82>
		for (uint8_t i = 1; i <= 4; i++)
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e008      	b.n	80025c4 <insert_cube+0x28>
			servo_pull(i*2);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f911 	bl	80027e0 <servo_pull>
		for (uint8_t i = 1; i <= 4; i++)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d9f3      	bls.n	80025b2 <insert_cube+0x16>
		HAL_Delay(DELAY_TIME_P);
 80025ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ce:	f000 fcfb 	bl	8002fc8 <HAL_Delay>
		for (uint8_t i = 1; i <= 4; i++)
 80025d2:	2301      	movs	r3, #1
 80025d4:	73bb      	strb	r3, [r7, #14]
 80025d6:	e00a      	b.n	80025ee <insert_cube+0x52>
			centre_0(i*2-1);
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f854 	bl	8002690 <centre_0>
		for (uint8_t i = 1; i <= 4; i++)
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	3301      	adds	r3, #1
 80025ec:	73bb      	strb	r3, [r7, #14]
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d9f1      	bls.n	80025d8 <insert_cube+0x3c>
		HAL_Delay(DELAY_TIME_90);
 80025f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f8:	f000 fce6 	bl	8002fc8 <HAL_Delay>
		servo_push(north_back);
 80025fc:	2002      	movs	r0, #2
 80025fe:	f000 f925 	bl	800284c <servo_push>
		servo_push(west_back);
 8002602:	2008      	movs	r0, #8
 8002604:	f000 f922 	bl	800284c <servo_push>
		HAL_Delay(DELAY_TIME_P);
 8002608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800260c:	f000 fcdc 	bl	8002fc8 <HAL_Delay>
		(*start)++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	701a      	strb	r2, [r3, #0]
			servo_push(i*2);
		HAL_Delay(DELAY_TIME_P);
		(*start)++;
	}

}
 800261c:	e023      	b.n	8002666 <insert_cube+0xca>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == SET && *start == 1) {
 800261e:	2101      	movs	r1, #1
 8002620:	4813      	ldr	r0, [pc, #76]	; (8002670 <insert_cube+0xd4>)
 8002622:	f000 ff6d 	bl	8003500 <HAL_GPIO_ReadPin>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d11c      	bne.n	8002666 <insert_cube+0xca>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d118      	bne.n	8002666 <insert_cube+0xca>
		for (uint8_t i = 1; i <= 4; i++)
 8002634:	2301      	movs	r3, #1
 8002636:	737b      	strb	r3, [r7, #13]
 8002638:	e008      	b.n	800264c <insert_cube+0xb0>
			servo_push(i*2);
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f903 	bl	800284c <servo_push>
		for (uint8_t i = 1; i <= 4; i++)
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	3301      	adds	r3, #1
 800264a:	737b      	strb	r3, [r7, #13]
 800264c:	7b7b      	ldrb	r3, [r7, #13]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d9f3      	bls.n	800263a <insert_cube+0x9e>
		HAL_Delay(DELAY_TIME_P);
 8002652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002656:	f000 fcb7 	bl	8002fc8 <HAL_Delay>
		(*start)++;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	b2da      	uxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	701a      	strb	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40010800 	.word	0x40010800

08002674 <remove_cube>:

void remove_cube(void) {
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8002678:	2006      	movs	r0, #6
 800267a:	f000 f8b1 	bl	80027e0 <servo_pull>
	servo_pull(east_back);
 800267e:	2004      	movs	r0, #4
 8002680:	f000 f8ae 	bl	80027e0 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002688:	f000 fc9e 	bl	8002fc8 <HAL_Delay>
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <centre_0>:

void centre_0(servos servo) {
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <centre_0+0x60>
		uint8_t target = servo/2+1;
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d81b      	bhi.n	80026f0 <centre_0+0x60>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <centre_0+0x30>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d9 	.word	0x080026d9
 80026c8:	080026e1 	.word	0x080026e1
 80026cc:	080026e9 	.word	0x080026e9
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <centre_0+0x6c>)
 80026d2:	225f      	movs	r2, #95	; 0x5f
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80026d6:	e00b      	b.n	80026f0 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <centre_0+0x6c>)
 80026da:	2258      	movs	r2, #88	; 0x58
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80026de:	e007      	b.n	80026f0 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <centre_0+0x6c>)
 80026e2:	225c      	movs	r2, #92	; 0x5c
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80026e6:	e003      	b.n	80026f0 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <centre_0+0x6c>)
 80026ea:	225e      	movs	r2, #94	; 0x5e
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80026ee:	bf00      	nop
		}
	}
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40000400 	.word	0x40000400

08002700 <clockwise_90>:

void clockwise_90(servos servo) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	3b01      	subs	r3, #1
 8002724:	2b03      	cmp	r3, #3
 8002726:	d81b      	bhi.n	8002760 <clockwise_90+0x60>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <clockwise_90+0x30>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002741 	.word	0x08002741
 8002734:	08002749 	.word	0x08002749
 8002738:	08002751 	.word	0x08002751
 800273c:	08002759 	.word	0x08002759
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <clockwise_90+0x6c>)
 8002742:	2299      	movs	r2, #153	; 0x99
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002746:	e00b      	b.n	8002760 <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <clockwise_90+0x6c>)
 800274a:	2291      	movs	r2, #145	; 0x91
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800274e:	e007      	b.n	8002760 <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <clockwise_90+0x6c>)
 8002752:	2296      	movs	r2, #150	; 0x96
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002756:	e003      	b.n	8002760 <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <clockwise_90+0x6c>)
 800275a:	2299      	movs	r2, #153	; 0x99
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800275e:	bf00      	nop
		}
	}
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40000400 	.word	0x40000400

08002770 <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d024      	beq.n	80027d0 <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3b01      	subs	r3, #1
 8002794:	2b03      	cmp	r3, #3
 8002796:	d81b      	bhi.n	80027d0 <anticlockwise_90+0x60>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <anticlockwise_90+0x30>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b9 	.word	0x080027b9
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027c9 	.word	0x080027c9
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <anticlockwise_90+0x6c>)
 80027b2:	2225      	movs	r2, #37	; 0x25
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80027b6:	e00b      	b.n	80027d0 <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <anticlockwise_90+0x6c>)
 80027ba:	221d      	movs	r2, #29
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80027be:	e007      	b.n	80027d0 <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <anticlockwise_90+0x6c>)
 80027c2:	221f      	movs	r2, #31
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80027c6:	e003      	b.n	80027d0 <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <anticlockwise_90+0x6c>)
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80027ce:	bf00      	nop
		}
	}
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40000400 	.word	0x40000400

080027e0 <servo_pull>:

void servo_pull(servos servo) {
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d123      	bne.n	800283e <servo_pull+0x5e>
		uint8_t target = servo/2;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	3b01      	subs	r3, #1
 8002800:	2b03      	cmp	r3, #3
 8002802:	d81c      	bhi.n	800283e <servo_pull+0x5e>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <servo_pull+0x2c>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002825 	.word	0x08002825
 8002814:	0800282f 	.word	0x0800282f
 8002818:	08002837 	.word	0x08002837
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <servo_pull+0x68>)
 800281e:	221e      	movs	r2, #30
 8002820:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002822:	e00c      	b.n	800283e <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 8002824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002828:	221e      	movs	r2, #30
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800282c:	e007      	b.n	800283e <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <servo_pull+0x68>)
 8002830:	221e      	movs	r2, #30
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002834:	e003      	b.n	800283e <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <servo_pull+0x68>)
 8002838:	221e      	movs	r2, #30
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800283c:	bf00      	nop
		}
	}
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40000800 	.word	0x40000800

0800284c <servo_push>:

void servo_push(servos servo) {
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d123      	bne.n	80028aa <servo_push+0x5e>
		uint8_t target = servo/2;
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	3b01      	subs	r3, #1
 800286c:	2b03      	cmp	r3, #3
 800286e:	d81c      	bhi.n	80028aa <servo_push+0x5e>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <servo_push+0x2c>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	08002889 	.word	0x08002889
 800287c:	08002891 	.word	0x08002891
 8002880:	0800289b 	.word	0x0800289b
 8002884:	080028a3 	.word	0x080028a3
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <servo_push+0x68>)
 800288a:	2269      	movs	r2, #105	; 0x69
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800288e:	e00c      	b.n	80028aa <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 8002890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002894:	225a      	movs	r2, #90	; 0x5a
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002898:	e007      	b.n	80028aa <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <servo_push+0x68>)
 800289c:	2264      	movs	r2, #100	; 0x64
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80028a0:	e003      	b.n	80028aa <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <servo_push+0x68>)
 80028a4:	225f      	movs	r2, #95	; 0x5f
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80028a8:	bf00      	nop
		}
	}
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40000800 	.word	0x40000800

080028b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_MspInit+0x5c>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_MspInit+0x5c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6193      	str	r3, [r2, #24]
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_MspInit+0x5c>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_MspInit+0x5c>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_MspInit+0x5c>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	61d3      	str	r3, [r2, #28]
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_MspInit+0x5c>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_MspInit+0x60>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_MspInit+0x60>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002962:	f000 fb15 	bl	8002f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f002 f942 	bl	8004c24 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20010000 	.word	0x20010000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200000c4 	.word	0x200000c4
 80029d4:	200002f0 	.word	0x200002f0

080029d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a1e:	f240 42af 	movw	r2, #1199	; 0x4af
 8002a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b29      	ldr	r3, [pc, #164]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a2c:	f240 42af 	movw	r2, #1199	; 0x4af
 8002a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a3e:	4823      	ldr	r0, [pc, #140]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a40:	f001 f9c3 	bl	8003dca <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a4a:	f7fe fbd2 	bl	80011f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	481c      	ldr	r0, [pc, #112]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a5c:	f001 fbd4 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a66:	f7fe fbc4 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a6a:	4818      	ldr	r0, [pc, #96]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a6c:	f001 f9fc 	bl	8003e68 <HAL_TIM_PWM_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a76:	f7fe fbbc 	bl	80011f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	4619      	mov	r1, r3
 8002a88:	4810      	ldr	r0, [pc, #64]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002a8a:	f001 ff61 	bl	8004950 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a94:	f7fe fbad 	bl	80011f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a98:	2360      	movs	r3, #96	; 0x60
 8002a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8002a9c:	231e      	movs	r3, #30
 8002a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2208      	movs	r2, #8
 8002aac:	4619      	mov	r1, r3
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002ab0:	f001 faec 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002aba:	f7fe fb9a 	bl	80011f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002abe:	4803      	ldr	r0, [pc, #12]	; (8002acc <MX_TIM2_Init+0xe8>)
 8002ac0:	f000 f970 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002ac4:	bf00      	nop
 8002ac6:	3738      	adds	r7, #56	; 0x38
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200000c8 	.word	0x200000c8

08002ad0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae4:	f107 0320 	add.w	r3, r7, #32
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
 8002afc:	615a      	str	r2, [r3, #20]
 8002afe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b00:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b02:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <MX_TIM3_Init+0x12c>)
 8002b04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8002b06:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b08:	f240 42af 	movw	r2, #1199	; 0x4af
 8002b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8002b14:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b16:	f240 42af 	movw	r2, #1199	; 0x4af
 8002b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b22:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b28:	4833      	ldr	r0, [pc, #204]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b2a:	f001 f94e 	bl	8003dca <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002b34:	f7fe fb5d 	bl	80011f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b42:	4619      	mov	r1, r3
 8002b44:	482c      	ldr	r0, [pc, #176]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b46:	f001 fb5f 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002b50:	f7fe fb4f 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b54:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b56:	f001 f987 	bl	8003e68 <HAL_TIM_PWM_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002b60:	f7fe fb47 	bl	80011f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	4619      	mov	r1, r3
 8002b72:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b74:	f001 feec 	bl	8004950 <HAL_TIMEx_MasterConfigSynchronization>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002b7e:	f7fe fb38 	bl	80011f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b82:	2360      	movs	r3, #96	; 0x60
 8002b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002b86:	231c      	movs	r3, #28
 8002b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	4619      	mov	r1, r3
 8002b98:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002b9a:	f001 fa77 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ba4:	f7fe fb25 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2204      	movs	r2, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4812      	ldr	r0, [pc, #72]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002bb0:	f001 fa6c 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002bba:	f7fe fb1a 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002bc6:	f001 fa61 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002bd0:	f7fe fb0f 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4807      	ldr	r0, [pc, #28]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002bdc:	f001 fa56 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002be6:	f7fe fb04 	bl	80011f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002bea:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <MX_TIM3_Init+0x128>)
 8002bec:	f000 f8da 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002bf0:	bf00      	nop
 8002bf2:	3738      	adds	r7, #56	; 0x38
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000110 	.word	0x20000110
 8002bfc:	40000400 	.word	0x40000400

08002c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08e      	sub	sp, #56	; 0x38
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	f107 0320 	add.w	r3, r7, #32
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	615a      	str	r2, [r3, #20]
 8002c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c32:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <MX_TIM4_Init+0x118>)
 8002c34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c38:	f240 42af 	movw	r2, #1199	; 0x4af
 8002c3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8002c44:	4b33      	ldr	r3, [pc, #204]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c46:	f240 42af 	movw	r2, #1199	; 0x4af
 8002c4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c58:	482e      	ldr	r0, [pc, #184]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c5a:	f001 f8b6 	bl	8003dca <HAL_TIM_Base_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002c64:	f7fe fac5 	bl	80011f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4827      	ldr	r0, [pc, #156]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c76:	f001 fac7 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002c80:	f7fe fab7 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c84:	4823      	ldr	r0, [pc, #140]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002c86:	f001 f8ef 	bl	8003e68 <HAL_TIM_PWM_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002c90:	f7fe faaf 	bl	80011f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c9c:	f107 0320 	add.w	r3, r7, #32
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	481c      	ldr	r0, [pc, #112]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002ca4:	f001 fe54 	bl	8004950 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002cae:	f7fe faa0 	bl	80011f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb2:	2360      	movs	r3, #96	; 0x60
 8002cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002cb6:	231c      	movs	r3, #28
 8002cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4812      	ldr	r0, [pc, #72]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002cca:	f001 f9df 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002cd4:	f7fe fa8d 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2208      	movs	r2, #8
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480d      	ldr	r0, [pc, #52]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002ce0:	f001 f9d4 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002cea:	f7fe fa82 	bl	80011f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002cf6:	f001 f9c9 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002d00:	f7fe fa77 	bl	80011f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d04:	4803      	ldr	r0, [pc, #12]	; (8002d14 <MX_TIM4_Init+0x114>)
 8002d06:	f000 f84d 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	; 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000158 	.word	0x20000158
 8002d18:	40000800 	.word	0x40000800

08002d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	61d3      	str	r3, [r2, #28]
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d46:	e022      	b.n	8002d8e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_TIM_Base_MspInit+0x80>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	61d3      	str	r3, [r2, #28]
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
}
 8002d6a:	e010      	b.n	8002d8e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_TIM_Base_MspInit+0x84>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10b      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	61d3      	str	r3, [r2, #28]
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_TIM_Base_MspInit+0x7c>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d118      	bne.n	8002df6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	482c      	ldr	r0, [pc, #176]	; (8002ea0 <HAL_TIM_MspPostInit+0xfc>)
 8002df0:	f000 f9f2 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002df4:	e04e      	b.n	8002e94 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_TIM_MspPostInit+0x100>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d12b      	bne.n	8002e58 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e18:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	481e      	ldr	r0, [pc, #120]	; (8002ea8 <HAL_TIM_MspPostInit+0x104>)
 8002e2e:	f000 f9d3 	bl	80031d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_TIM_MspPostInit+0x108>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_TIM_MspPostInit+0x108>)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	6053      	str	r3, [r2, #4]
}
 8002e56:	e01d      	b.n	8002e94 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_TIM_MspPostInit+0x10c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d118      	bne.n	8002e94 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6193      	str	r3, [r2, #24]
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_TIM_MspPostInit+0xf8>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002e7a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2302      	movs	r3, #2
 8002e86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <HAL_TIM_MspPostInit+0x110>)
 8002e90:	f000 f9a2 	bl	80031d8 <HAL_GPIO_Init>
}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40010c00 	.word	0x40010c00

08002eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	; (8002efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ede:	f7ff fd7b 	bl	80029d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f001 fea5 	bl	8004c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7fd fe2d 	bl	8000b44 <main>
  bx lr
 8002eea:	4770      	bx	lr
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002ef4:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8002ef8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002efc:	200002ec 	.word	0x200002ec

08002f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_2_IRQHandler>
	...

08002f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_Init+0x28>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_Init+0x28>)
 8002f0e:	f043 0310 	orr.w	r3, r3, #16
 8002f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f14:	2003      	movs	r0, #3
 8002f16:	f000 f92b 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	f000 f808 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f20:	f7ff fcca 	bl	80028b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_InitTick+0x54>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_InitTick+0x58>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f935 	bl	80031be <HAL_SYSTICK_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00e      	b.n	8002f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d80a      	bhi.n	8002f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f6c:	f000 f90b 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <HAL_InitTick+0x5c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_IncTick+0x1c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_IncTick+0x20>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_IncTick+0x20>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	200001a0 	.word	0x200001a0

08002fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_GetTick+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	200001a0 	.word	0x200001a0

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffe0 	bl	8002fb4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000008 	.word	0x20000008

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003150:	f7ff ff90 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff49 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff5e 	bl	8003058 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffb0 	bl	800312c <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	; 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e179      	b.n	80034e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031ec:	2201      	movs	r2, #1
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	429a      	cmp	r2, r3
 8003206:	f040 8168 	bne.w	80034da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a96      	ldr	r2, [pc, #600]	; (8003468 <HAL_GPIO_Init+0x290>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05e      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003214:	4a94      	ldr	r2, [pc, #592]	; (8003468 <HAL_GPIO_Init+0x290>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d875      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800321a:	4a94      	ldr	r2, [pc, #592]	; (800346c <HAL_GPIO_Init+0x294>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d058      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003220:	4a92      	ldr	r2, [pc, #584]	; (800346c <HAL_GPIO_Init+0x294>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d86f      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003226:	4a92      	ldr	r2, [pc, #584]	; (8003470 <HAL_GPIO_Init+0x298>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d052      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 800322c:	4a90      	ldr	r2, [pc, #576]	; (8003470 <HAL_GPIO_Init+0x298>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d869      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <HAL_GPIO_Init+0x29c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04c      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003238:	4a8e      	ldr	r2, [pc, #568]	; (8003474 <HAL_GPIO_Init+0x29c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d863      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800323e:	4a8e      	ldr	r2, [pc, #568]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d046      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003244:	4a8c      	ldr	r2, [pc, #560]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d85d      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800324a:	2b12      	cmp	r3, #18
 800324c:	d82a      	bhi.n	80032a4 <HAL_GPIO_Init+0xcc>
 800324e:	2b12      	cmp	r3, #18
 8003250:	d859      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_GPIO_Init+0x80>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032bf 	.word	0x080032bf
 8003264:	08003301 	.word	0x08003301
 8003268:	08003307 	.word	0x08003307
 800326c:	08003307 	.word	0x08003307
 8003270:	08003307 	.word	0x08003307
 8003274:	08003307 	.word	0x08003307
 8003278:	08003307 	.word	0x08003307
 800327c:	08003307 	.word	0x08003307
 8003280:	08003307 	.word	0x08003307
 8003284:	08003307 	.word	0x08003307
 8003288:	08003307 	.word	0x08003307
 800328c:	08003307 	.word	0x08003307
 8003290:	08003307 	.word	0x08003307
 8003294:	08003307 	.word	0x08003307
 8003298:	08003307 	.word	0x08003307
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	4a75      	ldr	r2, [pc, #468]	; (800347c <HAL_GPIO_Init+0x2a4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032aa:	e02c      	b.n	8003306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e029      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e024      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	3308      	adds	r3, #8
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e01f      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	330c      	adds	r3, #12
 80032ce:	623b      	str	r3, [r7, #32]
          break;
 80032d0:	e01a      	b.n	8003308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032da:	2304      	movs	r3, #4
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e013      	b.n	8003308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e8:	2308      	movs	r3, #8
 80032ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	611a      	str	r2, [r3, #16]
          break;
 80032f2:	e009      	b.n	8003308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f4:	2308      	movs	r3, #8
 80032f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	615a      	str	r2, [r3, #20]
          break;
 80032fe:	e003      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x130>
          break;
 8003306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d801      	bhi.n	8003312 <HAL_GPIO_Init+0x13a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_Init+0x13e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d802      	bhi.n	8003324 <HAL_GPIO_Init+0x14c>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	e002      	b.n	800332a <HAL_GPIO_Init+0x152>
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3b08      	subs	r3, #8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	210f      	movs	r1, #15
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80c1 	beq.w	80034da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003358:	4b49      	ldr	r3, [pc, #292]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a48      	ldr	r2, [pc, #288]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003370:	4a44      	ldr	r2, [pc, #272]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3c      	ldr	r2, [pc, #240]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01f      	beq.n	80033dc <HAL_GPIO_Init+0x204>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3b      	ldr	r2, [pc, #236]	; (800348c <HAL_GPIO_Init+0x2b4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d019      	beq.n	80033d8 <HAL_GPIO_Init+0x200>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3a      	ldr	r2, [pc, #232]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_GPIO_Init+0x1fc>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00d      	beq.n	80033d0 <HAL_GPIO_Init+0x1f8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <HAL_GPIO_Init+0x1f4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a37      	ldr	r2, [pc, #220]	; (800349c <HAL_GPIO_Init+0x2c4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_GPIO_Init+0x1f0>
 80033c4:	2305      	movs	r3, #5
 80033c6:	e00a      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033c8:	2306      	movs	r3, #6
 80033ca:	e008      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e006      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033d0:	2303      	movs	r3, #3
 80033d2:	e004      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e002      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_GPIO_Init+0x206>
 80033dc:	2300      	movs	r3, #0
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	f002 0203 	and.w	r2, r2, #3
 80033e4:	0092      	lsls	r2, r2, #2
 80033e6:	4093      	lsls	r3, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ee:	4925      	ldr	r1, [pc, #148]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4924      	ldr	r1, [pc, #144]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	43db      	mvns	r3, r3
 800341e:	4920      	ldr	r1, [pc, #128]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003420:	4013      	ands	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	491a      	ldr	r1, [pc, #104]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	43db      	mvns	r3, r3
 8003446:	4916      	ldr	r1, [pc, #88]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003448:	4013      	ands	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4910      	ldr	r1, [pc, #64]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
 8003464:	e025      	b.n	80034b2 <HAL_GPIO_Init+0x2da>
 8003466:	bf00      	nop
 8003468:	10320000 	.word	0x10320000
 800346c:	10310000 	.word	0x10310000
 8003470:	10220000 	.word	0x10220000
 8003474:	10210000 	.word	0x10210000
 8003478:	10120000 	.word	0x10120000
 800347c:	10110000 	.word	0x10110000
 8003480:	40021000 	.word	0x40021000
 8003484:	40010000 	.word	0x40010000
 8003488:	40010800 	.word	0x40010800
 800348c:	40010c00 	.word	0x40010c00
 8003490:	40011000 	.word	0x40011000
 8003494:	40011400 	.word	0x40011400
 8003498:	40011800 	.word	0x40011800
 800349c:	40011c00 	.word	0x40011c00
 80034a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4913      	ldr	r1, [pc, #76]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
 80034ca:	e006      	b.n	80034da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	4909      	ldr	r1, [pc, #36]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	3301      	adds	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f ae7e 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	372c      	adds	r7, #44	; 0x2c
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
 800351c:	e001      	b.n	8003522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]
 800353a:	4613      	mov	r3, r2
 800353c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800353e:	787b      	ldrb	r3, [r7, #1]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800354a:	e003      	b.n	8003554 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	611a      	str	r2, [r3, #16]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e272      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4b92      	ldr	r3, [pc, #584]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4b8f      	ldr	r3, [pc, #572]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d112      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
 8003598:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d10b      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <HAL_RCC_OscConfig+0x12c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e24c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x76>
 80035c8:	4b80      	ldr	r3, [pc, #512]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7f      	ldr	r2, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e02e      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b7b      	ldr	r3, [pc, #492]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7a      	ldr	r2, [pc, #488]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b78      	ldr	r3, [pc, #480]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a77      	ldr	r2, [pc, #476]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xbc>
 8003602:	4b72      	ldr	r3, [pc, #456]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a71      	ldr	r2, [pc, #452]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 800361c:	4b6b      	ldr	r3, [pc, #428]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b68      	ldr	r3, [pc, #416]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a67      	ldr	r2, [pc, #412]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff fcba 	bl	8002fb4 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff fcb6 	bl	8002fb4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e200      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xe4>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7ff fca6 	bl	8002fb4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7ff fca2 	bl	8002fb4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1ec      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x10c>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036a6:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c0      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7ff fc5b 	bl	8002fb4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7ff fc57 	bl	8002fb4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4927      	ldr	r1, [pc, #156]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7ff fc3a 	bl	8002fb4 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7ff fc36 	bl	8002fb4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e180      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d019      	beq.n	80037aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_OscConfig+0x274>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7ff fc1a 	bl	8002fb4 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7ff fc16 	bl	8002fb4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e160      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 faa6 	bl	8003cf4 <RCC_Delay>
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7ff fc00 	bl	8002fb4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7ff fbfc 	bl	8002fb4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d908      	bls.n	80037d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e146      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	42420000 	.word	0x42420000
 80037d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e9      	bne.n	80037b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a6 	beq.w	800393e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4a87      	ldr	r2, [pc, #540]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	61d3      	str	r3, [r2, #28]
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b82      	ldr	r3, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b7f      	ldr	r3, [pc, #508]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7ff fbbd 	bl	8002fb4 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7ff fbb9 	bl	8002fb4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e103      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x312>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e02d      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x334>
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a66      	ldr	r2, [pc, #408]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	e01c      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x356>
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a60      	ldr	r2, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 80038b6:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	4b58      	ldr	r3, [pc, #352]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7ff fb6d 	bl	8002fb4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7ff fb69 	bl	8002fb4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ee      	beq.n	80038de <HAL_RCC_OscConfig+0x37e>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7ff fb57 	bl	8002fb4 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7ff fb53 	bl	8002fb4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ee      	bne.n	800390a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d061      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d146      	bne.n	80039ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7ff fb27 	bl	8002fb4 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7ff fb23 	bl	8002fb4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e06d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397c:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a4:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a19      	ldr	r1, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	491b      	ldr	r1, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7ff faf7 	bl	8002fb4 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7ff faf3 	bl	8002fb4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x46a>
 80039e8:	e035      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff fae0 	bl	8002fb4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7ff fadc 	bl	8002fb4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e026      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x498>
 8003a16:	e01e      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e019      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x500>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0d0      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	4965      	ldr	r1, [pc, #404]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d040      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e073      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4936      	ldr	r1, [pc, #216]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7ff fa2e 	bl	8002fb4 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7ff fa2a 	bl	8002fb4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e053      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d210      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	4922      	ldr	r1, [pc, #136]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1cc>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f98c 	bl	8002f30 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08005ba4 	.word	0x08005ba4
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b490      	push	{r4, r7}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c40:	1d3c      	adds	r4, r7, #4
 8003c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c48:	f240 2301 	movw	r3, #513	; 0x201
 8003c4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c62:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x40>
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x46>
 8003c76:	e02b      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c78:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c7a:	623b      	str	r3, [r7, #32]
      break;
 8003c7c:	e02b      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	0c9b      	lsrs	r3, r3, #18
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3328      	adds	r3, #40	; 0x28
 8003c88:	443b      	add	r3, r7
 8003c8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c5b      	lsrs	r3, r3, #17
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	3328      	adds	r3, #40	; 0x28
 8003ca6:	443b      	add	r3, r7
 8003ca8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cb2:	fb03 f202 	mul.w	r2, r3, r2
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	e004      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	623b      	str	r3, [r7, #32]
      break;
 8003cce:	e002      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cd2:	623b      	str	r3, [r7, #32]
      break;
 8003cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc90      	pop	{r4, r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	080055a4 	.word	0x080055a4
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	003d0900 	.word	0x003d0900

08003cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <RCC_Delay+0x34>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <RCC_Delay+0x38>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d10:	bf00      	nop
  }
  while (Delay --);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <RCC_Delay+0x1c>
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_SRAM_Init+0x1c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d101      	bne.n	8003d50 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e038      	b.n	8003dc2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7fc fb05 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3308      	adds	r3, #8
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fe57 	bl	8004a28 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	f000 feb9 	bl	8004afc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6858      	ldr	r0, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	f000 fee4 	bl	8004b64 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	f041 0101 	orr.w	r1, r1, #1
 8003db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e041      	b.n	8003e60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe ff93 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 fac1 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e041      	b.n	8003efe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f839 	bl	8003f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 fa72 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start+0x24>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e022      	b.n	8003f82 <HAL_TIM_PWM_Start+0x6a>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d109      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x3e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e015      	b.n	8003f82 <HAL_TIM_PWM_Start+0x6a>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d109      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x58>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e008      	b.n	8003f82 <HAL_TIM_PWM_Start+0x6a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e072      	b.n	8004070 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x82>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	e013      	b.n	8003fc2 <HAL_TIM_PWM_Start+0xaa>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0x92>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	e00b      	b.n	8003fc2 <HAL_TIM_PWM_Start+0xaa>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0xa2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	e003      	b.n	8003fc2 <HAL_TIM_PWM_Start+0xaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fc9c 	bl	8004908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <HAL_TIM_PWM_Start+0x160>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_TIM_PWM_Start+0xcc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_TIM_PWM_Start+0x164>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIM_PWM_Start+0xd0>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_TIM_PWM_Start+0xd2>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_TIM_PWM_Start+0x160>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_TIM_PWM_Start+0x122>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_TIM_PWM_Start+0x164>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_TIM_PWM_Start+0x122>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00e      	beq.n	800403a <HAL_TIM_PWM_Start+0x122>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_TIM_PWM_Start+0x168>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIM_PWM_Start+0x122>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_TIM_PWM_Start+0x16c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_PWM_Start+0x122>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_TIM_PWM_Start+0x170>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d010      	beq.n	800406e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	e007      	b.n	800406e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00

0800408c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0ac      	b.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x174>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	f200 809f 	bhi.w	80041f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080041f5 	.word	0x080041f5
 80040c4:	080041f5 	.word	0x080041f5
 80040c8:	080041f5 	.word	0x080041f5
 80040cc:	08004131 	.word	0x08004131
 80040d0:	080041f5 	.word	0x080041f5
 80040d4:	080041f5 	.word	0x080041f5
 80040d8:	080041f5 	.word	0x080041f5
 80040dc:	08004173 	.word	0x08004173
 80040e0:	080041f5 	.word	0x080041f5
 80040e4:	080041f5 	.word	0x080041f5
 80040e8:	080041f5 	.word	0x080041f5
 80040ec:	080041b3 	.word	0x080041b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f9c4 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6999      	ldr	r1, [r3, #24]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	619a      	str	r2, [r3, #24]
      break;
 800412e:	e062      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fa14 	bl	8004564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	619a      	str	r2, [r3, #24]
      break;
 8004170:	e041      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fa67 	bl	800464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0208 	orr.w	r2, r2, #8
 800418c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0204 	bic.w	r2, r2, #4
 800419c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69d9      	ldr	r1, [r3, #28]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	61da      	str	r2, [r3, #28]
      break;
 80041b0:	e021      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fabb 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	021a      	lsls	r2, r3, #8
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	61da      	str	r2, [r3, #28]
      break;
 80041f2:	e000      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_TIM_ConfigClockSource+0x18>
 800421c:	2302      	movs	r3, #2
 800421e:	e0b3      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x180>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800423e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004246:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d03e      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0xd0>
 800425a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425e:	f200 8087 	bhi.w	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	f000 8085 	beq.w	8004374 <HAL_TIM_ConfigClockSource+0x16c>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d87f      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d01a      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0xa2>
 8004274:	2b70      	cmp	r3, #112	; 0x70
 8004276:	d87b      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b60      	cmp	r3, #96	; 0x60
 800427a:	d050      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x116>
 800427c:	2b60      	cmp	r3, #96	; 0x60
 800427e:	d877      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b50      	cmp	r3, #80	; 0x50
 8004282:	d03c      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0xf6>
 8004284:	2b50      	cmp	r3, #80	; 0x50
 8004286:	d873      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d058      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x136>
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d86f      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004290:	2b30      	cmp	r3, #48	; 0x30
 8004292:	d064      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x156>
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d86b      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d060      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x156>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d867      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d05c      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x156>
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d05a      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042a8:	e062      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f000 fb06 	bl	80048ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	609a      	str	r2, [r3, #8]
      break;
 80042d6:	e04e      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f000 faef 	bl	80048ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fa:	609a      	str	r2, [r3, #8]
      break;
 80042fc:	e03b      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	461a      	mov	r2, r3
 800430c:	f000 fa66 	bl	80047dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2150      	movs	r1, #80	; 0x50
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fabd 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800431c:	e02b      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	461a      	mov	r2, r3
 800432c:	f000 fa84 	bl	8004838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2160      	movs	r1, #96	; 0x60
 8004336:	4618      	mov	r0, r3
 8004338:	f000 faad 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800433c:	e01b      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	461a      	mov	r2, r3
 800434c:	f000 fa46 	bl	80047dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa9d 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800435c:	e00b      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f000 fa94 	bl	8004896 <TIM_ITRx_SetConfig>
        break;
 800436e:	e002      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004374:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a33      	ldr	r2, [pc, #204]	; (8004470 <TIM_Base_SetConfig+0xe0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a32      	ldr	r2, [pc, #200]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00f      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d00b      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2e      	ldr	r2, [pc, #184]	; (800447c <TIM_Base_SetConfig+0xec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a2d      	ldr	r2, [pc, #180]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d108      	bne.n	80043e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <TIM_Base_SetConfig+0xe0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <TIM_Base_SetConfig+0x82>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a21      	ldr	r2, [pc, #132]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <TIM_Base_SetConfig+0x82>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f8:	d00b      	beq.n	8004412 <TIM_Base_SetConfig+0x82>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_Base_SetConfig+0x82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <TIM_Base_SetConfig+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_Base_SetConfig+0x82>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <TIM_Base_SetConfig+0xf0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d108      	bne.n	8004424 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <TIM_Base_SetConfig+0xe0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0xc8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a20      	ldr	r2, [pc, #128]	; (800455c <TIM_OC1_SetConfig+0xd8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC1_SetConfig+0x64>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <TIM_OC1_SetConfig+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0308 	bic.w	r3, r3, #8
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <TIM_OC1_SetConfig+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC1_SetConfig+0x8e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC1_SetConfig+0xdc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d111      	bne.n	8004536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40013400 	.word	0x40013400

08004564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0210 	bic.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0320 	bic.w	r3, r3, #32
 80045ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <TIM_OC2_SetConfig+0xe0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC2_SetConfig+0x68>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a20      	ldr	r2, [pc, #128]	; (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10d      	bne.n	80045e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC2_SetConfig+0xe0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0x94>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40013400 	.word	0x40013400

0800464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <TIM_OC3_SetConfig+0xe0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_OC3_SetConfig+0x66>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a20      	ldr	r2, [pc, #128]	; (8004730 <TIM_OC3_SetConfig+0xe4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10d      	bne.n	80046ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <TIM_OC3_SetConfig+0xe0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC3_SetConfig+0x92>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <TIM_OC3_SetConfig+0xe4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <TIM_OC4_SetConfig+0xa0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC4_SetConfig+0x68>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <TIM_OC4_SetConfig+0xa4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	019b      	lsls	r3, r3, #6
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40013400 	.word	0x40013400

080047dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 030a 	bic.w	r3, r3, #10
 8004818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0210 	bic.w	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	031b      	lsls	r3, r3, #12
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f043 0307 	orr.w	r3, r3, #7
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2201      	movs	r2, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	43db      	mvns	r3, r3
 800492a:	401a      	ands	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e050      	b.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d00e      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10c      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00

08004a28 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f023 0101 	bic.w	r1, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d102      	bne.n	8004a58 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004a52:	2340      	movs	r3, #64	; 0x40
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e001      	b.n	8004a5c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004a68:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004a6e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004a74:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004a7a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004a80:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004a86:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004a8c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004a92:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004a98:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <FSMC_NORSRAM_Init+0xd0>)
 8004ab8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	ea02 0103 	and.w	r1, r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4319      	orrs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	0008fb7f 	.word	0x0008fb7f

08004afc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	051b      	lsls	r3, r3, #20
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	3b02      	subs	r3, #2
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	3201      	adds	r2, #1
 8004b50:	4319      	orrs	r1, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b78:	d11d      	bne.n	8004bb6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b82:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	6811      	ldr	r1, [r2, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6852      	ldr	r2, [r2, #4]
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	4311      	orrs	r1, r2
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	0212      	lsls	r2, r2, #8
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	6992      	ldr	r2, [r2, #24]
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	0412      	lsls	r2, r2, #16
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	ea43 0102 	orr.w	r1, r3, r2
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004bb4:	e005      	b.n	8004bc2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	cff00000 	.word	0xcff00000

08004bd4 <siprintf>:
 8004bd4:	b40e      	push	{r1, r2, r3}
 8004bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bda:	b500      	push	{lr}
 8004bdc:	b09c      	sub	sp, #112	; 0x70
 8004bde:	ab1d      	add	r3, sp, #116	; 0x74
 8004be0:	9002      	str	r0, [sp, #8]
 8004be2:	9006      	str	r0, [sp, #24]
 8004be4:	9107      	str	r1, [sp, #28]
 8004be6:	9104      	str	r1, [sp, #16]
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <siprintf+0x38>)
 8004bea:	4909      	ldr	r1, [pc, #36]	; (8004c10 <siprintf+0x3c>)
 8004bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf0:	9105      	str	r1, [sp, #20]
 8004bf2:	6800      	ldr	r0, [r0, #0]
 8004bf4:	a902      	add	r1, sp, #8
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	f000 f89a 	bl	8004d30 <_svfiprintf_r>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9b02      	ldr	r3, [sp, #8]
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	b01c      	add	sp, #112	; 0x70
 8004c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c08:	b003      	add	sp, #12
 8004c0a:	4770      	bx	lr
 8004c0c:	20000058 	.word	0x20000058
 8004c10:	ffff0208 	.word	0xffff0208

08004c14 <memset>:
 8004c14:	4603      	mov	r3, r0
 8004c16:	4402      	add	r2, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <__errno>:
 8004c24:	4b01      	ldr	r3, [pc, #4]	; (8004c2c <__errno+0x8>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000058 	.word	0x20000058

08004c30 <__libc_init_array>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	2600      	movs	r6, #0
 8004c34:	4d0c      	ldr	r5, [pc, #48]	; (8004c68 <__libc_init_array+0x38>)
 8004c36:	4c0d      	ldr	r4, [pc, #52]	; (8004c6c <__libc_init_array+0x3c>)
 8004c38:	1b64      	subs	r4, r4, r5
 8004c3a:	10a4      	asrs	r4, r4, #2
 8004c3c:	42a6      	cmp	r6, r4
 8004c3e:	d109      	bne.n	8004c54 <__libc_init_array+0x24>
 8004c40:	f000 fc7a 	bl	8005538 <_init>
 8004c44:	2600      	movs	r6, #0
 8004c46:	4d0a      	ldr	r5, [pc, #40]	; (8004c70 <__libc_init_array+0x40>)
 8004c48:	4c0a      	ldr	r4, [pc, #40]	; (8004c74 <__libc_init_array+0x44>)
 8004c4a:	1b64      	subs	r4, r4, r5
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	42a6      	cmp	r6, r4
 8004c50:	d105      	bne.n	8004c5e <__libc_init_array+0x2e>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c58:	4798      	blx	r3
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7ee      	b.n	8004c3c <__libc_init_array+0xc>
 8004c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c62:	4798      	blx	r3
 8004c64:	3601      	adds	r6, #1
 8004c66:	e7f2      	b.n	8004c4e <__libc_init_array+0x1e>
 8004c68:	08005be8 	.word	0x08005be8
 8004c6c:	08005be8 	.word	0x08005be8
 8004c70:	08005be8 	.word	0x08005be8
 8004c74:	08005bec 	.word	0x08005bec

08004c78 <__retarget_lock_acquire_recursive>:
 8004c78:	4770      	bx	lr

08004c7a <__retarget_lock_release_recursive>:
 8004c7a:	4770      	bx	lr

08004c7c <__ssputs_r>:
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	461f      	mov	r7, r3
 8004c82:	688e      	ldr	r6, [r1, #8]
 8004c84:	4682      	mov	sl, r0
 8004c86:	42be      	cmp	r6, r7
 8004c88:	460c      	mov	r4, r1
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	d82c      	bhi.n	8004cea <__ssputs_r+0x6e>
 8004c90:	898a      	ldrh	r2, [r1, #12]
 8004c92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c96:	d026      	beq.n	8004ce6 <__ssputs_r+0x6a>
 8004c98:	6965      	ldr	r5, [r4, #20]
 8004c9a:	6909      	ldr	r1, [r1, #16]
 8004c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ca0:	eba3 0901 	sub.w	r9, r3, r1
 8004ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ca8:	1c7b      	adds	r3, r7, #1
 8004caa:	444b      	add	r3, r9
 8004cac:	106d      	asrs	r5, r5, #1
 8004cae:	429d      	cmp	r5, r3
 8004cb0:	bf38      	it	cc
 8004cb2:	461d      	movcc	r5, r3
 8004cb4:	0553      	lsls	r3, r2, #21
 8004cb6:	d527      	bpl.n	8004d08 <__ssputs_r+0x8c>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f000 f957 	bl	8004f6c <_malloc_r>
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	b360      	cbz	r0, 8004d1c <__ssputs_r+0xa0>
 8004cc2:	464a      	mov	r2, r9
 8004cc4:	6921      	ldr	r1, [r4, #16]
 8004cc6:	f000 fbd9 	bl	800547c <memcpy>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	6126      	str	r6, [r4, #16]
 8004cd8:	444e      	add	r6, r9
 8004cda:	6026      	str	r6, [r4, #0]
 8004cdc:	463e      	mov	r6, r7
 8004cde:	6165      	str	r5, [r4, #20]
 8004ce0:	eba5 0509 	sub.w	r5, r5, r9
 8004ce4:	60a5      	str	r5, [r4, #8]
 8004ce6:	42be      	cmp	r6, r7
 8004ce8:	d900      	bls.n	8004cec <__ssputs_r+0x70>
 8004cea:	463e      	mov	r6, r7
 8004cec:	4632      	mov	r2, r6
 8004cee:	4641      	mov	r1, r8
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	f000 fb8a 	bl	800540a <memmove>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	68a3      	ldr	r3, [r4, #8]
 8004cfa:	1b9b      	subs	r3, r3, r6
 8004cfc:	60a3      	str	r3, [r4, #8]
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	4433      	add	r3, r6
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	462a      	mov	r2, r5
 8004d0a:	f000 fb4f 	bl	80053ac <_realloc_r>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1e0      	bne.n	8004cd6 <__ssputs_r+0x5a>
 8004d14:	4650      	mov	r0, sl
 8004d16:	6921      	ldr	r1, [r4, #16]
 8004d18:	f000 fbbe 	bl	8005498 <_free_r>
 8004d1c:	230c      	movs	r3, #12
 8004d1e:	f8ca 3000 	str.w	r3, [sl]
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	e7e9      	b.n	8004d04 <__ssputs_r+0x88>

08004d30 <_svfiprintf_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	4698      	mov	r8, r3
 8004d36:	898b      	ldrh	r3, [r1, #12]
 8004d38:	4607      	mov	r7, r0
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	4614      	mov	r4, r2
 8004d40:	b09d      	sub	sp, #116	; 0x74
 8004d42:	d50e      	bpl.n	8004d62 <_svfiprintf_r+0x32>
 8004d44:	690b      	ldr	r3, [r1, #16]
 8004d46:	b963      	cbnz	r3, 8004d62 <_svfiprintf_r+0x32>
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	f000 f90f 	bl	8004f6c <_malloc_r>
 8004d4e:	6028      	str	r0, [r5, #0]
 8004d50:	6128      	str	r0, [r5, #16]
 8004d52:	b920      	cbnz	r0, 8004d5e <_svfiprintf_r+0x2e>
 8004d54:	230c      	movs	r3, #12
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	e0d0      	b.n	8004f00 <_svfiprintf_r+0x1d0>
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	616b      	str	r3, [r5, #20]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9309      	str	r3, [sp, #36]	; 0x24
 8004d66:	2320      	movs	r3, #32
 8004d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	f04f 0901 	mov.w	r9, #1
 8004d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004f18 <_svfiprintf_r+0x1e8>
 8004d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d7e:	4623      	mov	r3, r4
 8004d80:	469a      	mov	sl, r3
 8004d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d86:	b10a      	cbz	r2, 8004d8c <_svfiprintf_r+0x5c>
 8004d88:	2a25      	cmp	r2, #37	; 0x25
 8004d8a:	d1f9      	bne.n	8004d80 <_svfiprintf_r+0x50>
 8004d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d90:	d00b      	beq.n	8004daa <_svfiprintf_r+0x7a>
 8004d92:	465b      	mov	r3, fp
 8004d94:	4622      	mov	r2, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f7ff ff6f 	bl	8004c7c <__ssputs_r>
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f000 80a9 	beq.w	8004ef6 <_svfiprintf_r+0x1c6>
 8004da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da6:	445a      	add	r2, fp
 8004da8:	9209      	str	r2, [sp, #36]	; 0x24
 8004daa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80a1 	beq.w	8004ef6 <_svfiprintf_r+0x1c6>
 8004db4:	2300      	movs	r3, #0
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dbe:	f10a 0a01 	add.w	sl, sl, #1
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	9307      	str	r3, [sp, #28]
 8004dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dca:	931a      	str	r3, [sp, #104]	; 0x68
 8004dcc:	4654      	mov	r4, sl
 8004dce:	2205      	movs	r2, #5
 8004dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd4:	4850      	ldr	r0, [pc, #320]	; (8004f18 <_svfiprintf_r+0x1e8>)
 8004dd6:	f000 fb43 	bl	8005460 <memchr>
 8004dda:	9a04      	ldr	r2, [sp, #16]
 8004ddc:	b9d8      	cbnz	r0, 8004e16 <_svfiprintf_r+0xe6>
 8004dde:	06d0      	lsls	r0, r2, #27
 8004de0:	bf44      	itt	mi
 8004de2:	2320      	movmi	r3, #32
 8004de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de8:	0711      	lsls	r1, r2, #28
 8004dea:	bf44      	itt	mi
 8004dec:	232b      	movmi	r3, #43	; 0x2b
 8004dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df2:	f89a 3000 	ldrb.w	r3, [sl]
 8004df6:	2b2a      	cmp	r3, #42	; 0x2a
 8004df8:	d015      	beq.n	8004e26 <_svfiprintf_r+0xf6>
 8004dfa:	4654      	mov	r4, sl
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f04f 0c0a 	mov.w	ip, #10
 8004e02:	9a07      	ldr	r2, [sp, #28]
 8004e04:	4621      	mov	r1, r4
 8004e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e0a:	3b30      	subs	r3, #48	; 0x30
 8004e0c:	2b09      	cmp	r3, #9
 8004e0e:	d94d      	bls.n	8004eac <_svfiprintf_r+0x17c>
 8004e10:	b1b0      	cbz	r0, 8004e40 <_svfiprintf_r+0x110>
 8004e12:	9207      	str	r2, [sp, #28]
 8004e14:	e014      	b.n	8004e40 <_svfiprintf_r+0x110>
 8004e16:	eba0 0308 	sub.w	r3, r0, r8
 8004e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	46a2      	mov	sl, r4
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	e7d2      	b.n	8004dcc <_svfiprintf_r+0x9c>
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	1d19      	adds	r1, r3, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	9103      	str	r1, [sp, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfbb      	ittet	lt
 8004e32:	425b      	neglt	r3, r3
 8004e34:	f042 0202 	orrlt.w	r2, r2, #2
 8004e38:	9307      	strge	r3, [sp, #28]
 8004e3a:	9307      	strlt	r3, [sp, #28]
 8004e3c:	bfb8      	it	lt
 8004e3e:	9204      	strlt	r2, [sp, #16]
 8004e40:	7823      	ldrb	r3, [r4, #0]
 8004e42:	2b2e      	cmp	r3, #46	; 0x2e
 8004e44:	d10c      	bne.n	8004e60 <_svfiprintf_r+0x130>
 8004e46:	7863      	ldrb	r3, [r4, #1]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d134      	bne.n	8004eb6 <_svfiprintf_r+0x186>
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	3402      	adds	r4, #2
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	9203      	str	r2, [sp, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfb8      	it	lt
 8004e5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004f1c <_svfiprintf_r+0x1ec>
 8004e64:	2203      	movs	r2, #3
 8004e66:	4650      	mov	r0, sl
 8004e68:	7821      	ldrb	r1, [r4, #0]
 8004e6a:	f000 faf9 	bl	8005460 <memchr>
 8004e6e:	b138      	cbz	r0, 8004e80 <_svfiprintf_r+0x150>
 8004e70:	2240      	movs	r2, #64	; 0x40
 8004e72:	9b04      	ldr	r3, [sp, #16]
 8004e74:	eba0 000a 	sub.w	r0, r0, sl
 8004e78:	4082      	lsls	r2, r0
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	3401      	adds	r4, #1
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e84:	2206      	movs	r2, #6
 8004e86:	4826      	ldr	r0, [pc, #152]	; (8004f20 <_svfiprintf_r+0x1f0>)
 8004e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e8c:	f000 fae8 	bl	8005460 <memchr>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d038      	beq.n	8004f06 <_svfiprintf_r+0x1d6>
 8004e94:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <_svfiprintf_r+0x1f4>)
 8004e96:	bb1b      	cbnz	r3, 8004ee0 <_svfiprintf_r+0x1b0>
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	3307      	adds	r3, #7
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea6:	4433      	add	r3, r6
 8004ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eaa:	e768      	b.n	8004d7e <_svfiprintf_r+0x4e>
 8004eac:	460c      	mov	r4, r1
 8004eae:	2001      	movs	r0, #1
 8004eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb4:	e7a6      	b.n	8004e04 <_svfiprintf_r+0xd4>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f04f 0c0a 	mov.w	ip, #10
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	3401      	adds	r4, #1
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec8:	3a30      	subs	r2, #48	; 0x30
 8004eca:	2a09      	cmp	r2, #9
 8004ecc:	d903      	bls.n	8004ed6 <_svfiprintf_r+0x1a6>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0c6      	beq.n	8004e60 <_svfiprintf_r+0x130>
 8004ed2:	9105      	str	r1, [sp, #20]
 8004ed4:	e7c4      	b.n	8004e60 <_svfiprintf_r+0x130>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	2301      	movs	r3, #1
 8004eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ede:	e7f0      	b.n	8004ec2 <_svfiprintf_r+0x192>
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <_svfiprintf_r+0x1f8>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	f3af 8000 	nop.w
 8004ef0:	1c42      	adds	r2, r0, #1
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	d1d6      	bne.n	8004ea4 <_svfiprintf_r+0x174>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	065b      	lsls	r3, r3, #25
 8004efa:	f53f af2d 	bmi.w	8004d58 <_svfiprintf_r+0x28>
 8004efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f00:	b01d      	add	sp, #116	; 0x74
 8004f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f06:	ab03      	add	r3, sp, #12
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	462a      	mov	r2, r5
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <_svfiprintf_r+0x1f8>)
 8004f10:	a904      	add	r1, sp, #16
 8004f12:	f000 f91d 	bl	8005150 <_printf_i>
 8004f16:	e7eb      	b.n	8004ef0 <_svfiprintf_r+0x1c0>
 8004f18:	08005bb4 	.word	0x08005bb4
 8004f1c:	08005bba 	.word	0x08005bba
 8004f20:	08005bbe 	.word	0x08005bbe
 8004f24:	00000000 	.word	0x00000000
 8004f28:	08004c7d 	.word	0x08004c7d

08004f2c <sbrk_aligned>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4e0e      	ldr	r6, [pc, #56]	; (8004f68 <sbrk_aligned+0x3c>)
 8004f30:	460c      	mov	r4, r1
 8004f32:	6831      	ldr	r1, [r6, #0]
 8004f34:	4605      	mov	r5, r0
 8004f36:	b911      	cbnz	r1, 8004f3e <sbrk_aligned+0x12>
 8004f38:	f000 fa82 	bl	8005440 <_sbrk_r>
 8004f3c:	6030      	str	r0, [r6, #0]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 fa7d 	bl	8005440 <_sbrk_r>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d00a      	beq.n	8004f60 <sbrk_aligned+0x34>
 8004f4a:	1cc4      	adds	r4, r0, #3
 8004f4c:	f024 0403 	bic.w	r4, r4, #3
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d007      	beq.n	8004f64 <sbrk_aligned+0x38>
 8004f54:	1a21      	subs	r1, r4, r0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 fa72 	bl	8005440 <_sbrk_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d101      	bne.n	8004f64 <sbrk_aligned+0x38>
 8004f60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f64:	4620      	mov	r0, r4
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	200002e4 	.word	0x200002e4

08004f6c <_malloc_r>:
 8004f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f70:	1ccd      	adds	r5, r1, #3
 8004f72:	f025 0503 	bic.w	r5, r5, #3
 8004f76:	3508      	adds	r5, #8
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	bf38      	it	cc
 8004f7c:	250c      	movcc	r5, #12
 8004f7e:	2d00      	cmp	r5, #0
 8004f80:	4607      	mov	r7, r0
 8004f82:	db01      	blt.n	8004f88 <_malloc_r+0x1c>
 8004f84:	42a9      	cmp	r1, r5
 8004f86:	d905      	bls.n	8004f94 <_malloc_r+0x28>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	2600      	movs	r6, #0
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005068 <_malloc_r+0xfc>
 8004f98:	f000 f9fc 	bl	8005394 <__malloc_lock>
 8004f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	bb5c      	cbnz	r4, 8004ffc <_malloc_r+0x90>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f7ff ffc0 	bl	8004f2c <sbrk_aligned>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	4604      	mov	r4, r0
 8004fb0:	d155      	bne.n	800505e <_malloc_r+0xf2>
 8004fb2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fb6:	4626      	mov	r6, r4
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	d145      	bne.n	8005048 <_malloc_r+0xdc>
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d048      	beq.n	8005052 <_malloc_r+0xe6>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	eb04 0903 	add.w	r9, r4, r3
 8004fca:	f000 fa39 	bl	8005440 <_sbrk_r>
 8004fce:	4581      	cmp	r9, r0
 8004fd0:	d13f      	bne.n	8005052 <_malloc_r+0xe6>
 8004fd2:	6821      	ldr	r1, [r4, #0]
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	1a6d      	subs	r5, r5, r1
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7ff ffa7 	bl	8004f2c <sbrk_aligned>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d037      	beq.n	8005052 <_malloc_r+0xe6>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	442b      	add	r3, r5
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d038      	beq.n	8005062 <_malloc_r+0xf6>
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	42a2      	cmp	r2, r4
 8004ff4:	d12b      	bne.n	800504e <_malloc_r+0xe2>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e00f      	b.n	800501c <_malloc_r+0xb0>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	1b52      	subs	r2, r2, r5
 8005000:	d41f      	bmi.n	8005042 <_malloc_r+0xd6>
 8005002:	2a0b      	cmp	r2, #11
 8005004:	d917      	bls.n	8005036 <_malloc_r+0xca>
 8005006:	1961      	adds	r1, r4, r5
 8005008:	42a3      	cmp	r3, r4
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	6059      	strne	r1, [r3, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	bf08      	it	eq
 8005014:	f8c8 1000 	streq.w	r1, [r8]
 8005018:	5162      	str	r2, [r4, r5]
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	4638      	mov	r0, r7
 800501e:	f104 060b 	add.w	r6, r4, #11
 8005022:	f000 f9bd 	bl	80053a0 <__malloc_unlock>
 8005026:	f026 0607 	bic.w	r6, r6, #7
 800502a:	1d23      	adds	r3, r4, #4
 800502c:	1af2      	subs	r2, r6, r3
 800502e:	d0ae      	beq.n	8004f8e <_malloc_r+0x22>
 8005030:	1b9b      	subs	r3, r3, r6
 8005032:	50a3      	str	r3, [r4, r2]
 8005034:	e7ab      	b.n	8004f8e <_malloc_r+0x22>
 8005036:	42a3      	cmp	r3, r4
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	d1dd      	bne.n	8004ff8 <_malloc_r+0x8c>
 800503c:	f8c8 2000 	str.w	r2, [r8]
 8005040:	e7ec      	b.n	800501c <_malloc_r+0xb0>
 8005042:	4623      	mov	r3, r4
 8005044:	6864      	ldr	r4, [r4, #4]
 8005046:	e7ac      	b.n	8004fa2 <_malloc_r+0x36>
 8005048:	4634      	mov	r4, r6
 800504a:	6876      	ldr	r6, [r6, #4]
 800504c:	e7b4      	b.n	8004fb8 <_malloc_r+0x4c>
 800504e:	4613      	mov	r3, r2
 8005050:	e7cc      	b.n	8004fec <_malloc_r+0x80>
 8005052:	230c      	movs	r3, #12
 8005054:	4638      	mov	r0, r7
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	f000 f9a2 	bl	80053a0 <__malloc_unlock>
 800505c:	e797      	b.n	8004f8e <_malloc_r+0x22>
 800505e:	6025      	str	r5, [r4, #0]
 8005060:	e7dc      	b.n	800501c <_malloc_r+0xb0>
 8005062:	605b      	str	r3, [r3, #4]
 8005064:	deff      	udf	#255	; 0xff
 8005066:	bf00      	nop
 8005068:	200002e0 	.word	0x200002e0

0800506c <_printf_common>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	4616      	mov	r6, r2
 8005072:	4699      	mov	r9, r3
 8005074:	688a      	ldr	r2, [r1, #8]
 8005076:	690b      	ldr	r3, [r1, #16]
 8005078:	4607      	mov	r7, r0
 800507a:	4293      	cmp	r3, r2
 800507c:	bfb8      	it	lt
 800507e:	4613      	movlt	r3, r2
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005086:	460c      	mov	r4, r1
 8005088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800508c:	b10a      	cbz	r2, 8005092 <_printf_common+0x26>
 800508e:	3301      	adds	r3, #1
 8005090:	6033      	str	r3, [r6, #0]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	6833      	ldrmi	r3, [r6, #0]
 800509a:	3302      	addmi	r3, #2
 800509c:	6033      	strmi	r3, [r6, #0]
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	f015 0506 	ands.w	r5, r5, #6
 80050a4:	d106      	bne.n	80050b4 <_printf_common+0x48>
 80050a6:	f104 0a19 	add.w	sl, r4, #25
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	6832      	ldr	r2, [r6, #0]
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	dc2b      	bgt.n	800510c <_printf_common+0xa0>
 80050b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b8:	1e13      	subs	r3, r2, #0
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	0692      	lsls	r2, r2, #26
 80050c2:	d430      	bmi.n	8005126 <_printf_common+0xba>
 80050c4:	4649      	mov	r1, r9
 80050c6:	4638      	mov	r0, r7
 80050c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d023      	beq.n	800511a <_printf_common+0xae>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	2b04      	cmp	r3, #4
 80050dc:	bf14      	ite	ne
 80050de:	2500      	movne	r5, #0
 80050e0:	6833      	ldreq	r3, [r6, #0]
 80050e2:	f04f 0600 	mov.w	r6, #0
 80050e6:	bf08      	it	eq
 80050e8:	68e5      	ldreq	r5, [r4, #12]
 80050ea:	f104 041a 	add.w	r4, r4, #26
 80050ee:	bf08      	it	eq
 80050f0:	1aed      	subeq	r5, r5, r3
 80050f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050f6:	bf08      	it	eq
 80050f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bfc4      	itt	gt
 8005100:	1a9b      	subgt	r3, r3, r2
 8005102:	18ed      	addgt	r5, r5, r3
 8005104:	42b5      	cmp	r5, r6
 8005106:	d11a      	bne.n	800513e <_printf_common+0xd2>
 8005108:	2000      	movs	r0, #0
 800510a:	e008      	b.n	800511e <_printf_common+0xb2>
 800510c:	2301      	movs	r3, #1
 800510e:	4652      	mov	r2, sl
 8005110:	4649      	mov	r1, r9
 8005112:	4638      	mov	r0, r7
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d103      	bne.n	8005122 <_printf_common+0xb6>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	3501      	adds	r5, #1
 8005124:	e7c1      	b.n	80050aa <_printf_common+0x3e>
 8005126:	2030      	movs	r0, #48	; 0x30
 8005128:	18e1      	adds	r1, r4, r3
 800512a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005134:	4422      	add	r2, r4
 8005136:	3302      	adds	r3, #2
 8005138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800513c:	e7c2      	b.n	80050c4 <_printf_common+0x58>
 800513e:	2301      	movs	r3, #1
 8005140:	4622      	mov	r2, r4
 8005142:	4649      	mov	r1, r9
 8005144:	4638      	mov	r0, r7
 8005146:	47c0      	blx	r8
 8005148:	3001      	adds	r0, #1
 800514a:	d0e6      	beq.n	800511a <_printf_common+0xae>
 800514c:	3601      	adds	r6, #1
 800514e:	e7d9      	b.n	8005104 <_printf_common+0x98>

08005150 <_printf_i>:
 8005150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	7e0f      	ldrb	r7, [r1, #24]
 8005156:	4691      	mov	r9, r2
 8005158:	2f78      	cmp	r7, #120	; 0x78
 800515a:	4680      	mov	r8, r0
 800515c:	460c      	mov	r4, r1
 800515e:	469a      	mov	sl, r3
 8005160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005166:	d807      	bhi.n	8005178 <_printf_i+0x28>
 8005168:	2f62      	cmp	r7, #98	; 0x62
 800516a:	d80a      	bhi.n	8005182 <_printf_i+0x32>
 800516c:	2f00      	cmp	r7, #0
 800516e:	f000 80d5 	beq.w	800531c <_printf_i+0x1cc>
 8005172:	2f58      	cmp	r7, #88	; 0x58
 8005174:	f000 80c1 	beq.w	80052fa <_printf_i+0x1aa>
 8005178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800517c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005180:	e03a      	b.n	80051f8 <_printf_i+0xa8>
 8005182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005186:	2b15      	cmp	r3, #21
 8005188:	d8f6      	bhi.n	8005178 <_printf_i+0x28>
 800518a:	a101      	add	r1, pc, #4	; (adr r1, 8005190 <_printf_i+0x40>)
 800518c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051fd 	.word	0x080051fd
 8005198:	08005179 	.word	0x08005179
 800519c:	08005179 	.word	0x08005179
 80051a0:	08005179 	.word	0x08005179
 80051a4:	08005179 	.word	0x08005179
 80051a8:	080051fd 	.word	0x080051fd
 80051ac:	08005179 	.word	0x08005179
 80051b0:	08005179 	.word	0x08005179
 80051b4:	08005179 	.word	0x08005179
 80051b8:	08005179 	.word	0x08005179
 80051bc:	08005303 	.word	0x08005303
 80051c0:	08005229 	.word	0x08005229
 80051c4:	080052bd 	.word	0x080052bd
 80051c8:	08005179 	.word	0x08005179
 80051cc:	08005179 	.word	0x08005179
 80051d0:	08005325 	.word	0x08005325
 80051d4:	08005179 	.word	0x08005179
 80051d8:	08005229 	.word	0x08005229
 80051dc:	08005179 	.word	0x08005179
 80051e0:	08005179 	.word	0x08005179
 80051e4:	080052c5 	.word	0x080052c5
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0a0      	b.n	800533e <_printf_i+0x1ee>
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	0607      	lsls	r7, r0, #24
 8005202:	f103 0104 	add.w	r1, r3, #4
 8005206:	6029      	str	r1, [r5, #0]
 8005208:	d501      	bpl.n	800520e <_printf_i+0xbe>
 800520a:	681e      	ldr	r6, [r3, #0]
 800520c:	e003      	b.n	8005216 <_printf_i+0xc6>
 800520e:	0646      	lsls	r6, r0, #25
 8005210:	d5fb      	bpl.n	800520a <_printf_i+0xba>
 8005212:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005216:	2e00      	cmp	r6, #0
 8005218:	da03      	bge.n	8005222 <_printf_i+0xd2>
 800521a:	232d      	movs	r3, #45	; 0x2d
 800521c:	4276      	negs	r6, r6
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005222:	230a      	movs	r3, #10
 8005224:	4859      	ldr	r0, [pc, #356]	; (800538c <_printf_i+0x23c>)
 8005226:	e012      	b.n	800524e <_printf_i+0xfe>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	1d19      	adds	r1, r3, #4
 800522e:	6029      	str	r1, [r5, #0]
 8005230:	0605      	lsls	r5, r0, #24
 8005232:	d501      	bpl.n	8005238 <_printf_i+0xe8>
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0xee>
 8005238:	0641      	lsls	r1, r0, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0xe4>
 800523c:	881e      	ldrh	r6, [r3, #0]
 800523e:	2f6f      	cmp	r7, #111	; 0x6f
 8005240:	bf0c      	ite	eq
 8005242:	2308      	moveq	r3, #8
 8005244:	230a      	movne	r3, #10
 8005246:	4851      	ldr	r0, [pc, #324]	; (800538c <_printf_i+0x23c>)
 8005248:	2100      	movs	r1, #0
 800524a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524e:	6865      	ldr	r5, [r4, #4]
 8005250:	2d00      	cmp	r5, #0
 8005252:	bfa8      	it	ge
 8005254:	6821      	ldrge	r1, [r4, #0]
 8005256:	60a5      	str	r5, [r4, #8]
 8005258:	bfa4      	itt	ge
 800525a:	f021 0104 	bicge.w	r1, r1, #4
 800525e:	6021      	strge	r1, [r4, #0]
 8005260:	b90e      	cbnz	r6, 8005266 <_printf_i+0x116>
 8005262:	2d00      	cmp	r5, #0
 8005264:	d04b      	beq.n	80052fe <_printf_i+0x1ae>
 8005266:	4615      	mov	r5, r2
 8005268:	fbb6 f1f3 	udiv	r1, r6, r3
 800526c:	fb03 6711 	mls	r7, r3, r1, r6
 8005270:	5dc7      	ldrb	r7, [r0, r7]
 8005272:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005276:	4637      	mov	r7, r6
 8005278:	42bb      	cmp	r3, r7
 800527a:	460e      	mov	r6, r1
 800527c:	d9f4      	bls.n	8005268 <_printf_i+0x118>
 800527e:	2b08      	cmp	r3, #8
 8005280:	d10b      	bne.n	800529a <_printf_i+0x14a>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	07de      	lsls	r6, r3, #31
 8005286:	d508      	bpl.n	800529a <_printf_i+0x14a>
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	6861      	ldr	r1, [r4, #4]
 800528c:	4299      	cmp	r1, r3
 800528e:	bfde      	ittt	le
 8005290:	2330      	movle	r3, #48	; 0x30
 8005292:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005296:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800529a:	1b52      	subs	r2, r2, r5
 800529c:	6122      	str	r2, [r4, #16]
 800529e:	464b      	mov	r3, r9
 80052a0:	4621      	mov	r1, r4
 80052a2:	4640      	mov	r0, r8
 80052a4:	f8cd a000 	str.w	sl, [sp]
 80052a8:	aa03      	add	r2, sp, #12
 80052aa:	f7ff fedf 	bl	800506c <_printf_common>
 80052ae:	3001      	adds	r0, #1
 80052b0:	d14a      	bne.n	8005348 <_printf_i+0x1f8>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052b6:	b004      	add	sp, #16
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	2778      	movs	r7, #120	; 0x78
 80052c6:	4832      	ldr	r0, [pc, #200]	; (8005390 <_printf_i+0x240>)
 80052c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	6829      	ldr	r1, [r5, #0]
 80052d0:	061f      	lsls	r7, r3, #24
 80052d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80052d6:	d402      	bmi.n	80052de <_printf_i+0x18e>
 80052d8:	065f      	lsls	r7, r3, #25
 80052da:	bf48      	it	mi
 80052dc:	b2b6      	uxthmi	r6, r6
 80052de:	07df      	lsls	r7, r3, #31
 80052e0:	bf48      	it	mi
 80052e2:	f043 0320 	orrmi.w	r3, r3, #32
 80052e6:	6029      	str	r1, [r5, #0]
 80052e8:	bf48      	it	mi
 80052ea:	6023      	strmi	r3, [r4, #0]
 80052ec:	b91e      	cbnz	r6, 80052f6 <_printf_i+0x1a6>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	f023 0320 	bic.w	r3, r3, #32
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	2310      	movs	r3, #16
 80052f8:	e7a6      	b.n	8005248 <_printf_i+0xf8>
 80052fa:	4824      	ldr	r0, [pc, #144]	; (800538c <_printf_i+0x23c>)
 80052fc:	e7e4      	b.n	80052c8 <_printf_i+0x178>
 80052fe:	4615      	mov	r5, r2
 8005300:	e7bd      	b.n	800527e <_printf_i+0x12e>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	6826      	ldr	r6, [r4, #0]
 8005306:	1d18      	adds	r0, r3, #4
 8005308:	6961      	ldr	r1, [r4, #20]
 800530a:	6028      	str	r0, [r5, #0]
 800530c:	0635      	lsls	r5, r6, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0x1c6>
 8005312:	6019      	str	r1, [r3, #0]
 8005314:	e002      	b.n	800531c <_printf_i+0x1cc>
 8005316:	0670      	lsls	r0, r6, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0x1c2>
 800531a:	8019      	strh	r1, [r3, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	4615      	mov	r5, r2
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7bc      	b.n	800529e <_printf_i+0x14e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	2100      	movs	r1, #0
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	681d      	ldr	r5, [r3, #0]
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f895 	bl	8005460 <memchr>
 8005336:	b108      	cbz	r0, 800533c <_printf_i+0x1ec>
 8005338:	1b40      	subs	r0, r0, r5
 800533a:	6060      	str	r0, [r4, #4]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005346:	e7aa      	b.n	800529e <_printf_i+0x14e>
 8005348:	462a      	mov	r2, r5
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d0ad      	beq.n	80052b2 <_printf_i+0x162>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d413      	bmi.n	8005384 <_printf_i+0x234>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e7a6      	b.n	80052b6 <_printf_i+0x166>
 8005368:	2301      	movs	r3, #1
 800536a:	4632      	mov	r2, r6
 800536c:	4649      	mov	r1, r9
 800536e:	4640      	mov	r0, r8
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d09d      	beq.n	80052b2 <_printf_i+0x162>
 8005376:	3501      	adds	r5, #1
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	42ab      	cmp	r3, r5
 8005380:	dcf2      	bgt.n	8005368 <_printf_i+0x218>
 8005382:	e7eb      	b.n	800535c <_printf_i+0x20c>
 8005384:	2500      	movs	r5, #0
 8005386:	f104 0619 	add.w	r6, r4, #25
 800538a:	e7f5      	b.n	8005378 <_printf_i+0x228>
 800538c:	08005bc5 	.word	0x08005bc5
 8005390:	08005bd6 	.word	0x08005bd6

08005394 <__malloc_lock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_lock+0x8>)
 8005396:	f7ff bc6f 	b.w	8004c78 <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	200002dc 	.word	0x200002dc

080053a0 <__malloc_unlock>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__malloc_unlock+0x8>)
 80053a2:	f7ff bc6a 	b.w	8004c7a <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	200002dc 	.word	0x200002dc

080053ac <_realloc_r>:
 80053ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4680      	mov	r8, r0
 80053b2:	4614      	mov	r4, r2
 80053b4:	460e      	mov	r6, r1
 80053b6:	b921      	cbnz	r1, 80053c2 <_realloc_r+0x16>
 80053b8:	4611      	mov	r1, r2
 80053ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	f7ff bdd5 	b.w	8004f6c <_malloc_r>
 80053c2:	b92a      	cbnz	r2, 80053d0 <_realloc_r+0x24>
 80053c4:	f000 f868 	bl	8005498 <_free_r>
 80053c8:	4625      	mov	r5, r4
 80053ca:	4628      	mov	r0, r5
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d0:	f000 f8aa 	bl	8005528 <_malloc_usable_size_r>
 80053d4:	4284      	cmp	r4, r0
 80053d6:	4607      	mov	r7, r0
 80053d8:	d802      	bhi.n	80053e0 <_realloc_r+0x34>
 80053da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053de:	d812      	bhi.n	8005406 <_realloc_r+0x5a>
 80053e0:	4621      	mov	r1, r4
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fdc2 	bl	8004f6c <_malloc_r>
 80053e8:	4605      	mov	r5, r0
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d0ed      	beq.n	80053ca <_realloc_r+0x1e>
 80053ee:	42bc      	cmp	r4, r7
 80053f0:	4622      	mov	r2, r4
 80053f2:	4631      	mov	r1, r6
 80053f4:	bf28      	it	cs
 80053f6:	463a      	movcs	r2, r7
 80053f8:	f000 f840 	bl	800547c <memcpy>
 80053fc:	4631      	mov	r1, r6
 80053fe:	4640      	mov	r0, r8
 8005400:	f000 f84a 	bl	8005498 <_free_r>
 8005404:	e7e1      	b.n	80053ca <_realloc_r+0x1e>
 8005406:	4635      	mov	r5, r6
 8005408:	e7df      	b.n	80053ca <_realloc_r+0x1e>

0800540a <memmove>:
 800540a:	4288      	cmp	r0, r1
 800540c:	b510      	push	{r4, lr}
 800540e:	eb01 0402 	add.w	r4, r1, r2
 8005412:	d902      	bls.n	800541a <memmove+0x10>
 8005414:	4284      	cmp	r4, r0
 8005416:	4623      	mov	r3, r4
 8005418:	d807      	bhi.n	800542a <memmove+0x20>
 800541a:	1e43      	subs	r3, r0, #1
 800541c:	42a1      	cmp	r1, r4
 800541e:	d008      	beq.n	8005432 <memmove+0x28>
 8005420:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005424:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005428:	e7f8      	b.n	800541c <memmove+0x12>
 800542a:	4601      	mov	r1, r0
 800542c:	4402      	add	r2, r0
 800542e:	428a      	cmp	r2, r1
 8005430:	d100      	bne.n	8005434 <memmove+0x2a>
 8005432:	bd10      	pop	{r4, pc}
 8005434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005438:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800543c:	e7f7      	b.n	800542e <memmove+0x24>
	...

08005440 <_sbrk_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	2300      	movs	r3, #0
 8005444:	4d05      	ldr	r5, [pc, #20]	; (800545c <_sbrk_r+0x1c>)
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fd fa8e 	bl	800296c <_sbrk>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_sbrk_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_sbrk_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200002e8 	.word	0x200002e8

08005460 <memchr>:
 8005460:	4603      	mov	r3, r0
 8005462:	b510      	push	{r4, lr}
 8005464:	b2c9      	uxtb	r1, r1
 8005466:	4402      	add	r2, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	4618      	mov	r0, r3
 800546c:	d101      	bne.n	8005472 <memchr+0x12>
 800546e:	2000      	movs	r0, #0
 8005470:	e003      	b.n	800547a <memchr+0x1a>
 8005472:	7804      	ldrb	r4, [r0, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	428c      	cmp	r4, r1
 8005478:	d1f6      	bne.n	8005468 <memchr+0x8>
 800547a:	bd10      	pop	{r4, pc}

0800547c <memcpy>:
 800547c:	440a      	add	r2, r1
 800547e:	4291      	cmp	r1, r2
 8005480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005484:	d100      	bne.n	8005488 <memcpy+0xc>
 8005486:	4770      	bx	lr
 8005488:	b510      	push	{r4, lr}
 800548a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548e:	4291      	cmp	r1, r2
 8005490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005494:	d1f9      	bne.n	800548a <memcpy+0xe>
 8005496:	bd10      	pop	{r4, pc}

08005498 <_free_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4605      	mov	r5, r0
 800549c:	2900      	cmp	r1, #0
 800549e:	d040      	beq.n	8005522 <_free_r+0x8a>
 80054a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a4:	1f0c      	subs	r4, r1, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	18e4      	addlt	r4, r4, r3
 80054ac:	f7ff ff72 	bl	8005394 <__malloc_lock>
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <_free_r+0x8c>)
 80054b2:	6813      	ldr	r3, [r2, #0]
 80054b4:	b933      	cbnz	r3, 80054c4 <_free_r+0x2c>
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	6014      	str	r4, [r2, #0]
 80054ba:	4628      	mov	r0, r5
 80054bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c0:	f7ff bf6e 	b.w	80053a0 <__malloc_unlock>
 80054c4:	42a3      	cmp	r3, r4
 80054c6:	d908      	bls.n	80054da <_free_r+0x42>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	1821      	adds	r1, r4, r0
 80054cc:	428b      	cmp	r3, r1
 80054ce:	bf01      	itttt	eq
 80054d0:	6819      	ldreq	r1, [r3, #0]
 80054d2:	685b      	ldreq	r3, [r3, #4]
 80054d4:	1809      	addeq	r1, r1, r0
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	e7ed      	b.n	80054b6 <_free_r+0x1e>
 80054da:	461a      	mov	r2, r3
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	b10b      	cbz	r3, 80054e4 <_free_r+0x4c>
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d9fa      	bls.n	80054da <_free_r+0x42>
 80054e4:	6811      	ldr	r1, [r2, #0]
 80054e6:	1850      	adds	r0, r2, r1
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d10b      	bne.n	8005504 <_free_r+0x6c>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	4401      	add	r1, r0
 80054f0:	1850      	adds	r0, r2, r1
 80054f2:	4283      	cmp	r3, r0
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	d1e0      	bne.n	80054ba <_free_r+0x22>
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4408      	add	r0, r1
 80054fe:	6010      	str	r0, [r2, #0]
 8005500:	6053      	str	r3, [r2, #4]
 8005502:	e7da      	b.n	80054ba <_free_r+0x22>
 8005504:	d902      	bls.n	800550c <_free_r+0x74>
 8005506:	230c      	movs	r3, #12
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	e7d6      	b.n	80054ba <_free_r+0x22>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	1821      	adds	r1, r4, r0
 8005510:	428b      	cmp	r3, r1
 8005512:	bf01      	itttt	eq
 8005514:	6819      	ldreq	r1, [r3, #0]
 8005516:	685b      	ldreq	r3, [r3, #4]
 8005518:	1809      	addeq	r1, r1, r0
 800551a:	6021      	streq	r1, [r4, #0]
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	6054      	str	r4, [r2, #4]
 8005520:	e7cb      	b.n	80054ba <_free_r+0x22>
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200002e0 	.word	0x200002e0

08005528 <_malloc_usable_size_r>:
 8005528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552c:	1f18      	subs	r0, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfbc      	itt	lt
 8005532:	580b      	ldrlt	r3, [r1, r0]
 8005534:	18c0      	addlt	r0, r0, r3
 8005536:	4770      	bx	lr

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
