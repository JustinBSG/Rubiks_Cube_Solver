
Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000049dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080051e0  080051e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e0  080051e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  080051f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080051f4  000202c0  2**0
=======
  1 .text         0000492c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005130  08005130  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005130  08005130  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  08005144  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005144  000202c0  2**0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   0000d8a0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e5  00000000  00000000  0002d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccc  00000000  00000000  00031290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af18  00000000  00000000  00031f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001193a  00000000  00000000  0004ce74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b9a0  00000000  00000000  0005e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004230  00000000  00000000  000fa150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000fe380  2**0
=======
 13 .debug_info   0000d87d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e5  00000000  00000000  0002d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd0  00000000  00000000  00031270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af18  00000000  00000000  00031f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e1  00000000  00000000  0004ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b9a4  00000000  00000000  0005e739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004230  00000000  00000000  000fa0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000fe310  2**0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000204:	08004ba8 	.word	0x08004ba8
=======
 8000204:	08004af8 	.word	0x08004af8
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
<<<<<<< HEAD
 8000220:	08004ba8 	.word	0x08004ba8
=======
 8000220:	08004af8 	.word	0x08004af8
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
<<<<<<< HEAD
 80002be:	f003 fa9b 	bl	80037f8 <HAL_SRAM_Init>
=======
 80002be:	f003 fa43 	bl	8003748 <HAL_SRAM_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fc37 	bl	8000b3a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
<<<<<<< HEAD
 800033c:	f002 fc8c 	bl	8002c58 <HAL_GPIO_Init>
=======
 800033c:	f002 fc34 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
<<<<<<< HEAD
 8000356:	f002 fc7f 	bl	8002c58 <HAL_GPIO_Init>
=======
 8000356:	f002 fc27 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000070 	.word	0x20000070
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b44      	ldr	r3, [pc, #272]	; (80004b0 <MX_GPIO_Init+0x128>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a43      	ldr	r2, [pc, #268]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b41      	ldr	r3, [pc, #260]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3e      	ldr	r3, [pc, #248]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b35      	ldr	r3, [pc, #212]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_GPIO_Init+0x128>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_GPIO_Init+0x128>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <MX_GPIO_Init+0x12c>)
<<<<<<< HEAD
 800041c:	f002 fdb0 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 800041c:	f002 fd58 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4824      	ldr	r0, [pc, #144]	; (80004b8 <MX_GPIO_Init+0x130>)
<<<<<<< HEAD
 8000426:	f002 fdab 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 8000426:	f002 fd53 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <MX_GPIO_Init+0x134>)
<<<<<<< HEAD
 8000440:	f002 fc0a 	bl	8002c58 <HAL_GPIO_Init>
=======
 8000440:	f002 fbb2 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x138>)
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <MX_GPIO_Init+0x13c>)
<<<<<<< HEAD
 8000458:	f002 fbfe 	bl	8002c58 <HAL_GPIO_Init>
=======
 8000458:	f002 fba6 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480f      	ldr	r0, [pc, #60]	; (80004b4 <MX_GPIO_Init+0x12c>)
<<<<<<< HEAD
 8000476:	f002 fbef 	bl	8002c58 <HAL_GPIO_Init>
=======
 8000476:	f002 fb97 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_GPIO_Init+0x130>)
<<<<<<< HEAD
 8000492:	f002 fbe1 	bl	8002c58 <HAL_GPIO_Init>
=======
 8000492:	f002 fb89 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2006      	movs	r0, #6
<<<<<<< HEAD
 800049c:	f002 fba5 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004a0:	2006      	movs	r0, #6
 80004a2:	f002 fbbe 	bl	8002c22 <HAL_NVIC_EnableIRQ>
=======
 800049c:	f002 fb4d 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004a0:	2006      	movs	r0, #6
 80004a2:	f002 fb66 	bl	8002b72 <HAL_NVIC_EnableIRQ>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011400 	.word	0x40011400
 80004b8:	40011800 	.word	0x40011800
 80004bc:	40011000 	.word	0x40011000
 80004c0:	10110000 	.word	0x10110000
 80004c4:	40010800 	.word	0x40010800

080004c8 <Delay>:

void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	e002      	b.n	80004d8 <Delay+0x10>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1f9      	bne.n	80004d2 <Delay+0xa>
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <LCD_INIT>:

void LCD_INIT ( void )
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 f829 	bl	8000548 <LCD_BackLed_Control>
	LCD_Rst();
 80004f6:	f000 f80f 	bl	8000518 <LCD_Rst>
	LCD_REG_Config();
 80004fa:	f000 f85f 	bl	80005bc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000508:	22f0      	movs	r2, #240	; 0xf0
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f9e6 	bl	80008de <LCD_Clear>
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <LCD_Rst+0x28>)
<<<<<<< HEAD
 8000522:	f002 fd2d 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 8000522:	f002 fcd5 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
	Delay ( 0xAFFf<<2 ); 					   
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <LCD_Rst+0x2c>)
 8000528:	f7ff ffce 	bl	80004c8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <LCD_Rst+0x28>)
<<<<<<< HEAD
 8000532:	f002 fd25 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 8000532:	f002 fccd 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
	Delay ( 0xAFFf<<2 ); 	
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <LCD_Rst+0x2c>)
 8000538:	f7ff ffc6 	bl	80004c8 <Delay>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40011800 	.word	0x40011800
 8000544:	0002bffc 	.word	0x0002bffc

08000548 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d006      	beq.n	8000566 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <LCD_BackLed_Control+0x34>)
<<<<<<< HEAD
 8000560:	f002 fd0e 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 8000560:	f002 fcb6 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000564:	e005      	b.n	8000572 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_BackLed_Control+0x34>)
<<<<<<< HEAD
 800056e:	f002 fd07 	bl	8002f80 <HAL_GPIO_WritePin>
=======
 800056e:	f002 fcaf 	bl	8002ed0 <HAL_GPIO_WritePin>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40011400 	.word	0x40011400

08000580 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800058a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	8013      	strh	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <LCD_Write_Data+0x1c>)
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	8013      	strh	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	60020000 	.word	0x60020000

080005bc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005c0:	20cf      	movs	r0, #207	; 0xcf
 80005c2:	f7ff ffdd 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff ffe8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005cc:	2081      	movs	r0, #129	; 0x81
 80005ce:	f7ff ffe5 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005d2:	2030      	movs	r0, #48	; 0x30
 80005d4:	f7ff ffe2 	bl	800059c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005d8:	20ed      	movs	r0, #237	; 0xed
 80005da:	f7ff ffd1 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f7ff ffdc 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005e4:	2003      	movs	r0, #3
 80005e6:	f7ff ffd9 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005ea:	2012      	movs	r0, #18
 80005ec:	f7ff ffd6 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005f0:	2081      	movs	r0, #129	; 0x81
 80005f2:	f7ff ffd3 	bl	800059c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005f6:	20e8      	movs	r0, #232	; 0xe8
 80005f8:	f7ff ffc2 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005fc:	2085      	movs	r0, #133	; 0x85
 80005fe:	f7ff ffcd 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000602:	2010      	movs	r0, #16
 8000604:	f7ff ffca 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f7ff ffc7 	bl	800059c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800060e:	20cb      	movs	r0, #203	; 0xcb
 8000610:	f7ff ffb6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000614:	2039      	movs	r0, #57	; 0x39
 8000616:	f7ff ffc1 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ffbe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffbb 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000626:	2034      	movs	r0, #52	; 0x34
 8000628:	f7ff ffb8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff ffb5 	bl	800059c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000632:	20f7      	movs	r0, #247	; 0xf7
 8000634:	f7ff ffa4 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000638:	2020      	movs	r0, #32
 800063a:	f7ff ffaf 	bl	800059c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800063e:	20ea      	movs	r0, #234	; 0xea
 8000640:	f7ff ff9e 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffa9 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ffa6 	bl	800059c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000650:	20b1      	movs	r0, #177	; 0xb1
 8000652:	f7ff ff95 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffa0 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800065c:	201b      	movs	r0, #27
 800065e:	f7ff ff9d 	bl	800059c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000662:	20b6      	movs	r0, #182	; 0xb6
 8000664:	f7ff ff8c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000668:	200a      	movs	r0, #10
 800066a:	f7ff ff97 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800066e:	20a2      	movs	r0, #162	; 0xa2
 8000670:	f7ff ff94 	bl	800059c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000674:	20c0      	movs	r0, #192	; 0xc0
 8000676:	f7ff ff83 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800067a:	2035      	movs	r0, #53	; 0x35
 800067c:	f7ff ff8e 	bl	800059c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000680:	20c1      	movs	r0, #193	; 0xc1
 8000682:	f7ff ff7d 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000686:	2011      	movs	r0, #17
 8000688:	f7ff ff88 	bl	800059c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800068c:	20c5      	movs	r0, #197	; 0xc5
 800068e:	f7ff ff77 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000692:	2045      	movs	r0, #69	; 0x45
 8000694:	f7ff ff82 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000698:	2045      	movs	r0, #69	; 0x45
 800069a:	f7ff ff7f 	bl	800059c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800069e:	20c7      	movs	r0, #199	; 0xc7
 80006a0:	f7ff ff6e 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80006a4:	20a2      	movs	r0, #162	; 0xa2
 80006a6:	f7ff ff79 	bl	800059c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80006aa:	20f2      	movs	r0, #242	; 0xf2
 80006ac:	f7ff ff68 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff73 	bl	800059c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006b6:	2026      	movs	r0, #38	; 0x26
 80006b8:	f7ff ff62 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff6d 	bl	800059c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006c2:	20e0      	movs	r0, #224	; 0xe0
 80006c4:	f7ff ff5c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff ff67 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ce:	2026      	movs	r0, #38	; 0x26
 80006d0:	f7ff ff64 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006d4:	2024      	movs	r0, #36	; 0x24
 80006d6:	f7ff ff61 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006da:	200b      	movs	r0, #11
 80006dc:	f7ff ff5e 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006e0:	200e      	movs	r0, #14
 80006e2:	f7ff ff5b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006e6:	2009      	movs	r0, #9
 80006e8:	f7ff ff58 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006ec:	2054      	movs	r0, #84	; 0x54
 80006ee:	f7ff ff55 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006f2:	20a8      	movs	r0, #168	; 0xa8
 80006f4:	f7ff ff52 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006f8:	2046      	movs	r0, #70	; 0x46
 80006fa:	f7ff ff4f 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006fe:	200c      	movs	r0, #12
 8000700:	f7ff ff4c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000704:	2017      	movs	r0, #23
 8000706:	f7ff ff49 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800070a:	2009      	movs	r0, #9
 800070c:	f7ff ff46 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000710:	200f      	movs	r0, #15
 8000712:	f7ff ff43 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000716:	2007      	movs	r0, #7
 8000718:	f7ff ff40 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff3d 	bl	800059c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000722:	20e1      	movs	r0, #225	; 0xe1
 8000724:	f7ff ff2c 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff37 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800072e:	2019      	movs	r0, #25
 8000730:	f7ff ff34 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000734:	201b      	movs	r0, #27
 8000736:	f7ff ff31 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff2e 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000740:	2010      	movs	r0, #16
 8000742:	f7ff ff2b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000746:	2007      	movs	r0, #7
 8000748:	f7ff ff28 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800074c:	202a      	movs	r0, #42	; 0x2a
 800074e:	f7ff ff25 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000752:	2047      	movs	r0, #71	; 0x47
 8000754:	f7ff ff22 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000758:	2039      	movs	r0, #57	; 0x39
 800075a:	f7ff ff1f 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff ff1c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000764:	2006      	movs	r0, #6
 8000766:	f7ff ff19 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800076a:	2006      	movs	r0, #6
 800076c:	f7ff ff16 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000770:	2030      	movs	r0, #48	; 0x30
 8000772:	f7ff ff13 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000776:	2038      	movs	r0, #56	; 0x38
 8000778:	f7ff ff10 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800077c:	200f      	movs	r0, #15
 800077e:	f7ff ff0d 	bl	800059c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000782:	2036      	movs	r0, #54	; 0x36
 8000784:	f7ff fefc 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000788:	20c8      	movs	r0, #200	; 0xc8
 800078a:	f7ff ff07 	bl	800059c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800078e:	202a      	movs	r0, #42	; 0x2a
 8000790:	f7ff fef6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff01 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff fefe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fefb 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80007a6:	20ef      	movs	r0, #239	; 0xef
 80007a8:	f7ff fef8 	bl	800059c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80007ac:	202b      	movs	r0, #43	; 0x2b
 80007ae:	f7ff fee7 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fef2 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff feef 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff feec 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007c4:	203f      	movs	r0, #63	; 0x3f
 80007c6:	f7ff fee9 	bl	800059c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007ca:	203a      	movs	r0, #58	; 0x3a
 80007cc:	f7ff fed8 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007d0:	2055      	movs	r0, #85	; 0x55
 80007d2:	f7ff fee3 	bl	800059c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007d6:	2011      	movs	r0, #17
 80007d8:	f7ff fed2 	bl	8000580 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <LCD_REG_Config+0x230>)
 80007de:	f7ff fe73 	bl	80004c8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007e2:	2029      	movs	r0, #41	; 0x29
 80007e4:	f7ff fecc 	bl	8000580 <LCD_Write_Cmd>
	
	
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0002bffc 	.word	0x0002bffc

080007f0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800080e:	202a      	movs	r0, #42	; 0x2a
 8000810:	f7ff feb6 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff febe 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	b29b      	uxth	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff feb8 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	4413      	add	r3, r2
 8000832:	3b01      	subs	r3, #1
 8000834:	121b      	asrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff feaf 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4413      	add	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	3b01      	subs	r3, #1
 8000848:	b29b      	uxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fea4 	bl	800059c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000854:	202b      	movs	r0, #43	; 0x2b
 8000856:	f7ff fe93 	bl	8000580 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9b 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	b29b      	uxth	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe95 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000872:	88ba      	ldrh	r2, [r7, #4]
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	4413      	add	r3, r2
 8000878:	3b01      	subs	r3, #1
 800087a:	121b      	asrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe8c 	bl	800059c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000884:	88ba      	ldrh	r2, [r7, #4]
 8000886:	883b      	ldrh	r3, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe81 	bl	800059c <LCD_Write_Data>
	
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd90      	pop	{r4, r7, pc}

080008a2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80008b2:	202c      	movs	r0, #44	; 0x2c
 80008b4:	f7ff fe64 	bl	8000580 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e006      	b.n	80008cc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe6b 	bl	800059c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3f4      	bcc.n	80008be <LCD_FillColor+0x1c>
		
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008de:	b590      	push	{r4, r7, lr}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4604      	mov	r4, r0
 80008e6:	4608      	mov	r0, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	461a      	mov	r2, r3
 80008ec:	4623      	mov	r3, r4
 80008ee:	80fb      	strh	r3, [r7, #6]
 80008f0:	4603      	mov	r3, r0
 80008f2:	80bb      	strh	r3, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
 80008f8:	4613      	mov	r3, r2
 80008fa:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008fc:	883b      	ldrh	r3, [r7, #0]
 80008fe:	887a      	ldrh	r2, [r7, #2]
 8000900:	88b9      	ldrh	r1, [r7, #4]
 8000902:	88f8      	ldrh	r0, [r7, #6]
 8000904:	f7ff ff74 	bl	80007f0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	883a      	ldrh	r2, [r7, #0]
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	461a      	mov	r2, r3
 8000912:	8b3b      	ldrh	r3, [r7, #24]
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f7ff ffc3 	bl	80008a2 <LCD_FillColor>
	
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}

08000924 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	460b      	mov	r3, r1
 8000930:	80bb      	strh	r3, [r7, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	3b20      	subs	r3, #32
 800093a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800093c:	88b9      	ldrh	r1, [r7, #4]
 800093e:	88f8      	ldrh	r0, [r7, #6]
 8000940:	2310      	movs	r3, #16
 8000942:	2208      	movs	r2, #8
 8000944:	f7ff ff54 	bl	80007f0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000948:	202c      	movs	r0, #44	; 0x2c
 800094a:	f7ff fe19 	bl	8000580 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	e023      	b.n	800099c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000954:	7b3a      	ldrb	r2, [r7, #12]
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	4914      	ldr	r1, [pc, #80]	; (80009ac <LCD_DrawChar+0x88>)
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	440a      	add	r2, r1
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000964:	2300      	movs	r3, #0
 8000966:	737b      	strb	r3, [r7, #13]
 8000968:	e012      	b.n	8000990 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d003      	beq.n	800097c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000974:	201f      	movs	r0, #31
 8000976:	f7ff fe11 	bl	800059c <LCD_Write_Data>
 800097a:	e003      	b.n	8000984 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800097c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000980:	f7ff fe0c 	bl	800059c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	3301      	adds	r3, #1
 800098e:	737b      	strb	r3, [r7, #13]
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	2b07      	cmp	r3, #7
 8000994:	d9e9      	bls.n	800096a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	73bb      	strb	r3, [r7, #14]
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d9d8      	bls.n	8000954 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80009ac:	08004bd8 	.word	0x08004bd8
=======
 80009ac:	08004b28 	.word	0x08004b28
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

080009b0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	603a      	str	r2, [r7, #0]
 80009ba:	80fb      	strh	r3, [r7, #6]
 80009bc:	460b      	mov	r3, r1
 80009be:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80009c0:	e01c      	b.n	80009fc <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2be8      	cmp	r3, #232	; 0xe8
 80009c6:	d904      	bls.n	80009d2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009c8:	2300      	movs	r3, #0
 80009ca:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	3310      	adds	r3, #16
 80009d0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80009d8:	d903      	bls.n	80009e2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80009da:	2300      	movs	r3, #0
 80009dc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80009de:	2300      	movs	r3, #0
 80009e0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	88b9      	ldrh	r1, [r7, #4]
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff9a 	bl	8000924 <LCD_DrawChar>
		
		pStr ++;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	3308      	adds	r3, #8
 80009fa:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1de      	bne.n	80009c2 <LCD_DrawString+0x12>
		
	}
	
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000a16:	f001 ff8b 	bl	8002930 <HAL_Init>
=======
 8000a16:	f001 ff33 	bl	8002880 <HAL_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f849 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f7ff fcb3 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000a22:	f7ff fbff 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
<<<<<<< HEAD
 8000a26:	f001 fcf3 	bl	8002410 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2a:	f001 fd89 	bl	8002540 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a2e:	f001 fc79 	bl	8002324 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a32:	f001 fee1 	bl	80027f8 <MX_USART1_UART_Init>
=======
 8000a26:	f001 fc9b 	bl	8002360 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2a:	f001 fd31 	bl	8002490 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a2e:	f001 fc21 	bl	8002274 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a32:	f001 fe89 	bl	8002748 <MX_USART1_UART_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <main+0x90>)
<<<<<<< HEAD
 8000a3a:	f002 ffd1 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <main+0x94>)
 8000a42:	f002 ffcd 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <main+0x90>)
 8000a4a:	f002 ffc9 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a4e:	210c      	movs	r1, #12
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <main+0x90>)
 8000a52:	f002 ffc5 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a56:	2100      	movs	r1, #0
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <main+0x98>)
 8000a5a:	f002 ffc1 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <main+0x98>)
 8000a62:	f002 ffbd 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a66:	2108      	movs	r1, #8
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0x98>)
 8000a6a:	f002 ffb9 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a6e:	210c      	movs	r1, #12
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <main+0x98>)
 8000a72:	f002 ffb5 	bl	80039e0 <HAL_TIM_PWM_Start>
=======
 8000a3a:	f002 ff79 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <main+0x94>)
 8000a42:	f002 ff75 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <main+0x90>)
 8000a4a:	f002 ff71 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a4e:	210c      	movs	r1, #12
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <main+0x90>)
 8000a52:	f002 ff6d 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a56:	2100      	movs	r1, #0
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <main+0x98>)
 8000a5a:	f002 ff69 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <main+0x98>)
 8000a62:	f002 ff65 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a66:	2108      	movs	r1, #8
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0x98>)
 8000a6a:	f002 ff61 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a6e:	210c      	movs	r1, #12
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <main+0x98>)
 8000a72:	f002 ff5d 	bl	8003930 <HAL_TIM_PWM_Start>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  LCD_INIT();
 8000a76:	f7ff fd38 	bl	80004ea <LCD_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  servo_init();
<<<<<<< HEAD
 8000a7a:	f001 fa3d 	bl	8001ef8 <servo_init>
=======
 8000a7a:	f001 f9e5 	bl	8001e48 <servo_init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
	  uint8_t choice = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
	  char input[5];
	  HAL_UART_Receive(&huart1, input, sizeof(input), 0xFFFF);
 8000a82:	4639      	mov	r1, r7
 8000a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <main+0x9c>)
<<<<<<< HEAD
 8000a8c:	f003 fe0f 	bl	80046ae <HAL_UART_Receive>
=======
 8000a8c:	f003 fdb7 	bl	80045fe <HAL_UART_Receive>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
	  choice = input[4]-'1'+1;
 8000a90:	793b      	ldrb	r3, [r7, #4]
 8000a92:	3b30      	subs	r3, #48	; 0x30
 8000a94:	71fb      	strb	r3, [r7, #7]
	  mode(choice);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000a9a:	f001 f989 	bl	8001db0 <mode>
=======
 8000a9a:	f001 f931 	bl	8001d00 <mode>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
 8000a9e:	e7ec      	b.n	8000a7a <main+0x6a>
 8000aa0:	20000230 	.word	0x20000230
 8000aa4:	200001a0 	.word	0x200001a0
 8000aa8:	200001e8 	.word	0x200001e8
 8000aac:	20000278 	.word	0x20000278

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000ac0:	f004 f846 	bl	8004b50 <memset>
=======
 8000ac0:	f003 ffee 	bl	8004aa0 <memset>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000afa:	f002 fa63 	bl	8002fc4 <HAL_RCC_OscConfig>
=======
 8000afa:	f002 fa0b 	bl	8002f14 <HAL_RCC_OscConfig>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b04:	f000 f819 	bl	8000b3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000b24:	f002 fcd0 	bl	80034c8 <HAL_RCC_ClockConfig>
=======
 8000b24:	f002 fc78 	bl	8003418 <HAL_RCC_ClockConfig>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b2e:	f000 f804 	bl	8000b3a <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	; 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3e:	b672      	cpsid	i
}
 8000b40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <Error_Handler+0x8>

08000b44 <movement_F>:
 */

#include "movement.h"

// Number of Delay: 4
void movement_F(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	clockwise_90(south_front);
 8000b48:	2005      	movs	r0, #5
<<<<<<< HEAD
 8000b4a:	f001 fa81 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b52:	f001 ff4f 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8000b56:	2006      	movs	r0, #6
 8000b58:	f001 faea 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f001 ff48 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f001 fa3b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f001 ff41 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 8000b72:	2006      	movs	r0, #6
 8000b74:	f001 fb12 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7c:	f001 ff3a 	bl	80029f4 <HAL_Delay>
=======
 8000b4a:	f001 fa29 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b52:	f001 fef7 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8000b56:	2006      	movs	r0, #6
 8000b58:	f001 fa92 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f001 fef0 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f001 f9e3 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f001 fee9 	bl	8002944 <HAL_Delay>
	servo_push(south_back);
 8000b72:	2006      	movs	r0, #6
 8000b74:	f001 faba 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7c:	f001 fee2 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <movement_aF>:

// Number of Delay: 4
void movement_aF(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 8000b88:	2005      	movs	r0, #5
<<<<<<< HEAD
 8000b8a:	f001 fa99 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f001 ff2f 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8000b96:	2006      	movs	r0, #6
 8000b98:	f001 faca 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba0:	f001 ff28 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f001 fa1b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000baa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bae:	f001 ff21 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f001 faf2 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f001 ff1a 	bl	80029f4 <HAL_Delay>
=======
 8000b8a:	f001 fa41 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f001 fed7 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8000b96:	2006      	movs	r0, #6
 8000b98:	f001 fa72 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba0:	f001 fed0 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f001 f9c3 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000baa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bae:	f001 fec9 	bl	8002944 <HAL_Delay>
	servo_push(south_back);
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f001 fa9a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f001 fec2 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <movement_R>:

// Number of Delay: 4
void movement_R(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8000bc8:	2003      	movs	r0, #3
<<<<<<< HEAD
 8000bca:	f001 fa41 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd2:	f001 ff0f 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f001 faaa 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f001 ff08 	bl	80029f4 <HAL_Delay>
	centre_0(east_front);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f001 f9fb 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bee:	f001 ff01 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f001 fad2 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f001 fefa 	bl	80029f4 <HAL_Delay>
=======
 8000bca:	f001 f9e9 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd2:	f001 feb7 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f001 fa52 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f001 feb0 	bl	8002944 <HAL_Delay>
	centre_0(east_front);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f001 f9a3 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bee:	f001 fea9 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f001 fa7a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f001 fea2 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <movement_aR>:

// Number of Delay: 4
void movement_aR(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 8000c08:	2003      	movs	r0, #3
<<<<<<< HEAD
 8000c0a:	f001 fa59 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f001 feef 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f001 fa8a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c20:	f001 fee8 	bl	80029f4 <HAL_Delay>
	centre_0(east_front);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f001 f9db 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2e:	f001 fee1 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000c32:	2004      	movs	r0, #4
 8000c34:	f001 fab2 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f001 feda 	bl	80029f4 <HAL_Delay>
=======
 8000c0a:	f001 fa01 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f001 fe97 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f001 fa32 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c20:	f001 fe90 	bl	8002944 <HAL_Delay>
	centre_0(east_front);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f001 f983 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2e:	f001 fe89 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000c32:	2004      	movs	r0, #4
 8000c34:	f001 fa5a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f001 fe82 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <movement_L>:

// Number of Delay: 4
void movement_L(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	clockwise_90(west_front);
 8000c48:	2007      	movs	r0, #7
<<<<<<< HEAD
 8000c4a:	f001 fa01 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f001 fecf 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8000c56:	2008      	movs	r0, #8
 8000c58:	f001 fa6a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f001 fec8 	bl	80029f4 <HAL_Delay>
	centre_0(west_front);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f001 f9bb 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6e:	f001 fec1 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 8000c72:	2008      	movs	r0, #8
 8000c74:	f001 fa92 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f001 feba 	bl	80029f4 <HAL_Delay>
=======
 8000c4a:	f001 f9a9 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f001 fe77 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8000c56:	2008      	movs	r0, #8
 8000c58:	f001 fa12 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f001 fe70 	bl	8002944 <HAL_Delay>
	centre_0(west_front);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f001 f963 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6e:	f001 fe69 	bl	8002944 <HAL_Delay>
	servo_push(west_back);
 8000c72:	2008      	movs	r0, #8
 8000c74:	f001 fa3a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f001 fe62 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <movement_aL>:

// Number of Delay: 4
void movement_aL(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	anticlockwise_90(west_front);
 8000c88:	2007      	movs	r0, #7
<<<<<<< HEAD
 8000c8a:	f001 fa19 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c92:	f001 feaf 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8000c96:	2008      	movs	r0, #8
 8000c98:	f001 fa4a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca0:	f001 fea8 	bl	80029f4 <HAL_Delay>
	centre_0(west_front);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f001 f99b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cae:	f001 fea1 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 8000cb2:	2008      	movs	r0, #8
 8000cb4:	f001 fa72 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f001 fe9a 	bl	80029f4 <HAL_Delay>
=======
 8000c8a:	f001 f9c1 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c92:	f001 fe57 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8000c96:	2008      	movs	r0, #8
 8000c98:	f001 f9f2 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca0:	f001 fe50 	bl	8002944 <HAL_Delay>
	centre_0(west_front);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f001 f943 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cae:	f001 fe49 	bl	8002944 <HAL_Delay>
	servo_push(west_back);
 8000cb2:	2008      	movs	r0, #8
 8000cb4:	f001 fa1a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f001 fe42 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <movement_B>:

// Number of Delay: 4
void movement_B(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8000cc8:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000cca:	f001 f9c1 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f001 fe8f 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f001 fa2a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce0:	f001 fe88 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f001 f97b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cee:	f001 fe81 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f001 fa52 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f001 fe7a 	bl	80029f4 <HAL_Delay>
=======
 8000cca:	f001 f969 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f001 fe37 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f001 f9d2 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce0:	f001 fe30 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f001 f923 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cee:	f001 fe29 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f001 f9fa 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f001 fe22 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <movement_aB>:

// Number of Delay: 4
void movement_aB(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 8000d08:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000d0a:	f001 f9d9 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d12:	f001 fe6f 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f001 fa0a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f001 fe68 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f001 f95b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2e:	f001 fe61 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f001 fa32 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f001 fe5a 	bl	80029f4 <HAL_Delay>
=======
 8000d0a:	f001 f981 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d12:	f001 fe17 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f001 f9b2 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f001 fe10 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f001 f903 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2e:	f001 fe09 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f001 f9da 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f001 fe02 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <movement_U>:

// Number of Delay: 13
void movement_U(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000d48:	2004      	movs	r0, #4
<<<<<<< HEAD
 8000d4a:	f001 f9f1 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000d4e:	2008      	movs	r0, #8
 8000d50:	f001 f9ee 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d58:	f001 fe4c 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f001 f977 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f001 f9ac 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6c:	f001 fe42 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000d70:	2004      	movs	r0, #4
 8000d72:	f001 fa13 	bl	800219c <servo_push>
	servo_push(west_back);
 8000d76:	2008      	movs	r0, #8
 8000d78:	f001 fa10 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d80:	f001 fe38 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000d84:	2002      	movs	r0, #2
 8000d86:	f001 f9d3 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f001 f9d0 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d94:	f001 fe2e 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f001 f921 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f001 f91e 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da8:	f001 fe24 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f001 f9f5 	bl	800219c <servo_push>
	servo_push(south_back);
 8000db2:	2006      	movs	r0, #6
 8000db4:	f001 f9f2 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbc:	f001 fe1a 	bl	80029f4 <HAL_Delay>
	clockwise_90(east_front);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f001 f945 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dca:	f001 fe13 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f001 f9ae 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000dd4:	2008      	movs	r0, #8
 8000dd6:	f001 f9ab 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dde:	f001 fe09 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f001 f96c 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 f931 	bl	8002050 <clockwise_90>
	centre_0(east_front);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f001 f8f6 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	f001 fdfc 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f001 f9cd 	bl	800219c <servo_push>
	servo_push(west_back);
 8000e02:	2008      	movs	r0, #8
 8000e04:	f001 f9ca 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0c:	f001 fdf2 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f001 f98d 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000e16:	2006      	movs	r0, #6
 8000e18:	f001 f98a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f001 fde8 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f001 f8db 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f001 f8d8 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e34:	f001 fdde 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f001 f9af 	bl	800219c <servo_push>
	servo_push(south_back);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f001 f9ac 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f001 fdd4 	bl	80029f4 <HAL_Delay>
=======
 8000d4a:	f001 f999 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000d4e:	2008      	movs	r0, #8
 8000d50:	f001 f996 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d58:	f001 fdf4 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f001 f91f 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f001 f954 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6c:	f001 fdea 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000d70:	2004      	movs	r0, #4
 8000d72:	f001 f9bb 	bl	80020ec <servo_push>
	servo_push(west_back);
 8000d76:	2008      	movs	r0, #8
 8000d78:	f001 f9b8 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d80:	f001 fde0 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000d84:	2002      	movs	r0, #2
 8000d86:	f001 f97b 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f001 f978 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d94:	f001 fdd6 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f001 f8c9 	bl	8001f30 <centre_0>
	centre_0(south_front);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f001 f8c6 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da8:	f001 fdcc 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f001 f99d 	bl	80020ec <servo_push>
	servo_push(south_back);
 8000db2:	2006      	movs	r0, #6
 8000db4:	f001 f99a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbc:	f001 fdc2 	bl	8002944 <HAL_Delay>
	clockwise_90(east_front);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f001 f8ed 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dca:	f001 fdbb 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f001 f956 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000dd4:	2008      	movs	r0, #8
 8000dd6:	f001 f953 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dde:	f001 fdb1 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f001 f914 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 f8d9 	bl	8001fa0 <clockwise_90>
	centre_0(east_front);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f001 f89e 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	f001 fda4 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f001 f975 	bl	80020ec <servo_push>
	servo_push(west_back);
 8000e02:	2008      	movs	r0, #8
 8000e04:	f001 f972 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0c:	f001 fd9a 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f001 f935 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000e16:	2006      	movs	r0, #6
 8000e18:	f001 f932 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f001 fd90 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f001 f883 	bl	8001f30 <centre_0>
	centre_0(north_front);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f001 f880 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e34:	f001 fd86 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f001 f957 	bl	80020ec <servo_push>
	servo_push(south_back);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f001 f954 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f001 fd7c 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <movement_aU>:

// Number of Delay: 13
void movement_aU(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000e54:	2004      	movs	r0, #4
<<<<<<< HEAD
 8000e56:	f001 f96b 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f001 f968 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e64:	f001 fdc6 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 8000e68:	2005      	movs	r0, #5
 8000e6a:	f001 f8f1 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f001 f926 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e78:	f001 fdbc 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f001 f98d 	bl	800219c <servo_push>
	servo_push(west_back);
 8000e82:	2008      	movs	r0, #8
 8000e84:	f001 f98a 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8c:	f001 fdb2 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f001 f94d 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000e96:	2006      	movs	r0, #6
 8000e98:	f001 f94a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea0:	f001 fda8 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f001 f89b 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f001 f898 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f001 fd9e 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f001 f96f 	bl	800219c <servo_push>
	servo_push(south_back);
 8000ebe:	2006      	movs	r0, #6
 8000ec0:	f001 f96c 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f001 fd94 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(east_front);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f001 f8f7 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f001 fd8d 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8000eda:	2004      	movs	r0, #4
 8000edc:	f001 f928 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f001 f925 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f001 fd83 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f001 f8e6 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 f8ab 	bl	8002050 <clockwise_90>
	centre_0(east_front);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f001 f870 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f001 fd76 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f001 f947 	bl	800219c <servo_push>
	servo_push(west_back);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f001 f944 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f001 fd6c 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f001 f907 	bl	8002130 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000f22:	2006      	movs	r0, #6
 8000f24:	f001 f904 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2c:	f001 fd62 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8000f30:	2005      	movs	r0, #5
 8000f32:	f001 f855 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f001 f852 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f40:	f001 fd58 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f001 f929 	bl	800219c <servo_push>
	servo_push(south_back);
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f001 f926 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f54:	f001 fd4e 	bl	80029f4 <HAL_Delay>
=======
 8000e56:	f001 f913 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f001 f910 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e64:	f001 fd6e 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 8000e68:	2005      	movs	r0, #5
 8000e6a:	f001 f899 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f001 f8ce 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e78:	f001 fd64 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f001 f935 	bl	80020ec <servo_push>
	servo_push(west_back);
 8000e82:	2008      	movs	r0, #8
 8000e84:	f001 f932 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8c:	f001 fd5a 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f001 f8f5 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000e96:	2006      	movs	r0, #6
 8000e98:	f001 f8f2 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea0:	f001 fd50 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f001 f843 	bl	8001f30 <centre_0>
	centre_0(south_front);
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f001 f840 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f001 fd46 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f001 f917 	bl	80020ec <servo_push>
	servo_push(south_back);
 8000ebe:	2006      	movs	r0, #6
 8000ec0:	f001 f914 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f001 fd3c 	bl	8002944 <HAL_Delay>
	anticlockwise_90(east_front);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f001 f89f 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f001 fd35 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8000eda:	2004      	movs	r0, #4
 8000edc:	f001 f8d0 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f001 f8cd 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f001 fd2b 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f001 f88e 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 f853 	bl	8001fa0 <clockwise_90>
	centre_0(east_front);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f001 f818 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f001 fd1e 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f001 f8ef 	bl	80020ec <servo_push>
	servo_push(west_back);
 8000f0e:	2008      	movs	r0, #8
 8000f10:	f001 f8ec 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f001 fd14 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f001 f8af 	bl	8002080 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000f22:	2006      	movs	r0, #6
 8000f24:	f001 f8ac 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2c:	f001 fd0a 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8000f30:	2005      	movs	r0, #5
 8000f32:	f000 fffd 	bl	8001f30 <centre_0>
	centre_0(north_front);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fffa 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f40:	f001 fd00 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f001 f8d1 	bl	80020ec <servo_push>
	servo_push(south_back);
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f001 f8ce 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f54:	f001 fcf6 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <movement_D>:

// Number of Delay: 13
void movement_D(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000f60:	2004      	movs	r0, #4
<<<<<<< HEAD
 8000f62:	f001 f8e5 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000f66:	20c8      	movs	r0, #200	; 0xc8
 8000f68:	f001 fd44 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f001 f8df 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f76:	f001 fd3d 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f001 f868 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f001 f89d 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8a:	f001 fd33 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f001 f904 	bl	800219c <servo_push>
	servo_push(west_back);
 8000f94:	2008      	movs	r0, #8
 8000f96:	f001 f901 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9e:	f001 fd29 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f001 f8c4 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000fa8:	20c8      	movs	r0, #200	; 0xc8
 8000faa:	f001 fd23 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f001 f8be 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f001 fd1c 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 f80f 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 8000fc2:	2005      	movs	r0, #5
 8000fc4:	f001 f80c 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fcc:	f001 fd12 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f001 f8e3 	bl	800219c <servo_push>
	servo_push(south_back);
 8000fd6:	2006      	movs	r0, #6
 8000fd8:	f001 f8e0 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe0:	f001 fd08 	bl	80029f4 <HAL_Delay>
	clockwise_90(west_front);
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f001 f833 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fee:	f001 fd01 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f001 f89c 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ff8:	20c8      	movs	r0, #200	; 0xc8
 8000ffa:	f001 fcfb 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8000ffe:	2008      	movs	r0, #8
 8001000:	f001 f896 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f001 fcf4 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 800100c:	2005      	movs	r0, #5
 800100e:	f001 f857 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 f81c 	bl	8002050 <clockwise_90>
	centre_0(west_front);
 8001018:	2007      	movs	r0, #7
 800101a:	f000 ffe1 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001022:	f001 fce7 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8001026:	2004      	movs	r0, #4
 8001028:	f001 f8b8 	bl	800219c <servo_push>
	servo_push(west_back);
 800102c:	2008      	movs	r0, #8
 800102e:	f001 f8b5 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f001 fcdd 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 800103a:	2002      	movs	r0, #2
 800103c:	f001 f878 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001040:	20c8      	movs	r0, #200	; 0xc8
 8001042:	f001 fcd7 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001046:	2006      	movs	r0, #6
 8001048:	f001 f872 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f001 fcd0 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8001054:	2005      	movs	r0, #5
 8001056:	f000 ffc3 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 ffc0 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f001 fcc6 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001068:	2002      	movs	r0, #2
 800106a:	f001 f897 	bl	800219c <servo_push>
	servo_push(south_back);
 800106e:	2006      	movs	r0, #6
 8001070:	f001 f894 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001078:	f001 fcbc 	bl	80029f4 <HAL_Delay>
=======
 8000f62:	f001 f88d 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000f66:	20c8      	movs	r0, #200	; 0xc8
 8000f68:	f001 fcec 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f001 f887 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f76:	f001 fce5 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f001 f810 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f001 f845 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8a:	f001 fcdb 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f001 f8ac 	bl	80020ec <servo_push>
	servo_push(west_back);
 8000f94:	2008      	movs	r0, #8
 8000f96:	f001 f8a9 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9e:	f001 fcd1 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f001 f86c 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000fa8:	20c8      	movs	r0, #200	; 0xc8
 8000faa:	f001 fccb 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f001 f866 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f001 fcc4 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 ffb7 	bl	8001f30 <centre_0>
	centre_0(south_front);
 8000fc2:	2005      	movs	r0, #5
 8000fc4:	f000 ffb4 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fcc:	f001 fcba 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f001 f88b 	bl	80020ec <servo_push>
	servo_push(south_back);
 8000fd6:	2006      	movs	r0, #6
 8000fd8:	f001 f888 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe0:	f001 fcb0 	bl	8002944 <HAL_Delay>
	clockwise_90(west_front);
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f000 ffdb 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fee:	f001 fca9 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f001 f844 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ff8:	20c8      	movs	r0, #200	; 0xc8
 8000ffa:	f001 fca3 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8000ffe:	2008      	movs	r0, #8
 8001000:	f001 f83e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f001 fc9c 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 800100c:	2005      	movs	r0, #5
 800100e:	f000 ffff 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 ffc4 	bl	8001fa0 <clockwise_90>
	centre_0(west_front);
 8001018:	2007      	movs	r0, #7
 800101a:	f000 ff89 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001022:	f001 fc8f 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8001026:	2004      	movs	r0, #4
 8001028:	f001 f860 	bl	80020ec <servo_push>
	servo_push(west_back);
 800102c:	2008      	movs	r0, #8
 800102e:	f001 f85d 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f001 fc85 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 800103a:	2002      	movs	r0, #2
 800103c:	f001 f820 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001040:	20c8      	movs	r0, #200	; 0xc8
 8001042:	f001 fc7f 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8001046:	2006      	movs	r0, #6
 8001048:	f001 f81a 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f001 fc78 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8001054:	2005      	movs	r0, #5
 8001056:	f000 ff6b 	bl	8001f30 <centre_0>
	centre_0(north_front);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 ff68 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f001 fc6e 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8001068:	2002      	movs	r0, #2
 800106a:	f001 f83f 	bl	80020ec <servo_push>
	servo_push(south_back);
 800106e:	2006      	movs	r0, #6
 8001070:	f001 f83c 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001078:	f001 fc64 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <movement_aD>:

// Number of Delay: 13
void movement_aD(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001084:	2004      	movs	r0, #4
<<<<<<< HEAD
 8001086:	f001 f853 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800108a:	20c8      	movs	r0, #200	; 0xc8
 800108c:	f001 fcb2 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001090:	2008      	movs	r0, #8
 8001092:	f001 f84d 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109a:	f001 fcab 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 800109e:	2005      	movs	r0, #5
 80010a0:	f000 ffd6 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f001 f80b 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f001 fca1 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f001 f872 	bl	800219c <servo_push>
	servo_push(west_back);
 80010b8:	2008      	movs	r0, #8
 80010ba:	f001 f86f 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80010be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c2:	f001 fc97 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f001 f832 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80010cc:	20c8      	movs	r0, #200	; 0xc8
 80010ce:	f001 fc91 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80010d2:	2006      	movs	r0, #6
 80010d4:	f001 f82c 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80010d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010dc:	f001 fc8a 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 ff7d 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f000 ff7a 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f001 fc80 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f001 f851 	bl	800219c <servo_push>
	servo_push(south_back);
 80010fa:	2006      	movs	r0, #6
 80010fc:	f001 f84e 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001104:	f001 fc76 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(west_front);
 8001108:	2007      	movs	r0, #7
 800110a:	f000 ffd9 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800110e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001112:	f001 fc6f 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8001116:	2004      	movs	r0, #4
 8001118:	f001 f80a 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800111c:	20c8      	movs	r0, #200	; 0xc8
 800111e:	f001 fc69 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001122:	2008      	movs	r0, #8
 8001124:	f001 f804 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112c:	f001 fc62 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 ffc5 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 ff8a 	bl	8002050 <clockwise_90>
	centre_0(west_front);
 800113c:	2007      	movs	r0, #7
 800113e:	f000 ff4f 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001146:	f001 fc55 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 800114a:	2004      	movs	r0, #4
 800114c:	f001 f826 	bl	800219c <servo_push>
	servo_push(west_back);
 8001150:	2008      	movs	r0, #8
 8001152:	f001 f823 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115a:	f001 fc4b 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 800115e:	2002      	movs	r0, #2
 8001160:	f000 ffe6 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001164:	20c8      	movs	r0, #200	; 0xc8
 8001166:	f001 fc45 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 800116a:	2006      	movs	r0, #6
 800116c:	f000 ffe0 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f001 fc3e 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8001178:	2005      	movs	r0, #5
 800117a:	f000 ff31 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 ff2e 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001188:	f001 fc34 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 800118c:	2002      	movs	r0, #2
 800118e:	f001 f805 	bl	800219c <servo_push>
	servo_push(south_back);
 8001192:	2006      	movs	r0, #6
 8001194:	f001 f802 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f001 fc2a 	bl	80029f4 <HAL_Delay>
=======
 8001086:	f000 fffb 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800108a:	20c8      	movs	r0, #200	; 0xc8
 800108c:	f001 fc5a 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001090:	2008      	movs	r0, #8
 8001092:	f000 fff5 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109a:	f001 fc53 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 800109e:	2005      	movs	r0, #5
 80010a0:	f000 ff7e 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 ffb3 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f001 fc49 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f001 f81a 	bl	80020ec <servo_push>
	servo_push(west_back);
 80010b8:	2008      	movs	r0, #8
 80010ba:	f001 f817 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80010be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c2:	f001 fc3f 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f000 ffda 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80010cc:	20c8      	movs	r0, #200	; 0xc8
 80010ce:	f001 fc39 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80010d2:	2006      	movs	r0, #6
 80010d4:	f000 ffd4 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80010d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010dc:	f001 fc32 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 ff25 	bl	8001f30 <centre_0>
	centre_0(south_front);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f000 ff22 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f001 fc28 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f000 fff9 	bl	80020ec <servo_push>
	servo_push(south_back);
 80010fa:	2006      	movs	r0, #6
 80010fc:	f000 fff6 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001104:	f001 fc1e 	bl	8002944 <HAL_Delay>
	anticlockwise_90(west_front);
 8001108:	2007      	movs	r0, #7
 800110a:	f000 ff81 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800110e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001112:	f001 fc17 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8001116:	2004      	movs	r0, #4
 8001118:	f000 ffb2 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800111c:	20c8      	movs	r0, #200	; 0xc8
 800111e:	f001 fc11 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001122:	2008      	movs	r0, #8
 8001124:	f000 ffac 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112c:	f001 fc0a 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 ff6d 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 ff32 	bl	8001fa0 <clockwise_90>
	centre_0(west_front);
 800113c:	2007      	movs	r0, #7
 800113e:	f000 fef7 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001146:	f001 fbfd 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 800114a:	2004      	movs	r0, #4
 800114c:	f000 ffce 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001150:	2008      	movs	r0, #8
 8001152:	f000 ffcb 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115a:	f001 fbf3 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 800115e:	2002      	movs	r0, #2
 8001160:	f000 ff8e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001164:	20c8      	movs	r0, #200	; 0xc8
 8001166:	f001 fbed 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 800116a:	2006      	movs	r0, #6
 800116c:	f000 ff88 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f001 fbe6 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 8001178:	2005      	movs	r0, #5
 800117a:	f000 fed9 	bl	8001f30 <centre_0>
	centre_0(north_front);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fed6 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001188:	f001 fbdc 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 800118c:	2002      	movs	r0, #2
 800118e:	f000 ffad 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001192:	2006      	movs	r0, #6
 8001194:	f000 ffaa 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f001 fbd2 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <movement_F2>:

// Number of Delay: 8
void movement_F2(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 80011a8:	2006      	movs	r0, #6
<<<<<<< HEAD
 80011aa:	f000 ffc1 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b2:	f001 fc1f 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 80011b6:	2005      	movs	r0, #5
 80011b8:	f000 ff82 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80011bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c0:	f001 fc18 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 80011c4:	2006      	movs	r0, #6
 80011c6:	f000 ffe9 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f001 fc11 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f000 ff3c 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80011d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80011dc:	f001 fc0a 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f000 ffa5 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ea:	f001 fc03 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 80011ee:	2005      	movs	r0, #5
 80011f0:	f000 fef6 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f001 fbfc 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f000 ffcd 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f001 fbf5 	bl	80029f4 <HAL_Delay>
=======
 80011aa:	f000 ff69 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b2:	f001 fbc7 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 80011b6:	2005      	movs	r0, #5
 80011b8:	f000 ff2a 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80011bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c0:	f001 fbc0 	bl	8002944 <HAL_Delay>
	servo_push(south_back);
 80011c4:	2006      	movs	r0, #6
 80011c6:	f000 ff91 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f001 fbb9 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f000 fee4 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80011d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80011dc:	f001 fbb2 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f000 ff4d 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ea:	f001 fbab 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 80011ee:	2005      	movs	r0, #5
 80011f0:	f000 fe9e 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f001 fba4 	bl	8002944 <HAL_Delay>
	servo_push(south_back);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f000 ff75 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f001 fb9d 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}

0800120e <movement_R2>:
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

// Number of Delay: 8
void movement_R2(void) {
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001212:	2004      	movs	r0, #4
<<<<<<< HEAD
 8001214:	f000 ff8c 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f001 fbea 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(east_front);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 ff4d 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f001 fbe3 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 800122e:	2004      	movs	r0, #4
 8001230:	f000 ffb4 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f001 fbdc 	bl	80029f4 <HAL_Delay>
	clockwise_90(east_front);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 ff07 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001242:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001246:	f001 fbd5 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 800124a:	2004      	movs	r0, #4
 800124c:	f000 ff70 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f001 fbce 	bl	80029f4 <HAL_Delay>
	centre_0(east_front);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 fec1 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800125e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001262:	f001 fbc7 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8001266:	2004      	movs	r0, #4
 8001268:	f000 ff98 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f001 fbc0 	bl	80029f4 <HAL_Delay>
=======
 8001214:	f000 ff34 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f001 fb92 	bl	8002944 <HAL_Delay>
	anticlockwise_90(east_front);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 fef5 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f001 fb8b 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 800122e:	2004      	movs	r0, #4
 8001230:	f000 ff5c 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f001 fb84 	bl	8002944 <HAL_Delay>
	clockwise_90(east_front);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 feaf 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001242:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001246:	f001 fb7d 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800124a:	2004      	movs	r0, #4
 800124c:	f000 ff18 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f001 fb76 	bl	8002944 <HAL_Delay>
	centre_0(east_front);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 fe69 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800125e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001262:	f001 fb6f 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8001266:	2004      	movs	r0, #4
 8001268:	f000 ff40 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f001 fb68 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <movement_L2>:
	servo_push(east_back);
	HAL_Delay(DELAY_TIME_P);
}

// Number of Delay: 8
void movement_L2(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 800127c:	2008      	movs	r0, #8
<<<<<<< HEAD
 800127e:	f000 ff57 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f001 fbb5 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(west_front);
 800128a:	2007      	movs	r0, #7
 800128c:	f000 ff18 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001294:	f001 fbae 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 8001298:	2008      	movs	r0, #8
 800129a:	f000 ff7f 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800129e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a2:	f001 fba7 	bl	80029f4 <HAL_Delay>
	clockwise_90(west_front);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f000 fed2 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80012ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80012b0:	f001 fba0 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 80012b4:	2008      	movs	r0, #8
 80012b6:	f000 ff3b 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f001 fb99 	bl	80029f4 <HAL_Delay>
	centre_0(west_front);
 80012c2:	2007      	movs	r0, #7
 80012c4:	f000 fe8c 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80012c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012cc:	f001 fb92 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 80012d0:	2008      	movs	r0, #8
 80012d2:	f000 ff63 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012da:	f001 fb8b 	bl	80029f4 <HAL_Delay>
=======
 800127e:	f000 feff 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f001 fb5d 	bl	8002944 <HAL_Delay>
	anticlockwise_90(west_front);
 800128a:	2007      	movs	r0, #7
 800128c:	f000 fec0 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001294:	f001 fb56 	bl	8002944 <HAL_Delay>
	servo_push(west_back);
 8001298:	2008      	movs	r0, #8
 800129a:	f000 ff27 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800129e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a2:	f001 fb4f 	bl	8002944 <HAL_Delay>
	clockwise_90(west_front);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f000 fe7a 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80012ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80012b0:	f001 fb48 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80012b4:	2008      	movs	r0, #8
 80012b6:	f000 fee3 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f001 fb41 	bl	8002944 <HAL_Delay>
	centre_0(west_front);
 80012c2:	2007      	movs	r0, #7
 80012c4:	f000 fe34 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80012c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012cc:	f001 fb3a 	bl	8002944 <HAL_Delay>
	servo_push(west_back);
 80012d0:	2008      	movs	r0, #8
 80012d2:	f000 ff0b 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012da:	f001 fb33 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <movement_B2>:
	servo_push(west_back);
	HAL_Delay(DELAY_TIME_P);
}

// Number of Delay: 8
void movement_B2(void) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 80012e6:	2002      	movs	r0, #2
<<<<<<< HEAD
 80012e8:	f000 ff22 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f001 fb80 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(north_front);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fee3 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f001 fb79 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001302:	2002      	movs	r0, #2
 8001304:	f000 ff4a 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130c:	f001 fb72 	bl	80029f4 <HAL_Delay>
	clockwise_90(north_front);
 8001310:	2001      	movs	r0, #1
 8001312:	f000 fe9d 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001316:	f44f 7061 	mov.w	r0, #900	; 0x384
 800131a:	f001 fb6b 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 800131e:	2002      	movs	r0, #2
 8001320:	f000 ff06 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001328:	f001 fb64 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 fe57 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001336:	f001 fb5d 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 800133a:	2002      	movs	r0, #2
 800133c:	f000 ff2e 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001344:	f001 fb56 	bl	80029f4 <HAL_Delay>
=======
 80012e8:	f000 feca 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f001 fb28 	bl	8002944 <HAL_Delay>
	anticlockwise_90(north_front);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fe8b 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f001 fb21 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8001302:	2002      	movs	r0, #2
 8001304:	f000 fef2 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130c:	f001 fb1a 	bl	8002944 <HAL_Delay>
	clockwise_90(north_front);
 8001310:	2001      	movs	r0, #1
 8001312:	f000 fe45 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001316:	f44f 7061 	mov.w	r0, #900	; 0x384
 800131a:	f001 fb13 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 800131e:	2002      	movs	r0, #2
 8001320:	f000 feae 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001328:	f001 fb0c 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 fdff 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001336:	f001 fb05 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 800133a:	2002      	movs	r0, #2
 800133c:	f000 fed6 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001344:	f001 fafe 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <movement_U2>:
	servo_push(north_back);
	HAL_Delay(DELAY_TIME_P);
}

// Number of Delay: 17
void movement_U2(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001350:	2004      	movs	r0, #4
<<<<<<< HEAD
 8001352:	f000 feed 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001356:	20c8      	movs	r0, #200	; 0xc8
 8001358:	f001 fb4c 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 800135c:	2008      	movs	r0, #8
 800135e:	f000 fee7 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f001 fb45 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 800136a:	2005      	movs	r0, #5
 800136c:	f000 fe70 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 fea5 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f001 fb3b 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 800137e:	2004      	movs	r0, #4
 8001380:	f000 ff0c 	bl	800219c <servo_push>
	servo_push(west_back);
 8001384:	2008      	movs	r0, #8
 8001386:	f000 ff09 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800138a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138e:	f001 fb31 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8001392:	2002      	movs	r0, #2
 8001394:	f000 fecc 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001398:	20c8      	movs	r0, #200	; 0xc8
 800139a:	f001 fb2b 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 800139e:	2006      	movs	r0, #6
 80013a0:	f000 fec6 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a8:	f001 fb24 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fe17 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 80013b2:	2005      	movs	r0, #5
 80013b4:	f000 fe14 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80013b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013bc:	f001 fb1a 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 80013c0:	2002      	movs	r0, #2
 80013c2:	f000 feeb 	bl	800219c <servo_push>
	servo_push(south_back);
 80013c6:	2006      	movs	r0, #6
 80013c8:	f000 fee8 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d0:	f001 fb10 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 80013d4:	2004      	movs	r0, #4
 80013d6:	f000 feab 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013de:	f001 fb09 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(east_front);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f000 fe6c 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f001 fb02 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f000 fed3 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fa:	f001 fafb 	bl	80029f4 <HAL_Delay>
	clockwise_90(east_front);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 fe26 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001404:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001408:	f001 faf4 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 800140c:	2004      	movs	r0, #4
 800140e:	f000 fe8f 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001412:	20c8      	movs	r0, #200	; 0xc8
 8001414:	f001 faee 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001418:	2008      	movs	r0, #8
 800141a:	f000 fe89 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800141e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001422:	f001 fae7 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 8001426:	2005      	movs	r0, #5
 8001428:	f000 fe4a 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 800142c:	2001      	movs	r0, #1
 800142e:	f000 fe0f 	bl	8002050 <clockwise_90>
	centre_0(east_front);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 fdd4 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f001 fada 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8001440:	2004      	movs	r0, #4
 8001442:	f000 feab 	bl	800219c <servo_push>
	servo_push(west_back);
 8001446:	2008      	movs	r0, #8
 8001448:	f000 fea8 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f001 fad0 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8001454:	2002      	movs	r0, #2
 8001456:	f000 fe6b 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800145a:	20c8      	movs	r0, #200	; 0xc8
 800145c:	f001 faca 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001460:	2006      	movs	r0, #6
 8001462:	f000 fe65 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f001 fac3 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 800146e:	2005      	movs	r0, #5
 8001470:	f000 fdb6 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fdb3 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800147a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800147e:	f001 fab9 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fe8a 	bl	800219c <servo_push>
	servo_push(south_back);
 8001488:	2006      	movs	r0, #6
 800148a:	f000 fe87 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f001 faaf 	bl	80029f4 <HAL_Delay>
=======
 8001352:	f000 fe95 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001356:	20c8      	movs	r0, #200	; 0xc8
 8001358:	f001 faf4 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 800135c:	2008      	movs	r0, #8
 800135e:	f000 fe8f 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f001 faed 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 800136a:	2005      	movs	r0, #5
 800136c:	f000 fe18 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 fe4d 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f001 fae3 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 800137e:	2004      	movs	r0, #4
 8001380:	f000 feb4 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001384:	2008      	movs	r0, #8
 8001386:	f000 feb1 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800138a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138e:	f001 fad9 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8001392:	2002      	movs	r0, #2
 8001394:	f000 fe74 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001398:	20c8      	movs	r0, #200	; 0xc8
 800139a:	f001 fad3 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 800139e:	2006      	movs	r0, #6
 80013a0:	f000 fe6e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a8:	f001 facc 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fdbf 	bl	8001f30 <centre_0>
	centre_0(south_front);
 80013b2:	2005      	movs	r0, #5
 80013b4:	f000 fdbc 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80013b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013bc:	f001 fac2 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 80013c0:	2002      	movs	r0, #2
 80013c2:	f000 fe93 	bl	80020ec <servo_push>
	servo_push(south_back);
 80013c6:	2006      	movs	r0, #6
 80013c8:	f000 fe90 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d0:	f001 fab8 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 80013d4:	2004      	movs	r0, #4
 80013d6:	f000 fe53 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013de:	f001 fab1 	bl	8002944 <HAL_Delay>
	anticlockwise_90(east_front);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f000 fe14 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f001 faaa 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f000 fe7b 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fa:	f001 faa3 	bl	8002944 <HAL_Delay>
	clockwise_90(east_front);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 fdce 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001404:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001408:	f001 fa9c 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800140c:	2004      	movs	r0, #4
 800140e:	f000 fe37 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001412:	20c8      	movs	r0, #200	; 0xc8
 8001414:	f001 fa96 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001418:	2008      	movs	r0, #8
 800141a:	f000 fe31 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800141e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001422:	f001 fa8f 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8001426:	2005      	movs	r0, #5
 8001428:	f000 fdf2 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 800142c:	2001      	movs	r0, #1
 800142e:	f000 fdb7 	bl	8001fa0 <clockwise_90>
	centre_0(east_front);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 fd7c 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f001 fa82 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8001440:	2004      	movs	r0, #4
 8001442:	f000 fe53 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001446:	2008      	movs	r0, #8
 8001448:	f000 fe50 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f001 fa78 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8001454:	2002      	movs	r0, #2
 8001456:	f000 fe13 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800145a:	20c8      	movs	r0, #200	; 0xc8
 800145c:	f001 fa72 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8001460:	2006      	movs	r0, #6
 8001462:	f000 fe0d 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f001 fa6b 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 800146e:	2005      	movs	r0, #5
 8001470:	f000 fd5e 	bl	8001f30 <centre_0>
	centre_0(north_front);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fd5b 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800147a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800147e:	f001 fa61 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fe32 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001488:	2006      	movs	r0, #6
 800148a:	f000 fe2f 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f001 fa57 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <movement_D2>:
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

// Number of Delay: 17
void movement_D2(void) {
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 800149e:	2004      	movs	r0, #4
<<<<<<< HEAD
 80014a0:	f000 fe46 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80014a4:	20c8      	movs	r0, #200	; 0xc8
 80014a6:	f001 faa5 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 80014aa:	2008      	movs	r0, #8
 80014ac:	f000 fe40 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f001 fa9e 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 fdc9 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 fdfe 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80014c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c8:	f001 fa94 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 fe65 	bl	800219c <servo_push>
	servo_push(west_back);
 80014d2:	2008      	movs	r0, #8
 80014d4:	f000 fe62 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014dc:	f001 fa8a 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f000 fe25 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80014e6:	20c8      	movs	r0, #200	; 0xc8
 80014e8:	f001 fa84 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80014ec:	2006      	movs	r0, #6
 80014ee:	f000 fe1f 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f6:	f001 fa7d 	bl	80029f4 <HAL_Delay>
	centre_0(north_front);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 fd70 	bl	8001fe0 <centre_0>
	centre_0(south_front);
 8001500:	2005      	movs	r0, #5
 8001502:	f000 fd6d 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150a:	f001 fa73 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 800150e:	2002      	movs	r0, #2
 8001510:	f000 fe44 	bl	800219c <servo_push>
	servo_push(south_back);
 8001514:	2006      	movs	r0, #6
 8001516:	f000 fe41 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800151a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800151e:	f001 fa69 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001522:	2008      	movs	r0, #8
 8001524:	f000 fe04 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800152c:	f001 fa62 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(west_front);
 8001530:	2007      	movs	r0, #7
 8001532:	f000 fdc5 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153a:	f001 fa5b 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 800153e:	2008      	movs	r0, #8
 8001540:	f000 fe2c 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f001 fa54 	bl	80029f4 <HAL_Delay>
	clockwise_90(west_front);
 800154c:	2007      	movs	r0, #7
 800154e:	f000 fd7f 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001552:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001556:	f001 fa4d 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 800155a:	2004      	movs	r0, #4
 800155c:	f000 fde8 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001560:	20c8      	movs	r0, #200	; 0xc8
 8001562:	f001 fa47 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001566:	2008      	movs	r0, #8
 8001568:	f000 fde2 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800156c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001570:	f001 fa40 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 8001574:	2005      	movs	r0, #5
 8001576:	f000 fda3 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fd68 	bl	8002050 <clockwise_90>
	centre_0(west_front);
 8001580:	2007      	movs	r0, #7
 8001582:	f000 fd2d 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158a:	f001 fa33 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 800158e:	2004      	movs	r0, #4
 8001590:	f000 fe04 	bl	800219c <servo_push>
	servo_push(west_back);
 8001594:	2008      	movs	r0, #8
 8001596:	f000 fe01 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800159a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159e:	f001 fa29 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f000 fdc4 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80015a8:	20c8      	movs	r0, #200	; 0xc8
 80015aa:	f001 fa23 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80015ae:	2006      	movs	r0, #6
 80015b0:	f000 fdbe 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f001 fa1c 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 80015bc:	2005      	movs	r0, #5
 80015be:	f000 fd0f 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fd0c 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80015c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015cc:	f001 fa12 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 80015d0:	2002      	movs	r0, #2
 80015d2:	f000 fde3 	bl	800219c <servo_push>
	servo_push(south_back);
 80015d6:	2006      	movs	r0, #6
 80015d8:	f000 fde0 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f001 fa08 	bl	80029f4 <HAL_Delay>
=======
 80014a0:	f000 fdee 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80014a4:	20c8      	movs	r0, #200	; 0xc8
 80014a6:	f001 fa4d 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80014aa:	2008      	movs	r0, #8
 80014ac:	f000 fde8 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f001 fa46 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 fd71 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 fda6 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80014c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c8:	f001 fa3c 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 fe0d 	bl	80020ec <servo_push>
	servo_push(west_back);
 80014d2:	2008      	movs	r0, #8
 80014d4:	f000 fe0a 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014dc:	f001 fa32 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f000 fdcd 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80014e6:	20c8      	movs	r0, #200	; 0xc8
 80014e8:	f001 fa2c 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80014ec:	2006      	movs	r0, #6
 80014ee:	f000 fdc7 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f6:	f001 fa25 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 fd18 	bl	8001f30 <centre_0>
	centre_0(south_front);
 8001500:	2005      	movs	r0, #5
 8001502:	f000 fd15 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150a:	f001 fa1b 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 800150e:	2002      	movs	r0, #2
 8001510:	f000 fdec 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001514:	2006      	movs	r0, #6
 8001516:	f000 fde9 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800151a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800151e:	f001 fa11 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001522:	2008      	movs	r0, #8
 8001524:	f000 fdac 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800152c:	f001 fa0a 	bl	8002944 <HAL_Delay>
	anticlockwise_90(west_front);
 8001530:	2007      	movs	r0, #7
 8001532:	f000 fd6d 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153a:	f001 fa03 	bl	8002944 <HAL_Delay>
	servo_push(west_back);
 800153e:	2008      	movs	r0, #8
 8001540:	f000 fdd4 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f001 f9fc 	bl	8002944 <HAL_Delay>
	clockwise_90(west_front);
 800154c:	2007      	movs	r0, #7
 800154e:	f000 fd27 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001552:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001556:	f001 f9f5 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800155a:	2004      	movs	r0, #4
 800155c:	f000 fd90 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001560:	20c8      	movs	r0, #200	; 0xc8
 8001562:	f001 f9ef 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001566:	2008      	movs	r0, #8
 8001568:	f000 fd8a 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800156c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001570:	f001 f9e8 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8001574:	2005      	movs	r0, #5
 8001576:	f000 fd4b 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fd10 	bl	8001fa0 <clockwise_90>
	centre_0(west_front);
 8001580:	2007      	movs	r0, #7
 8001582:	f000 fcd5 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158a:	f001 f9db 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 800158e:	2004      	movs	r0, #4
 8001590:	f000 fdac 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001594:	2008      	movs	r0, #8
 8001596:	f000 fda9 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800159a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159e:	f001 f9d1 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f000 fd6c 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80015a8:	20c8      	movs	r0, #200	; 0xc8
 80015aa:	f001 f9cb 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80015ae:	2006      	movs	r0, #6
 80015b0:	f000 fd66 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f001 f9c4 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 80015bc:	2005      	movs	r0, #5
 80015be:	f000 fcb7 	bl	8001f30 <centre_0>
	centre_0(north_front);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fcb4 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80015c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015cc:	f001 f9ba 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 80015d0:	2002      	movs	r0, #2
 80015d2:	f000 fd8b 	bl	80020ec <servo_push>
	servo_push(south_back);
 80015d6:	2006      	movs	r0, #6
 80015d8:	f000 fd88 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f001 f9b0 	bl	8002944 <HAL_Delay>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080015e8 <movement_X>:
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_90);
}

// Number of Delay: 6
void movement_X(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f000 fd9f 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80015f2:	20c8      	movs	r0, #200	; 0xc8
 80015f4:	f001 f9fe 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80015f8:	2006      	movs	r0, #6
 80015fa:	f000 fd99 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f001 f9f7 	bl	80029f4 <HAL_Delay>
	clockwise_90(east_front);
 8001606:	2003      	movs	r0, #3
 8001608:	f000 fd22 	bl	8002050 <clockwise_90>
	anticlockwise_90(west_front);
 800160c:	2007      	movs	r0, #7
 800160e:	f000 fd57 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001616:	f001 f9ed 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 800161a:	2002      	movs	r0, #2
 800161c:	f000 fdbe 	bl	800219c <servo_push>
	servo_push(south_back);
 8001620:	2006      	movs	r0, #6
 8001622:	f000 fdbb 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f001 f9e3 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 800162e:	2004      	movs	r0, #4
 8001630:	f000 fd7e 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001634:	20c8      	movs	r0, #200	; 0xc8
 8001636:	f001 f9dd 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 800163a:	2008      	movs	r0, #8
 800163c:	f000 fd78 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001644:	f001 f9d6 	bl	80029f4 <HAL_Delay>
	centre_0(west_front);
 8001648:	2007      	movs	r0, #7
 800164a:	f000 fcc9 	bl	8001fe0 <centre_0>
	centre_0(east_front);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 fcc6 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001654:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001658:	f001 f9cc 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 800165c:	2004      	movs	r0, #4
 800165e:	f000 fd9d 	bl	800219c <servo_push>
	servo_push(west_back);
 8001662:	2008      	movs	r0, #8
 8001664:	f000 fd9a 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166c:	f001 f9c2 	bl	80029f4 <HAL_Delay>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <movement_aX>:

// Number of Delay: 6
void movement_aX(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001678:	2002      	movs	r0, #2
 800167a:	f000 fd59 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800167e:	20c8      	movs	r0, #200	; 0xc8
 8001680:	f001 f9b8 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001684:	2006      	movs	r0, #6
 8001686:	f000 fd53 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800168a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168e:	f001 f9b1 	bl	80029f4 <HAL_Delay>
	clockwise_90(west_front);
 8001692:	2007      	movs	r0, #7
 8001694:	f000 fcdc 	bl	8002050 <clockwise_90>
	anticlockwise_90(east_front);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 fd11 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800169e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a2:	f001 f9a7 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 80016a6:	2002      	movs	r0, #2
 80016a8:	f000 fd78 	bl	800219c <servo_push>
	servo_push(south_back);
 80016ac:	2006      	movs	r0, #6
 80016ae:	f000 fd75 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80016b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b6:	f001 f99d 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 80016ba:	2004      	movs	r0, #4
 80016bc:	f000 fd38 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80016c0:	20c8      	movs	r0, #200	; 0xc8
 80016c2:	f001 f997 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 80016c6:	2008      	movs	r0, #8
 80016c8:	f000 fd32 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80016cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d0:	f001 f990 	bl	80029f4 <HAL_Delay>
	centre_0(east_front);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 fc83 	bl	8001fe0 <centre_0>
	centre_0(west_front);
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 fc80 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80016e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e4:	f001 f986 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 80016e8:	2004      	movs	r0, #4
 80016ea:	f000 fd57 	bl	800219c <servo_push>
	servo_push(west_back);
 80016ee:	2008      	movs	r0, #8
 80016f0:	f000 fd54 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80016f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f8:	f001 f97c 	bl	80029f4 <HAL_Delay>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <movement_Z>:
	movement_Z();
	movement_aX();
}

// Number of Delay: 6
void movement_Z(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001704:	2004      	movs	r0, #4
 8001706:	f000 fd13 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f001 f972 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001710:	2008      	movs	r0, #8
 8001712:	f000 fd0d 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171a:	f001 f96b 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fc96 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 8001724:	2001      	movs	r0, #1
 8001726:	f000 fccb 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800172a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172e:	f001 f961 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 8001732:	2004      	movs	r0, #4
 8001734:	f000 fd32 	bl	800219c <servo_push>
	servo_push(west_back);
 8001738:	2008      	movs	r0, #8
 800173a:	f000 fd2f 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800173e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001742:	f001 f957 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 8001746:	2002      	movs	r0, #2
 8001748:	f000 fcf2 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800174c:	20c8      	movs	r0, #200	; 0xc8
 800174e:	f001 f951 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001752:	2006      	movs	r0, #6
 8001754:	f000 fcec 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175c:	f001 f94a 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 8001760:	2005      	movs	r0, #5
 8001762:	f000 fc3d 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fc3a 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800176c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001770:	f001 f940 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001774:	2002      	movs	r0, #2
 8001776:	f000 fd11 	bl	800219c <servo_push>
	servo_push(south_back);
 800177a:	2006      	movs	r0, #6
 800177c:	f000 fd0e 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001784:	f001 f936 	bl	80029f4 <HAL_Delay>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <movement_aZ>:

// Number of Delay: 6
void movement_aZ(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001790:	2004      	movs	r0, #4
 8001792:	f000 fccd 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001796:	20c8      	movs	r0, #200	; 0xc8
 8001798:	f001 f92c 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 800179c:	2008      	movs	r0, #8
 800179e:	f000 fcc7 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a6:	f001 f925 	bl	80029f4 <HAL_Delay>
	anticlockwise_90(south_front);
 80017aa:	2005      	movs	r0, #5
 80017ac:	f000 fc88 	bl	80020c0 <anticlockwise_90>
	clockwise_90(north_front);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fc4d 	bl	8002050 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80017b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ba:	f001 f91b 	bl	80029f4 <HAL_Delay>
	servo_push(east_back);
 80017be:	2004      	movs	r0, #4
 80017c0:	f000 fcec 	bl	800219c <servo_push>
	servo_push(west_back);
 80017c4:	2008      	movs	r0, #8
 80017c6:	f000 fce9 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80017ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ce:	f001 f911 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f000 fcac 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80017d8:	20c8      	movs	r0, #200	; 0xc8
 80017da:	f001 f90b 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80017de:	2006      	movs	r0, #6
 80017e0:	f000 fca6 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e8:	f001 f904 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 80017ec:	2005      	movs	r0, #5
 80017ee:	f000 fbf7 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 fbf4 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80017f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fc:	f001 f8fa 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001800:	2002      	movs	r0, #2
 8001802:	f000 fccb 	bl	800219c <servo_push>
	servo_push(south_back);
 8001806:	2006      	movs	r0, #6
 8001808:	f000 fcc8 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800180c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001810:	f001 f8f0 	bl	80029f4 <HAL_Delay>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <movement_scan_up>:
=======
080015e8 <movement_scan_up>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
void movement_ad(void) {
	movement_aU();
	movement_Y();
}

void movement_scan_up(void) {
<<<<<<< HEAD
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 800181c:	2002      	movs	r0, #2
 800181e:	f000 fc87 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001822:	20c8      	movs	r0, #200	; 0xc8
 8001824:	f001 f8e6 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001828:	2006      	movs	r0, #6
 800182a:	f000 fc81 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800182e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001832:	f001 f8df 	bl	80029f4 <HAL_Delay>
	clockwise_90(south_front);
 8001836:	2005      	movs	r0, #5
 8001838:	f000 fc0a 	bl	8002050 <clockwise_90>
	anticlockwise_90(north_front);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fc3f 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f001 f8d5 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 800184a:	2002      	movs	r0, #2
 800184c:	f000 fca6 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001850:	20c8      	movs	r0, #200	; 0xc8
 8001852:	f001 f8cf 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 8001856:	2006      	movs	r0, #6
 8001858:	f000 fca0 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800185c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001860:	f001 f8c8 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8001864:	2004      	movs	r0, #4
 8001866:	f000 fc63 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800186a:	20c8      	movs	r0, #200	; 0xc8
 800186c:	f001 f8c2 	bl	80029f4 <HAL_Delay>
	servo_pull(west_back);
 8001870:	2008      	movs	r0, #8
 8001872:	f000 fc5d 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001876:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187a:	f001 f8bb 	bl	80029f4 <HAL_Delay>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <movement_scan_up_r>:

void movement_scan_up_r(void) {
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
	servo_push(east_back);
 8001886:	2004      	movs	r0, #4
 8001888:	f000 fc88 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 800188c:	20c8      	movs	r0, #200	; 0xc8
 800188e:	f001 f8b1 	bl	80029f4 <HAL_Delay>
	servo_push(west_back);
 8001892:	2008      	movs	r0, #8
 8001894:	f000 fc82 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189c:	f001 f8aa 	bl	80029f4 <HAL_Delay>
	servo_pull(north_back);
 80018a0:	2002      	movs	r0, #2
 80018a2:	f000 fc45 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80018a6:	20c8      	movs	r0, #200	; 0xc8
 80018a8:	f001 f8a4 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 80018ac:	2006      	movs	r0, #6
 80018ae:	f000 fc3f 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80018b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b6:	f001 f89d 	bl	80029f4 <HAL_Delay>
	centre_0(south_front);
 80018ba:	2005      	movs	r0, #5
 80018bc:	f000 fb90 	bl	8001fe0 <centre_0>
	centre_0(north_front);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 fb8d 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80018c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ca:	f001 f893 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f000 fc64 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 80018d4:	20c8      	movs	r0, #200	; 0xc8
 80018d6:	f001 f88d 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 80018da:	2006      	movs	r0, #6
 80018dc:	f000 fc5e 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80018e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e4:	f001 f886 	bl	80029f4 <HAL_Delay>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <movement_scan_north>:

void movement_scan_north(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	movement_aZ();
 80018f0:	f7ff ff4c 	bl	800178c <movement_aZ>
	movement_aZ();
 80018f4:	f7ff ff4a 	bl	800178c <movement_aZ>
	movement_aX();
 80018f8:	f7ff febc 	bl	8001674 <movement_aX>
	movement_scan_up();
 80018fc:	f7ff ff8c 	bl	8001818 <movement_scan_up>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <movement_scan_north_r>:

void movement_scan_north_r(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	movement_scan_up_r();
 8001908:	f7ff ffbb 	bl	8001882 <movement_scan_up_r>
	movement_X();
 800190c:	f7ff fe6c 	bl	80015e8 <movement_X>
	movement_Z();
 8001910:	f7ff fef6 	bl	8001700 <movement_Z>
	movement_Z();
 8001914:	f7ff fef4 	bl	8001700 <movement_Z>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <movement_scan_east>:

void movement_scan_east(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	movement_X();
 8001920:	f7ff fe62 	bl	80015e8 <movement_X>
	movement_aZ();
 8001924:	f7ff ff32 	bl	800178c <movement_aZ>
	movement_scan_up();
 8001928:	f7ff ff76 	bl	8001818 <movement_scan_up>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <movement_scan_east_r>:

void movement_scan_east_r(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	movement_scan_up_r();
 8001934:	f7ff ffa5 	bl	8001882 <movement_scan_up_r>
	movement_Z();
 8001938:	f7ff fee2 	bl	8001700 <movement_Z>
	movement_aX();
 800193c:	f7ff fe9a 	bl	8001674 <movement_aX>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <movement_scan_south>:

void movement_scan_south(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001948:	2002      	movs	r0, #2
 800194a:	f000 fbf1 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800194e:	20c8      	movs	r0, #200	; 0xc8
 8001950:	f001 f850 	bl	80029f4 <HAL_Delay>
	servo_pull(south_back);
 8001954:	2006      	movs	r0, #6
 8001956:	f000 fbeb 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f001 f849 	bl	80029f4 <HAL_Delay>
	clockwise_90(east_front);
 8001962:	2003      	movs	r0, #3
 8001964:	f000 fb74 	bl	8002050 <clockwise_90>
	anticlockwise_90(west_front);
 8001968:	2007      	movs	r0, #7
 800196a:	f000 fba9 	bl	80020c0 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800196e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001972:	f001 f83f 	bl	80029f4 <HAL_Delay>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <movement_scan_south_r>:

void movement_scan_south_r(void) {
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
	centre_0(west_front);
 800197e:	2007      	movs	r0, #7
 8001980:	f000 fb2e 	bl	8001fe0 <centre_0>
	centre_0(east_front);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 fb2b 	bl	8001fe0 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800198a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800198e:	f001 f831 	bl	80029f4 <HAL_Delay>
	servo_push(north_back);
 8001992:	2002      	movs	r0, #2
 8001994:	f000 fc02 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001998:	20c8      	movs	r0, #200	; 0xc8
 800199a:	f001 f82b 	bl	80029f4 <HAL_Delay>
	servo_push(south_back);
 800199e:	2006      	movs	r0, #6
 80019a0:	f000 fbfc 	bl	800219c <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80019a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a8:	f001 f824 	bl	80029f4 <HAL_Delay>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <movement_scan_west>:

void movement_scan_west(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	movement_X();
 80019b4:	f7ff fe18 	bl	80015e8 <movement_X>
	movement_Z();
 80019b8:	f7ff fea2 	bl	8001700 <movement_Z>
	movement_scan_up();
 80019bc:	f7ff ff2c 	bl	8001818 <movement_scan_up>
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <movement_scan_west_r>:

void movement_scan_west_r(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	movement_scan_up_r();
 80019c8:	f7ff ff5b 	bl	8001882 <movement_scan_up_r>
	movement_aZ();
 80019cc:	f7ff fede 	bl	800178c <movement_aZ>
	movement_aX();
 80019d0:	f7ff fe50 	bl	8001674 <movement_aX>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <movement_scan_down>:

void movement_scan_down(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	movement_X();
 80019dc:	f7ff fe04 	bl	80015e8 <movement_X>
	movement_X();
 80019e0:	f7ff fe02 	bl	80015e8 <movement_X>
	movement_scan_up();
 80019e4:	f7ff ff18 	bl	8001818 <movement_scan_up>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <movement_scan_down_r>:

void movement_scan_down_r(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	movement_scan_up_r();
 80019f0:	f7ff ff47 	bl	8001882 <movement_scan_up_r>
	movement_X();
 80019f4:	f7ff fdf8 	bl	80015e8 <movement_X>
	movement_X();
 80019f8:	f7ff fdf6 	bl	80015e8 <movement_X>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <splitCharArray>:
=======
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f000 fd47 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80015f2:	20c8      	movs	r0, #200	; 0xc8
 80015f4:	f001 f9a6 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80015f8:	2006      	movs	r0, #6
 80015fa:	f000 fd41 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f001 f99f 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 8001606:	2005      	movs	r0, #5
 8001608:	f000 fcca 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 800160c:	2001      	movs	r0, #1
 800160e:	f000 fcff 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001616:	f001 f995 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 800161a:	2002      	movs	r0, #2
 800161c:	f000 fd66 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001620:	2006      	movs	r0, #6
 8001622:	f000 fd63 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f001 f98b 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800162e:	2004      	movs	r0, #4
 8001630:	f000 fd26 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001634:	20c8      	movs	r0, #200	; 0xc8
 8001636:	f001 f985 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 800163a:	2008      	movs	r0, #8
 800163c:	f000 fd20 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001644:	f001 f97e 	bl	8002944 <HAL_Delay>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <movement_scan_north>:
	HAL_Delay(DELAY_TIME_sP);
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

void movement_scan_north(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	servo_push(east_back);
 8001650:	2004      	movs	r0, #4
 8001652:	f000 fd4b 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001656:	2008      	movs	r0, #8
 8001658:	f000 fd48 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800165c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001660:	f001 f970 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8001664:	2002      	movs	r0, #2
 8001666:	f000 fd0b 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800166a:	20c8      	movs	r0, #200	; 0xc8
 800166c:	f001 f96a 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8001670:	2006      	movs	r0, #6
 8001672:	f000 fd05 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800167a:	f001 f963 	bl	8002944 <HAL_Delay>
	centre_0(south_front);
 800167e:	2005      	movs	r0, #5
 8001680:	f000 fc56 	bl	8001f30 <centre_0>
	centre_0(north_front);
 8001684:	2001      	movs	r0, #1
 8001686:	f000 fc53 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800168a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168e:	f001 f959 	bl	8002944 <HAL_Delay>
	servo_push(south_back);
 8001692:	2006      	movs	r0, #6
 8001694:	f000 fd2a 	bl	80020ec <servo_push>
	servo_push(north_back);
 8001698:	2002      	movs	r0, #2
 800169a:	f000 fd27 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800169e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a2:	f001 f94f 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 80016a6:	2004      	movs	r0, #4
 80016a8:	f000 fcea 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80016ac:	20c8      	movs	r0, #200	; 0xc8
 80016ae:	f001 f949 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80016b2:	2008      	movs	r0, #8
 80016b4:	f000 fce4 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80016b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016bc:	f001 f942 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 fc6d 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f000 fca2 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80016cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d0:	f001 f938 	bl	8002944 <HAL_Delay>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <movement_scan_north_r>:

void movement_scan_north_r(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 80016dc:	2005      	movs	r0, #5
 80016de:	f000 fc97 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 fc5c 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80016e8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80016ec:	f001 f92a 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 80016f0:	2004      	movs	r0, #4
 80016f2:	f000 fcfb 	bl	80020ec <servo_push>
	servo_push(west_back);
 80016f6:	2008      	movs	r0, #8
 80016f8:	f000 fcf8 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f001 f920 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8001704:	2006      	movs	r0, #6
 8001706:	f000 fcbb 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f001 f91a 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8001710:	2002      	movs	r0, #2
 8001712:	f000 fcb5 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171a:	f001 f913 	bl	8002944 <HAL_Delay>
	clockwise_90(west_front);
 800171e:	2007      	movs	r0, #7
 8001720:	f000 fc3e 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(east_front);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 fc73 	bl	8002010 <anticlockwise_90>
	centre_0(north_front);
 800172a:	2001      	movs	r0, #1
 800172c:	f000 fc00 	bl	8001f30 <centre_0>
	centre_0(south_front);
 8001730:	2005      	movs	r0, #5
 8001732:	f000 fbfd 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173a:	f001 f903 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 800173e:	2002      	movs	r0, #2
 8001740:	f000 fcd4 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001744:	2006      	movs	r0, #6
 8001746:	f000 fcd1 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800174a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800174e:	f001 f8f9 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 8001752:	2008      	movs	r0, #8
 8001754:	f000 fc94 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f001 f8f3 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800175e:	2004      	movs	r0, #4
 8001760:	f000 fc8e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001768:	f001 f8ec 	bl	8002944 <HAL_Delay>
	centre_0(east_front);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 fbdf 	bl	8001f30 <centre_0>
	centre_0(west_front);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 fbdc 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177c:	f001 f8e2 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8001780:	2004      	movs	r0, #4
 8001782:	f000 fcb3 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001786:	2008      	movs	r0, #8
 8001788:	f000 fcb0 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800178c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001790:	f001 f8d8 	bl	8002944 <HAL_Delay>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <movement_scan_east>:

void movement_scan_east(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	servo_push(east_back);
 800179c:	2004      	movs	r0, #4
 800179e:	f000 fca5 	bl	80020ec <servo_push>
	servo_push(west_back);
 80017a2:	2008      	movs	r0, #8
 80017a4:	f000 fca2 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80017a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ac:	f001 f8ca 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 80017b0:	2002      	movs	r0, #2
 80017b2:	f000 fc65 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80017b6:	20c8      	movs	r0, #200	; 0xc8
 80017b8:	f001 f8c4 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 80017bc:	2006      	movs	r0, #6
 80017be:	f000 fc5f 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c6:	f001 f8bd 	bl	8002944 <HAL_Delay>
	centre_0(north_front);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 fbb0 	bl	8001f30 <centre_0>
	centre_0(south_front);
 80017d0:	2005      	movs	r0, #5
 80017d2:	f000 fbad 	bl	8001f30 <centre_0>
	clockwise_90(east_front);
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 fbe2 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(west_front);
 80017dc:	2007      	movs	r0, #7
 80017de:	f000 fc17 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80017e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e6:	f001 f8ad 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f000 fc7e 	bl	80020ec <servo_push>
	servo_push(south_back);
 80017f0:	2006      	movs	r0, #6
 80017f2:	f000 fc7b 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80017f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fa:	f001 f8a3 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80017fe:	2008      	movs	r0, #8
 8001800:	f000 fc3e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001804:	20c8      	movs	r0, #200	; 0xc8
 8001806:	f001 f89d 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 800180a:	2004      	movs	r0, #4
 800180c:	f000 fc38 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001814:	f001 f896 	bl	8002944 <HAL_Delay>
	anticlockwise_90(south_front);
 8001818:	2005      	movs	r0, #5
 800181a:	f000 fbf9 	bl	8002010 <anticlockwise_90>
	clockwise_90(north_front);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 fbbe 	bl	8001fa0 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001828:	f001 f88c 	bl	8002944 <HAL_Delay>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <movement_scan_south>:
	movement_scan_up_r();
	movement_Z();
	movement_aX();
}

void movement_scan_south(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	centre_0(north_front);
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fb7b 	bl	8001f30 <centre_0>
	centre_0(south_front);
 800183a:	2005      	movs	r0, #5
 800183c:	f000 fb78 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001840:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001844:	f001 f87e 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 8001848:	2004      	movs	r0, #4
 800184a:	f000 fc4f 	bl	80020ec <servo_push>
	servo_push(west_back);
 800184e:	2008      	movs	r0, #8
 8001850:	f000 fc4c 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001858:	f001 f874 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 800185c:	2002      	movs	r0, #2
 800185e:	f000 fc0f 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001862:	20c8      	movs	r0, #200	; 0xc8
 8001864:	f001 f86e 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 8001868:	2006      	movs	r0, #6
 800186a:	f000 fc09 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800186e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001872:	f001 f867 	bl	8002944 <HAL_Delay>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <movement_scan_west>:
	HAL_Delay(DELAY_TIME_sP);
	servo_push(south_back);
	HAL_Delay(DELAY_TIME_P);
}

void movement_scan_west(void) {
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
	centre_0(east_front);
 800187e:	2003      	movs	r0, #3
 8001880:	f000 fb56 	bl	8001f30 <centre_0>
	centre_0(west_front);
 8001884:	2007      	movs	r0, #7
 8001886:	f000 fb53 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800188a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188e:	f001 f859 	bl	8002944 <HAL_Delay>
	servo_push(north_back);
 8001892:	2002      	movs	r0, #2
 8001894:	f000 fc2a 	bl	80020ec <servo_push>
	servo_push(south_back);
 8001898:	2006      	movs	r0, #6
 800189a:	f000 fc27 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f001 f84f 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 80018a6:	2004      	movs	r0, #4
 80018a8:	f000 fbea 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f001 f849 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80018b2:	2008      	movs	r0, #8
 80018b4:	f000 fbe4 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80018b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018bc:	f001 f842 	bl	8002944 <HAL_Delay>
	clockwise_90(south_front);
 80018c0:	2005      	movs	r0, #5
 80018c2:	f000 fb6d 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(north_front);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fba2 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80018cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d0:	f001 f838 	bl	8002944 <HAL_Delay>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <movement_scan_down>:
	movement_scan_up_r();
	movement_aZ();
	movement_aX();
}

void movement_scan_down(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	servo_push(north_back);
 80018dc:	2002      	movs	r0, #2
 80018de:	f000 fc05 	bl	80020ec <servo_push>
	servo_push(south_back);
 80018e2:	2006      	movs	r0, #6
 80018e4:	f000 fc02 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f001 f82a 	bl	8002944 <HAL_Delay>
	servo_pull(west_back);
 80018f0:	2008      	movs	r0, #8
 80018f2:	f000 fbc5 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80018f6:	20c8      	movs	r0, #200	; 0xc8
 80018f8:	f001 f824 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 80018fc:	2004      	movs	r0, #4
 80018fe:	f000 fbbf 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001906:	f001 f81d 	bl	8002944 <HAL_Delay>
	centre_0(east_front);
 800190a:	2003      	movs	r0, #3
 800190c:	f000 fb10 	bl	8001f30 <centre_0>
	centre_0(west_front);
 8001910:	2007      	movs	r0, #7
 8001912:	f000 fb0d 	bl	8001f30 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191a:	f001 f813 	bl	8002944 <HAL_Delay>
	servo_push(east_back);
 800191e:	2004      	movs	r0, #4
 8001920:	f000 fbe4 	bl	80020ec <servo_push>
	servo_push(west_back);
 8001924:	2008      	movs	r0, #8
 8001926:	f000 fbe1 	bl	80020ec <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800192a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800192e:	f001 f809 	bl	8002944 <HAL_Delay>
	servo_pull(north_back);
 8001932:	2002      	movs	r0, #2
 8001934:	f000 fba4 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001938:	20c8      	movs	r0, #200	; 0xc8
 800193a:	f001 f803 	bl	8002944 <HAL_Delay>
	servo_pull(south_back);
 800193e:	2006      	movs	r0, #6
 8001940:	f000 fb9e 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001948:	f000 fffc 	bl	8002944 <HAL_Delay>
	clockwise_90(east_front);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fb27 	bl	8001fa0 <clockwise_90>
	anticlockwise_90(west_front);
 8001952:	2007      	movs	r0, #7
 8001954:	f000 fb5c 	bl	8002010 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195c:	f000 fff2 	bl	8002944 <HAL_Delay>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <splitCharArray>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 *
 * @param src[] string
 * @param target[][SIZE_OF_ONE_MOVEMENT] an array of string
 * @return number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 */
int splitCharArray(char src[], char target[][SIZE_OF_ONE_MOVEMENT]) {
<<<<<<< HEAD
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
    int pos = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
    int index = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
    int num = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
    while (src[pos] != ENDING_CHAR) {
 8001a16:	e026      	b.n	8001a66 <splitCharArray+0x66>
        if (src[pos] != DELIMETER) {
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	d00e      	beq.n	8001a42 <splitCharArray+0x42>
            target[index][num++] = src[pos];
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	18d1      	adds	r1, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	441a      	add	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1c58      	adds	r0, r3, #1
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	7809      	ldrb	r1, [r1, #0]
 8001a3e:	54d1      	strb	r1, [r2, r3]
 8001a40:	e00e      	b.n	8001a60 <splitCharArray+0x60>
        } else {
            target[index][num] = END_OF_CHAR;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
            index++;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
            num = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
        }
        pos++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
    while (src[pos] != ENDING_CHAR) {
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b23      	cmp	r3, #35	; 0x23
 8001a70:	d1d2      	bne.n	8001a18 <splitCharArray+0x18>
    }
    target[index][num] = END_OF_CHAR;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    index++;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
    return index;
 8001a8c:	693b      	ldr	r3, [r7, #16]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <ReadInput>:
=======
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    int pos = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
    int index = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
    int num = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
    while (src[pos] != ENDING_CHAR) {
 800197a:	e026      	b.n	80019ca <splitCharArray+0x66>
        if (src[pos] != DELIMETER) {
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b20      	cmp	r3, #32
 8001986:	d00e      	beq.n	80019a6 <splitCharArray+0x42>
            target[index][num++] = src[pos];
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	18d1      	adds	r1, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	441a      	add	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1c58      	adds	r0, r3, #1
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	7809      	ldrb	r1, [r1, #0]
 80019a2:	54d1      	strb	r1, [r2, r3]
 80019a4:	e00e      	b.n	80019c4 <splitCharArray+0x60>
        } else {
            target[index][num] = END_OF_CHAR;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	441a      	add	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
            index++;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3301      	adds	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
            num = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
        }
        pos++;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
    while (src[pos] != ENDING_CHAR) {
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b23      	cmp	r3, #35	; 0x23
 80019d4:	d1d2      	bne.n	800197c <splitCharArray+0x18>
    }
    target[index][num] = END_OF_CHAR;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	441a      	add	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    index++;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3301      	adds	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
    return index;
 80019f0:	693b      	ldr	r3, [r7, #16]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <ReadInput>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 *
 * @param input[] string of input
 * @param *size number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 * @param listOfCommand[][SIZE_OF_ONE_MOVEMENT] string that store different movements into seperated rows
 */
void ReadInput(char input[], int *size, char listOfCommand[][SIZE_OF_ONE_MOVEMENT]) {
<<<<<<< HEAD
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	LCD_DrawString(0,16, "Not yet");
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <ReadInput+0x44>)
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7fe ff81 	bl	80009b0 <LCD_DrawString>
	HAL_UART_Receive(&huart1, input, 100, 0xFFFF);
 8001aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab2:	2264      	movs	r2, #100	; 0x64
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <ReadInput+0x48>)
 8001ab8:	f002 fdf9 	bl	80046ae <HAL_UART_Receive>
	LCD_DrawString(0,0, input);
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7fe ff75 	bl	80009b0 <LCD_DrawString>
    (*size) = splitCharArray(input, listOfCommand);
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff ff99 	bl	8001a00 <splitCharArray>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08004bc0 	.word	0x08004bc0
 8001ae0:	20000278 	.word	0x20000278

08001ae4 <makeOneMovement>:
=======
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
	LCD_DrawString(0,16, "Not yet");
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <ReadInput+0x44>)
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7fe ffcf 	bl	80009b0 <LCD_DrawString>
	HAL_UART_Receive(&huart1, input, 100, 0xFFFF);
 8001a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a16:	2264      	movs	r2, #100	; 0x64
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	480a      	ldr	r0, [pc, #40]	; (8001a44 <ReadInput+0x48>)
 8001a1c:	f002 fdef 	bl	80045fe <HAL_UART_Receive>
	LCD_DrawString(0,0, input);
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	2100      	movs	r1, #0
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7fe ffc3 	bl	80009b0 <LCD_DrawString>
    (*size) = splitCharArray(input, listOfCommand);
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff ff99 	bl	8001964 <splitCharArray>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	08004b10 	.word	0x08004b10
 8001a44:	20000278 	.word	0x20000278

08001a48 <makeOneMovement>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
/*
 * Perform one movement according to character array
 *
 * @param Movement[SIZE_OF_ONE_MOVEMENT] character array that store one command of movement
 */
void makeOneMovement(char Movement[]) {
<<<<<<< HEAD
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	switch (Movement[0]) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b42      	subs	r3, #66	; 0x42
 8001af2:	2b13      	cmp	r3, #19
 8001af4:	f200 809e 	bhi.w	8001c34 <makeOneMovement+0x150>
 8001af8:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <makeOneMovement+0x1c>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001bc3 	.word	0x08001bc3
 8001b04:	08001c35 	.word	0x08001c35
 8001b08:	08001c0f 	.word	0x08001c0f
 8001b0c:	08001c35 	.word	0x08001c35
 8001b10:	08001b51 	.word	0x08001b51
 8001b14:	08001c35 	.word	0x08001c35
 8001b18:	08001c35 	.word	0x08001c35
 8001b1c:	08001c35 	.word	0x08001c35
 8001b20:	08001c35 	.word	0x08001c35
 8001b24:	08001c35 	.word	0x08001c35
 8001b28:	08001b9d 	.word	0x08001b9d
 8001b2c:	08001c35 	.word	0x08001c35
 8001b30:	08001c35 	.word	0x08001c35
 8001b34:	08001c35 	.word	0x08001c35
 8001b38:	08001c35 	.word	0x08001c35
 8001b3c:	08001c35 	.word	0x08001c35
 8001b40:	08001b77 	.word	0x08001b77
 8001b44:	08001c35 	.word	0x08001c35
 8001b48:	08001c35 	.word	0x08001c35
 8001b4c:	08001be9 	.word	0x08001be9
		case 'F':
			if (Movement[1] == '2')
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b32      	cmp	r3, #50	; 0x32
 8001b58:	d102      	bne.n	8001b60 <makeOneMovement+0x7c>
				movement_F2();
 8001b5a:	f7ff fb23 	bl	80011a4 <movement_F2>
=======
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	switch (Movement[0]) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3b42      	subs	r3, #66	; 0x42
 8001a56:	2b13      	cmp	r3, #19
 8001a58:	f200 809e 	bhi.w	8001b98 <makeOneMovement+0x150>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <makeOneMovement+0x1c>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001b27 	.word	0x08001b27
 8001a68:	08001b99 	.word	0x08001b99
 8001a6c:	08001b73 	.word	0x08001b73
 8001a70:	08001b99 	.word	0x08001b99
 8001a74:	08001ab5 	.word	0x08001ab5
 8001a78:	08001b99 	.word	0x08001b99
 8001a7c:	08001b99 	.word	0x08001b99
 8001a80:	08001b99 	.word	0x08001b99
 8001a84:	08001b99 	.word	0x08001b99
 8001a88:	08001b99 	.word	0x08001b99
 8001a8c:	08001b01 	.word	0x08001b01
 8001a90:	08001b99 	.word	0x08001b99
 8001a94:	08001b99 	.word	0x08001b99
 8001a98:	08001b99 	.word	0x08001b99
 8001a9c:	08001b99 	.word	0x08001b99
 8001aa0:	08001b99 	.word	0x08001b99
 8001aa4:	08001adb 	.word	0x08001adb
 8001aa8:	08001b99 	.word	0x08001b99
 8001aac:	08001b99 	.word	0x08001b99
 8001ab0:	08001b4d 	.word	0x08001b4d
		case 'F':
			if (Movement[1] == '2')
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b32      	cmp	r3, #50	; 0x32
 8001abc:	d102      	bne.n	8001ac4 <makeOneMovement+0x7c>
				movement_F2();
 8001abe:	f7ff fb71 	bl	80011a4 <movement_F2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aF();
			else
				movement_F();
			break;
<<<<<<< HEAD
 8001b5e:	e069      	b.n	8001c34 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b27      	cmp	r3, #39	; 0x27
 8001b68:	d102      	bne.n	8001b70 <makeOneMovement+0x8c>
				movement_aF();
 8001b6a:	f7ff f80b 	bl	8000b84 <movement_aF>
			break;
 8001b6e:	e061      	b.n	8001c34 <makeOneMovement+0x150>
				movement_F();
 8001b70:	f7fe ffe8 	bl	8000b44 <movement_F>
			break;
 8001b74:	e05e      	b.n	8001c34 <makeOneMovement+0x150>
		case 'R':
			if (Movement[1] == '2')
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b32      	cmp	r3, #50	; 0x32
 8001b7e:	d102      	bne.n	8001b86 <makeOneMovement+0xa2>
				movement_R2();
 8001b80:	f7ff fb45 	bl	800120e <movement_R2>
=======
 8001ac2:	e069      	b.n	8001b98 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b27      	cmp	r3, #39	; 0x27
 8001acc:	d102      	bne.n	8001ad4 <makeOneMovement+0x8c>
				movement_aF();
 8001ace:	f7ff f859 	bl	8000b84 <movement_aF>
			break;
 8001ad2:	e061      	b.n	8001b98 <makeOneMovement+0x150>
				movement_F();
 8001ad4:	f7ff f836 	bl	8000b44 <movement_F>
			break;
 8001ad8:	e05e      	b.n	8001b98 <makeOneMovement+0x150>
		case 'R':
			if (Movement[1] == '2')
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b32      	cmp	r3, #50	; 0x32
 8001ae2:	d102      	bne.n	8001aea <makeOneMovement+0xa2>
				movement_R2();
 8001ae4:	f7ff fb93 	bl	800120e <movement_R2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aR();
			else
				movement_R();
			break;
<<<<<<< HEAD
 8001b84:	e056      	b.n	8001c34 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b27      	cmp	r3, #39	; 0x27
 8001b8e:	d102      	bne.n	8001b96 <makeOneMovement+0xb2>
				movement_aR();
 8001b90:	f7ff f838 	bl	8000c04 <movement_aR>
			break;
 8001b94:	e04e      	b.n	8001c34 <makeOneMovement+0x150>
				movement_R();
 8001b96:	f7ff f815 	bl	8000bc4 <movement_R>
			break;
 8001b9a:	e04b      	b.n	8001c34 <makeOneMovement+0x150>
		case 'L':
			if (Movement[1] == '2')
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b32      	cmp	r3, #50	; 0x32
 8001ba4:	d102      	bne.n	8001bac <makeOneMovement+0xc8>
				movement_L2();
 8001ba6:	f7ff fb67 	bl	8001278 <movement_L2>
=======
 8001ae8:	e056      	b.n	8001b98 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b27      	cmp	r3, #39	; 0x27
 8001af2:	d102      	bne.n	8001afa <makeOneMovement+0xb2>
				movement_aR();
 8001af4:	f7ff f886 	bl	8000c04 <movement_aR>
			break;
 8001af8:	e04e      	b.n	8001b98 <makeOneMovement+0x150>
				movement_R();
 8001afa:	f7ff f863 	bl	8000bc4 <movement_R>
			break;
 8001afe:	e04b      	b.n	8001b98 <makeOneMovement+0x150>
		case 'L':
			if (Movement[1] == '2')
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b32      	cmp	r3, #50	; 0x32
 8001b08:	d102      	bne.n	8001b10 <makeOneMovement+0xc8>
				movement_L2();
 8001b0a:	f7ff fbb5 	bl	8001278 <movement_L2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aL();
			else
				movement_L();
			break;
<<<<<<< HEAD
 8001baa:	e043      	b.n	8001c34 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b27      	cmp	r3, #39	; 0x27
 8001bb4:	d102      	bne.n	8001bbc <makeOneMovement+0xd8>
				movement_aL();
 8001bb6:	f7ff f865 	bl	8000c84 <movement_aL>
			break;
 8001bba:	e03b      	b.n	8001c34 <makeOneMovement+0x150>
				movement_L();
 8001bbc:	f7ff f842 	bl	8000c44 <movement_L>
			break;
 8001bc0:	e038      	b.n	8001c34 <makeOneMovement+0x150>
		case 'B':
			if (Movement[1] == '2')
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b32      	cmp	r3, #50	; 0x32
 8001bca:	d102      	bne.n	8001bd2 <makeOneMovement+0xee>
				movement_B2();
 8001bcc:	f7ff fb89 	bl	80012e2 <movement_B2>
=======
 8001b0e:	e043      	b.n	8001b98 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b27      	cmp	r3, #39	; 0x27
 8001b18:	d102      	bne.n	8001b20 <makeOneMovement+0xd8>
				movement_aL();
 8001b1a:	f7ff f8b3 	bl	8000c84 <movement_aL>
			break;
 8001b1e:	e03b      	b.n	8001b98 <makeOneMovement+0x150>
				movement_L();
 8001b20:	f7ff f890 	bl	8000c44 <movement_L>
			break;
 8001b24:	e038      	b.n	8001b98 <makeOneMovement+0x150>
		case 'B':
			if (Movement[1] == '2')
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b32      	cmp	r3, #50	; 0x32
 8001b2e:	d102      	bne.n	8001b36 <makeOneMovement+0xee>
				movement_B2();
 8001b30:	f7ff fbd7 	bl	80012e2 <movement_B2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aB();
			else
				movement_B();
			break;
<<<<<<< HEAD
 8001bd0:	e030      	b.n	8001c34 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b27      	cmp	r3, #39	; 0x27
 8001bda:	d102      	bne.n	8001be2 <makeOneMovement+0xfe>
				movement_aB();
 8001bdc:	f7ff f892 	bl	8000d04 <movement_aB>
			break;
 8001be0:	e028      	b.n	8001c34 <makeOneMovement+0x150>
				movement_B();
 8001be2:	f7ff f86f 	bl	8000cc4 <movement_B>
			break;
 8001be6:	e025      	b.n	8001c34 <makeOneMovement+0x150>
		case 'U':
			if (Movement[1] == '2')
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b32      	cmp	r3, #50	; 0x32
 8001bf0:	d102      	bne.n	8001bf8 <makeOneMovement+0x114>
				movement_U2();
 8001bf2:	f7ff fbab 	bl	800134c <movement_U2>
=======
 8001b34:	e030      	b.n	8001b98 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b27      	cmp	r3, #39	; 0x27
 8001b3e:	d102      	bne.n	8001b46 <makeOneMovement+0xfe>
				movement_aB();
 8001b40:	f7ff f8e0 	bl	8000d04 <movement_aB>
			break;
 8001b44:	e028      	b.n	8001b98 <makeOneMovement+0x150>
				movement_B();
 8001b46:	f7ff f8bd 	bl	8000cc4 <movement_B>
			break;
 8001b4a:	e025      	b.n	8001b98 <makeOneMovement+0x150>
		case 'U':
			if (Movement[1] == '2')
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b32      	cmp	r3, #50	; 0x32
 8001b54:	d102      	bne.n	8001b5c <makeOneMovement+0x114>
				movement_U2();
 8001b56:	f7ff fbf9 	bl	800134c <movement_U2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aU();
			else
				movement_U();
			break;
<<<<<<< HEAD
 8001bf6:	e01d      	b.n	8001c34 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b27      	cmp	r3, #39	; 0x27
 8001c00:	d102      	bne.n	8001c08 <makeOneMovement+0x124>
				movement_aU();
 8001c02:	f7ff f925 	bl	8000e50 <movement_aU>
			break;
 8001c06:	e015      	b.n	8001c34 <makeOneMovement+0x150>
				movement_U();
 8001c08:	f7ff f89c 	bl	8000d44 <movement_U>
			break;
 8001c0c:	e012      	b.n	8001c34 <makeOneMovement+0x150>
		case 'D':
			if (Movement[1] == '2')
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3301      	adds	r3, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b32      	cmp	r3, #50	; 0x32
 8001c16:	d102      	bne.n	8001c1e <makeOneMovement+0x13a>
				movement_D2();
 8001c18:	f7ff fc3f 	bl	800149a <movement_D2>
=======
 8001b5a:	e01d      	b.n	8001b98 <makeOneMovement+0x150>
			else if (Movement[1] == '\'')
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b27      	cmp	r3, #39	; 0x27
 8001b64:	d102      	bne.n	8001b6c <makeOneMovement+0x124>
				movement_aU();
 8001b66:	f7ff f973 	bl	8000e50 <movement_aU>
			break;
 8001b6a:	e015      	b.n	8001b98 <makeOneMovement+0x150>
				movement_U();
 8001b6c:	f7ff f8ea 	bl	8000d44 <movement_U>
			break;
 8001b70:	e012      	b.n	8001b98 <makeOneMovement+0x150>
		case 'D':
			if (Movement[1] == '2')
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3301      	adds	r3, #1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b32      	cmp	r3, #50	; 0x32
 8001b7a:	d102      	bne.n	8001b82 <makeOneMovement+0x13a>
				movement_D2();
 8001b7c:	f7ff fc8d 	bl	800149a <movement_D2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			else if (Movement[1] == '\'')
				movement_aD();
			else
				movement_D();
			break;
<<<<<<< HEAD
 8001c1c:	e009      	b.n	8001c32 <makeOneMovement+0x14e>
			else if (Movement[1] == '\'')
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3301      	adds	r3, #1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b27      	cmp	r3, #39	; 0x27
 8001c26:	d102      	bne.n	8001c2e <makeOneMovement+0x14a>
				movement_aD();
 8001c28:	f7ff fa2a 	bl	8001080 <movement_aD>
			break;
 8001c2c:	e001      	b.n	8001c32 <makeOneMovement+0x14e>
				movement_D();
 8001c2e:	f7ff f995 	bl	8000f5c <movement_D>
			break;
 8001c32:	bf00      	nop
	}
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SolveTheCube>:
=======
 8001b80:	e009      	b.n	8001b96 <makeOneMovement+0x14e>
			else if (Movement[1] == '\'')
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b27      	cmp	r3, #39	; 0x27
 8001b8a:	d102      	bne.n	8001b92 <makeOneMovement+0x14a>
				movement_aD();
 8001b8c:	f7ff fa78 	bl	8001080 <movement_aD>
			break;
 8001b90:	e001      	b.n	8001b96 <makeOneMovement+0x14e>
				movement_D();
 8001b92:	f7ff f9e3 	bl	8000f5c <movement_D>
			break;
 8001b96:	bf00      	nop
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SolveTheCube>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 *
 * @param listOfCommand[][SIZE_OF_ONE_MOVEMENT] array that contains different movements
 * @param size number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 *
 */
void SolveTheCube(char listOfCommand[][SIZE_OF_ONE_MOVEMENT], int size) {
<<<<<<< HEAD
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    for (int i=0; i<size; ++i)
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e00b      	b.n	8001c64 <SolveTheCube+0x28>
        makeOneMovement(listOfCommand[i]);
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff43 	bl	8001ae4 <makeOneMovement>
    for (int i=0; i<size; ++i)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbef      	blt.n	8001c4c <SolveTheCube+0x10>
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <ScanCube>:

void ScanCube(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8001c7e:	2301      	movs	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	e08a      	b.n	8001d9a <ScanCube+0x122>
		char signal_r;
		char signal_t = 'T';
 8001c84:	2354      	movs	r3, #84	; 0x54
 8001c86:	717b      	strb	r3, [r7, #5]
		switch (steps) {
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	f200 8081 	bhi.w	8001d94 <ScanCube+0x11c>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <ScanCube+0x20>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cfd 	.word	0x08001cfd
 8001ca0:	08001d23 	.word	0x08001d23
 8001ca4:	08001d6f 	.word	0x08001d6f
 8001ca8:	08001d49 	.word	0x08001d49
 8001cac:	08001cd7 	.word	0x08001cd7
			// up
			case 1: {
				movement_scan_up();
 8001cb0:	f7ff fdb2 	bl	8001818 <movement_scan_up>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF); // ackonwledge Camera Board to capture image
 8001cb4:	1d79      	adds	r1, r7, #5
 8001cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cba:	2201      	movs	r2, #1
 8001cbc:	483b      	ldr	r0, [pc, #236]	; (8001dac <ScanCube+0x134>)
 8001cbe:	f002 fc64 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF); // Camera Board finish capturing image
 8001cc2:	1db9      	adds	r1, r7, #6
 8001cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4838      	ldr	r0, [pc, #224]	; (8001dac <ScanCube+0x134>)
 8001ccc:	f002 fcef 	bl	80046ae <HAL_UART_Receive>
				movement_scan_up_r();
 8001cd0:	f7ff fdd7 	bl	8001882 <movement_scan_up_r>
				break;
 8001cd4:	e05e      	b.n	8001d94 <ScanCube+0x11c>
=======
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    for (int i=0; i<size; ++i)
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e00b      	b.n	8001bc8 <SolveTheCube+0x28>
        makeOneMovement(listOfCommand[i]);
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff43 	bl	8001a48 <makeOneMovement>
    for (int i=0; i<size; ++i)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbef      	blt.n	8001bb0 <SolveTheCube+0x10>
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <ScanCube>:

void ScanCube(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8001be2:	2301      	movs	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	e080      	b.n	8001cea <ScanCube+0x10e>
		char signal_r;
		char signal_t = 'T';
 8001be8:	2354      	movs	r3, #84	; 0x54
 8001bea:	717b      	strb	r3, [r7, #5]
		switch (steps) {
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d877      	bhi.n	8001ce4 <ScanCube+0x108>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <ScanCube+0x20>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c5d 	.word	0x08001c5d
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001cc3 	.word	0x08001cc3
 8001c0c:	08001ca1 	.word	0x08001ca1
 8001c10:	08001c37 	.word	0x08001c37
			// up
			case 1: {
				movement_scan_up();
 8001c14:	f7ff fce8 	bl	80015e8 <movement_scan_up>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF); // ackonwledge Camera Board to capture image
 8001c18:	1d79      	adds	r1, r7, #5
 8001c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4836      	ldr	r0, [pc, #216]	; (8001cfc <ScanCube+0x120>)
 8001c22:	f002 fc5a 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF); // Camera Board finish capturing image
 8001c26:	1db9      	adds	r1, r7, #6
 8001c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <ScanCube+0x120>)
 8001c30:	f002 fce5 	bl	80045fe <HAL_UART_Receive>
				break;
 8001c34:	e056      	b.n	8001ce4 <ScanCube+0x108>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
			// north
			case 6: {
				movement_scan_north();
<<<<<<< HEAD
 8001cd6:	f7ff fe09 	bl	80018ec <movement_scan_north>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001cda:	1d79      	adds	r1, r7, #5
 8001cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4832      	ldr	r0, [pc, #200]	; (8001dac <ScanCube+0x134>)
 8001ce4:	f002 fc51 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001ce8:	1db9      	adds	r1, r7, #6
 8001cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cee:	2201      	movs	r2, #1
 8001cf0:	482e      	ldr	r0, [pc, #184]	; (8001dac <ScanCube+0x134>)
 8001cf2:	f002 fcdc 	bl	80046ae <HAL_UART_Receive>
				movement_scan_north_r();
 8001cf6:	f7ff fe05 	bl	8001904 <movement_scan_north_r>
				break;
 8001cfa:	e04b      	b.n	8001d94 <ScanCube+0x11c>
=======
 8001c36:	f7ff fd09 	bl	800164c <movement_scan_north>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001c3a:	1d79      	adds	r1, r7, #5
 8001c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c40:	2201      	movs	r2, #1
 8001c42:	482e      	ldr	r0, [pc, #184]	; (8001cfc <ScanCube+0x120>)
 8001c44:	f002 fc49 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001c48:	1db9      	adds	r1, r7, #6
 8001c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4e:	2201      	movs	r2, #1
 8001c50:	482a      	ldr	r0, [pc, #168]	; (8001cfc <ScanCube+0x120>)
 8001c52:	f002 fcd4 	bl	80045fe <HAL_UART_Receive>
				movement_scan_north_r();
 8001c56:	f7ff fd3f 	bl	80016d8 <movement_scan_north_r>
				break;
 8001c5a:	e043      	b.n	8001ce4 <ScanCube+0x108>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
			// east
			case 2: {
				movement_scan_east();
<<<<<<< HEAD
 8001cfc:	f7ff fe0e 	bl	800191c <movement_scan_east>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001d00:	1d79      	adds	r1, r7, #5
 8001d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d06:	2201      	movs	r2, #1
 8001d08:	4828      	ldr	r0, [pc, #160]	; (8001dac <ScanCube+0x134>)
 8001d0a:	f002 fc3e 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001d0e:	1db9      	adds	r1, r7, #6
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	2201      	movs	r2, #1
 8001d16:	4825      	ldr	r0, [pc, #148]	; (8001dac <ScanCube+0x134>)
 8001d18:	f002 fcc9 	bl	80046ae <HAL_UART_Receive>
				movement_scan_east_r();
 8001d1c:	f7ff fe08 	bl	8001930 <movement_scan_east_r>
				break;
 8001d20:	e038      	b.n	8001d94 <ScanCube+0x11c>
=======
 8001c5c:	f7ff fd9c 	bl	8001798 <movement_scan_east>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001c60:	1d79      	adds	r1, r7, #5
 8001c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c66:	2201      	movs	r2, #1
 8001c68:	4824      	ldr	r0, [pc, #144]	; (8001cfc <ScanCube+0x120>)
 8001c6a:	f002 fc36 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001c6e:	1db9      	adds	r1, r7, #6
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	2201      	movs	r2, #1
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <ScanCube+0x120>)
 8001c78:	f002 fcc1 	bl	80045fe <HAL_UART_Receive>
				break;
 8001c7c:	e032      	b.n	8001ce4 <ScanCube+0x108>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
			// south
			case 3: {
				movement_scan_south();
<<<<<<< HEAD
 8001d22:	f7ff fe0f 	bl	8001944 <movement_scan_south>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001d26:	1d79      	adds	r1, r7, #5
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	481f      	ldr	r0, [pc, #124]	; (8001dac <ScanCube+0x134>)
 8001d30:	f002 fc2b 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001d34:	1db9      	adds	r1, r7, #6
 8001d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	481b      	ldr	r0, [pc, #108]	; (8001dac <ScanCube+0x134>)
 8001d3e:	f002 fcb6 	bl	80046ae <HAL_UART_Receive>
				movement_scan_south_r();
 8001d42:	f7ff fe1a 	bl	800197a <movement_scan_south_r>
				break;
 8001d46:	e025      	b.n	8001d94 <ScanCube+0x11c>
=======
 8001c7e:	f7ff fdd7 	bl	8001830 <movement_scan_south>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001c82:	1d79      	adds	r1, r7, #5
 8001c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c88:	2201      	movs	r2, #1
 8001c8a:	481c      	ldr	r0, [pc, #112]	; (8001cfc <ScanCube+0x120>)
 8001c8c:	f002 fc25 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001c90:	1db9      	adds	r1, r7, #6
 8001c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c96:	2201      	movs	r2, #1
 8001c98:	4818      	ldr	r0, [pc, #96]	; (8001cfc <ScanCube+0x120>)
 8001c9a:	f002 fcb0 	bl	80045fe <HAL_UART_Receive>
				break;
 8001c9e:	e021      	b.n	8001ce4 <ScanCube+0x108>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
			// west
			case 5: {
				movement_scan_west();
<<<<<<< HEAD
 8001d48:	f7ff fe32 	bl	80019b0 <movement_scan_west>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001d4c:	1d79      	adds	r1, r7, #5
 8001d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d52:	2201      	movs	r2, #1
 8001d54:	4815      	ldr	r0, [pc, #84]	; (8001dac <ScanCube+0x134>)
 8001d56:	f002 fc18 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001d5a:	1db9      	adds	r1, r7, #6
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	2201      	movs	r2, #1
 8001d62:	4812      	ldr	r0, [pc, #72]	; (8001dac <ScanCube+0x134>)
 8001d64:	f002 fca3 	bl	80046ae <HAL_UART_Receive>
				movement_scan_west_r();
 8001d68:	f7ff fe2c 	bl	80019c4 <movement_scan_west_r>
				break;
 8001d6c:	e012      	b.n	8001d94 <ScanCube+0x11c>
=======
 8001ca0:	f7ff fdeb 	bl	800187a <movement_scan_west>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001ca4:	1d79      	adds	r1, r7, #5
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	2201      	movs	r2, #1
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <ScanCube+0x120>)
 8001cae:	f002 fc14 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001cb2:	1db9      	adds	r1, r7, #6
 8001cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <ScanCube+0x120>)
 8001cbc:	f002 fc9f 	bl	80045fe <HAL_UART_Receive>
				break;
 8001cc0:	e010      	b.n	8001ce4 <ScanCube+0x108>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
			// down
			case 4: {
				movement_scan_down();
<<<<<<< HEAD
 8001d6e:	f7ff fe33 	bl	80019d8 <movement_scan_down>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001d72:	1d79      	adds	r1, r7, #5
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	2201      	movs	r2, #1
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <ScanCube+0x134>)
 8001d7c:	f002 fc05 	bl	800458a <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001d80:	1db9      	adds	r1, r7, #6
 8001d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d86:	2201      	movs	r2, #1
 8001d88:	4808      	ldr	r0, [pc, #32]	; (8001dac <ScanCube+0x134>)
 8001d8a:	f002 fc90 	bl	80046ae <HAL_UART_Receive>
				movement_scan_down_r();
 8001d8e:	f7ff fe2d 	bl	80019ec <movement_scan_down_r>
				break;
 8001d92:	bf00      	nop
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	3301      	adds	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	f67f af71 	bls.w	8001c84 <ScanCube+0xc>
=======
 8001cc2:	f7ff fe09 	bl	80018d8 <movement_scan_down>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8001cc6:	1d79      	adds	r1, r7, #5
 8001cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ccc:	2201      	movs	r2, #1
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <ScanCube+0x120>)
 8001cd0:	f002 fc03 	bl	80044da <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8001cd4:	1db9      	adds	r1, r7, #6
 8001cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <ScanCube+0x120>)
 8001cde:	f002 fc8e 	bl	80045fe <HAL_UART_Receive>
				break;
 8001ce2:	bf00      	nop
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	f67f af7b 	bls.w	8001be8 <ScanCube+0xc>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			}
		}
	}
}
<<<<<<< HEAD
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000278 	.word	0x20000278

08001db0 <mode>:
=======
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000278 	.word	0x20000278

08001d00 <mode>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 * Mode 1: Solving mode
 * Mode 2: Shuffling mode
 *
 * @param choice choice of mode
 */
void mode(uint8_t choice) {
<<<<<<< HEAD
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ea      	sub	sp, #424	; 0x1a8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4602      	mov	r2, r0
 8001db8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001dbc:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 8001dc0:	701a      	strb	r2, [r3, #0]
	switch (choice) {
 8001dc2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001dc6:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d002      	beq.n	8001dd6 <mode+0x26>
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d049      	beq.n	8001e68 <mode+0xb8>
=======
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ea      	sub	sp, #424	; 0x1a8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4602      	mov	r2, r0
 8001d08:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d0c:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 8001d10:	701a      	strb	r2, [r3, #0]
	switch (choice) {
 8001d12:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d16:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d002      	beq.n	8001d26 <mode+0x26>
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d049      	beq.n	8001db8 <mode+0xb8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
			break;
		}
		default:
	}
}
<<<<<<< HEAD
 8001dd4:	e087      	b.n	8001ee6 <mode+0x136>
			stage = '1';
 8001dd6:	2331      	movs	r3, #49	; 0x31
 8001dd8:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001ddc:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de4:	2201      	movs	r2, #1
 8001de6:	4842      	ldr	r0, [pc, #264]	; (8001ef0 <mode+0x140>)
 8001de8:	f002 fbcf 	bl	800458a <HAL_UART_Transmit>
			insert_cube();
 8001dec:	f000 f8b6 	bl	8001f5c <insert_cube>
			stage = '2';
 8001df0:	2332      	movs	r3, #50	; 0x32
 8001df2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001df6:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfe:	2201      	movs	r2, #1
 8001e00:	483b      	ldr	r0, [pc, #236]	; (8001ef0 <mode+0x140>)
 8001e02:	f002 fbc2 	bl	800458a <HAL_UART_Transmit>
			ScanCube();
 8001e06:	f7ff ff37 	bl	8001c78 <ScanCube>
			stage = '3';
 8001e0a:	2333      	movs	r3, #51	; 0x33
 8001e0c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001e10:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <mode+0x140>)
 8001e1c:	f002 fbb5 	bl	800458a <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8001e20:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001e24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e28:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <mode+0x144>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fe34 	bl	8001a98 <ReadInput>
			SolveTheCube(listOfCommand, size);
 8001e30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e34:	4619      	mov	r1, r3
 8001e36:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <mode+0x144>)
 8001e38:	f7ff ff00 	bl	8001c3c <SolveTheCube>
			remove_cube();
 8001e3c:	f000 f8be 	bl	8001fbc <remove_cube>
			stage = '4';
 8001e40:	2334      	movs	r3, #52	; 0x34
 8001e42:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001e46:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4827      	ldr	r0, [pc, #156]	; (8001ef0 <mode+0x140>)
 8001e52:	f002 fb9a 	bl	800458a <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001e56:	f507 71d3 	add.w	r1, r7, #422	; 0x1a6
 8001e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <mode+0x140>)
 8001e62:	f002 fc24 	bl	80046ae <HAL_UART_Receive>
			break;
 8001e66:	e03e      	b.n	8001ee6 <mode+0x136>
			stage = '1';
 8001e68:	2331      	movs	r3, #49	; 0x31
 8001e6a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001e6e:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e76:	2201      	movs	r2, #1
 8001e78:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <mode+0x140>)
 8001e7a:	f002 fb86 	bl	800458a <HAL_UART_Transmit>
			insert_cube();
 8001e7e:	f000 f86d 	bl	8001f5c <insert_cube>
			stage = '2';
 8001e82:	2332      	movs	r3, #50	; 0x32
 8001e84:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001e88:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	2201      	movs	r2, #1
 8001e92:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <mode+0x140>)
 8001e94:	f002 fb79 	bl	800458a <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8001e98:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e9c:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fdf7 	bl	8001a98 <ReadInput>
			SolveTheCube(listOfCommand, size);
 8001eaa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001eae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fec1 	bl	8001c3c <SolveTheCube>
			remove_cube();
 8001eba:	f000 f87f 	bl	8001fbc <remove_cube>
			stage = '3';
 8001ebe:	2333      	movs	r3, #51	; 0x33
 8001ec0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001ec4:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <mode+0x140>)
 8001ed0:	f002 fb5b 	bl	800458a <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001ed4:	f507 71cf 	add.w	r1, r7, #414	; 0x19e
 8001ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001edc:	2201      	movs	r2, #1
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <mode+0x140>)
 8001ee0:	f002 fbe5 	bl	80046ae <HAL_UART_Receive>
			break;
 8001ee4:	bf00      	nop
}
 8001ee6:	bf00      	nop
 8001ee8:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000278 	.word	0x20000278
 8001ef4:	20000074 	.word	0x20000074

08001ef8 <servo_init>:
=======
 8001d24:	e087      	b.n	8001e36 <mode+0x136>
			stage = '1';
 8001d26:	2331      	movs	r3, #49	; 0x31
 8001d28:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001d2c:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d34:	2201      	movs	r2, #1
 8001d36:	4842      	ldr	r0, [pc, #264]	; (8001e40 <mode+0x140>)
 8001d38:	f002 fbcf 	bl	80044da <HAL_UART_Transmit>
			insert_cube();
 8001d3c:	f000 f8b6 	bl	8001eac <insert_cube>
			stage = '2';
 8001d40:	2332      	movs	r3, #50	; 0x32
 8001d42:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001d46:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4e:	2201      	movs	r2, #1
 8001d50:	483b      	ldr	r0, [pc, #236]	; (8001e40 <mode+0x140>)
 8001d52:	f002 fbc2 	bl	80044da <HAL_UART_Transmit>
			ScanCube();
 8001d56:	f7ff ff41 	bl	8001bdc <ScanCube>
			stage = '3';
 8001d5a:	2333      	movs	r3, #51	; 0x33
 8001d5c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001d60:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4835      	ldr	r0, [pc, #212]	; (8001e40 <mode+0x140>)
 8001d6c:	f002 fbb5 	bl	80044da <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8001d70:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001d74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d78:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <mode+0x144>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fe3e 	bl	80019fc <ReadInput>
			SolveTheCube(listOfCommand, size);
 8001d80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d84:	4619      	mov	r1, r3
 8001d86:	482f      	ldr	r0, [pc, #188]	; (8001e44 <mode+0x144>)
 8001d88:	f7ff ff0a 	bl	8001ba0 <SolveTheCube>
			remove_cube();
 8001d8c:	f000 f8be 	bl	8001f0c <remove_cube>
			stage = '4';
 8001d90:	2334      	movs	r3, #52	; 0x34
 8001d92:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001d96:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4827      	ldr	r0, [pc, #156]	; (8001e40 <mode+0x140>)
 8001da2:	f002 fb9a 	bl	80044da <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001da6:	f507 71d3 	add.w	r1, r7, #422	; 0x1a6
 8001daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dae:	2201      	movs	r2, #1
 8001db0:	4823      	ldr	r0, [pc, #140]	; (8001e40 <mode+0x140>)
 8001db2:	f002 fc24 	bl	80045fe <HAL_UART_Receive>
			break;
 8001db6:	e03e      	b.n	8001e36 <mode+0x136>
			stage = '1';
 8001db8:	2331      	movs	r3, #49	; 0x31
 8001dba:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001dbe:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	481d      	ldr	r0, [pc, #116]	; (8001e40 <mode+0x140>)
 8001dca:	f002 fb86 	bl	80044da <HAL_UART_Transmit>
			insert_cube();
 8001dce:	f000 f86d 	bl	8001eac <insert_cube>
			stage = '2';
 8001dd2:	2332      	movs	r3, #50	; 0x32
 8001dd4:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001dd8:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de0:	2201      	movs	r2, #1
 8001de2:	4817      	ldr	r0, [pc, #92]	; (8001e40 <mode+0x140>)
 8001de4:	f002 fb79 	bl	80044da <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8001de8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001dec:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe01 	bl	80019fc <ReadInput>
			SolveTheCube(listOfCommand, size);
 8001dfa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fecb 	bl	8001ba0 <SolveTheCube>
			remove_cube();
 8001e0a:	f000 f87f 	bl	8001f0c <remove_cube>
			stage = '3';
 8001e0e:	2333      	movs	r3, #51	; 0x33
 8001e10:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8001e14:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8001e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <mode+0x140>)
 8001e20:	f002 fb5b 	bl	80044da <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001e24:	f507 71cf 	add.w	r1, r7, #414	; 0x19e
 8001e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4804      	ldr	r0, [pc, #16]	; (8001e40 <mode+0x140>)
 8001e30:	f002 fbe5 	bl	80045fe <HAL_UART_Receive>
			break;
 8001e34:	bf00      	nop
}
 8001e36:	bf00      	nop
 8001e38:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000278 	.word	0x20000278
 8001e44:	20000074 	.word	0x20000074

08001e48 <servo_init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

#include "servo.h"

GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void servo_init(void) {
<<<<<<< HEAD
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++) {
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e010      	b.n	8001f26 <servo_init+0x2e>
		servo_pull(i*2);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f910 	bl	8002130 <servo_pull>
		centre_0(i*2-1);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f860 	bl	8001fe0 <centre_0>
	for (uint8_t i = 1; i <= 4; i++) {
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	3301      	adds	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d9eb      	bls.n	8001f04 <servo_init+0xc>
	}
	HAL_Delay(DELAY_TIME_P);
 8001f2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f30:	f000 fd60 	bl	80029f4 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8001f34:	2301      	movs	r3, #1
 8001f36:	71bb      	strb	r3, [r7, #6]
 8001f38:	e008      	b.n	8001f4c <servo_init+0x54>
		servo_push(i*2);
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f92b 	bl	800219c <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	71bb      	strb	r3, [r7, #6]
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d9f3      	bls.n	8001f3a <servo_init+0x42>
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <insert_cube>:

void insert_cube(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8001f62:	2006      	movs	r0, #6
 8001f64:	f000 f8e4 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001f68:	20c8      	movs	r0, #200	; 0xc8
 8001f6a:	f000 fd43 	bl	80029f4 <HAL_Delay>
	servo_pull(east_back);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f000 f8de 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f000 fd3c 	bl	80029f4 <HAL_Delay>

	char stage;
	HAL_UART_Receive(&huart1, &stage, 1, 0xFFFF);
 8001f7c:	1db9      	adds	r1, r7, #6
 8001f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f82:	2201      	movs	r2, #1
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <insert_cube+0x5c>)
 8001f86:	f002 fb92 	bl	80046ae <HAL_UART_Receive>
	for (uint8_t i = 1; i <= 4; i++)
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	e008      	b.n	8001fa2 <insert_cube+0x46>
		servo_push(i*2);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f900 	bl	800219c <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d9f3      	bls.n	8001f90 <insert_cube+0x34>
	HAL_Delay(DELAY_TIME_P);
 8001fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fac:	f000 fd22 	bl	80029f4 <HAL_Delay>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000278 	.word	0x20000278

08001fbc <remove_cube>:

void remove_cube(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001fc0:	2008      	movs	r0, #8
 8001fc2:	f000 f8b5 	bl	8002130 <servo_pull>
	servo_pull(south_back);
 8001fc6:	2006      	movs	r0, #6
 8001fc8:	f000 f8b2 	bl	8002130 <servo_pull>
	servo_pull(east_back);
 8001fcc:	2004      	movs	r0, #4
 8001fce:	f000 f8af 	bl	8002130 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd6:	f000 fd0d 	bl	80029f4 <HAL_Delay>
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <centre_0>:

void centre_0(servos servo) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d024      	beq.n	8002040 <centre_0+0x60>
		uint8_t target = servo/2+1;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3b01      	subs	r3, #1
 8002004:	2b03      	cmp	r3, #3
 8002006:	d81b      	bhi.n	8002040 <centre_0+0x60>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <centre_0+0x30>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	08002021 	.word	0x08002021
 8002014:	08002029 	.word	0x08002029
 8002018:	08002031 	.word	0x08002031
 800201c:	08002039 	.word	0x08002039
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <centre_0+0x6c>)
 8002022:	225f      	movs	r2, #95	; 0x5f
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002026:	e00b      	b.n	8002040 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <centre_0+0x6c>)
 800202a:	2258      	movs	r2, #88	; 0x58
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800202e:	e007      	b.n	8002040 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <centre_0+0x6c>)
 8002032:	225c      	movs	r2, #92	; 0x5c
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002036:	e003      	b.n	8002040 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <centre_0+0x6c>)
 800203a:	225e      	movs	r2, #94	; 0x5e
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800203e:	bf00      	nop
		}
	}
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40000400 	.word	0x40000400

08002050 <clockwise_90>:

void clockwise_90(servos servo) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	3b01      	subs	r3, #1
 8002074:	2b03      	cmp	r3, #3
 8002076:	d81b      	bhi.n	80020b0 <clockwise_90+0x60>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <clockwise_90+0x30>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	08002091 	.word	0x08002091
 8002084:	08002099 	.word	0x08002099
 8002088:	080020a1 	.word	0x080020a1
 800208c:	080020a9 	.word	0x080020a9
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <clockwise_90+0x6c>)
 8002092:	2299      	movs	r2, #153	; 0x99
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002096:	e00b      	b.n	80020b0 <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <clockwise_90+0x6c>)
 800209a:	2291      	movs	r2, #145	; 0x91
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800209e:	e007      	b.n	80020b0 <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <clockwise_90+0x6c>)
 80020a2:	2296      	movs	r2, #150	; 0x96
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80020a6:	e003      	b.n	80020b0 <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <clockwise_90+0x6c>)
 80020aa:	2299      	movs	r2, #153	; 0x99
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80020ae:	bf00      	nop
		}
	}
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40000400 	.word	0x40000400

080020c0 <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d81b      	bhi.n	8002120 <anticlockwise_90+0x60>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <anticlockwise_90+0x30>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002109 	.word	0x08002109
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002119 	.word	0x08002119
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <anticlockwise_90+0x6c>)
 8002102:	2225      	movs	r2, #37	; 0x25
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002106:	e00b      	b.n	8002120 <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <anticlockwise_90+0x6c>)
 800210a:	221d      	movs	r2, #29
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800210e:	e007      	b.n	8002120 <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <anticlockwise_90+0x6c>)
 8002112:	221f      	movs	r2, #31
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002116:	e003      	b.n	8002120 <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <anticlockwise_90+0x6c>)
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800211e:	bf00      	nop
		}
	}
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40000400 	.word	0x40000400

08002130 <servo_pull>:

void servo_pull(servos servo) {
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d123      	bne.n	800218e <servo_pull+0x5e>
		uint8_t target = servo/2;
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	3b01      	subs	r3, #1
 8002150:	2b03      	cmp	r3, #3
 8002152:	d81c      	bhi.n	800218e <servo_pull+0x5e>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <servo_pull+0x2c>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002175 	.word	0x08002175
 8002164:	0800217f 	.word	0x0800217f
 8002168:	08002187 	.word	0x08002187
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <servo_pull+0x68>)
 800216e:	221e      	movs	r2, #30
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002172:	e00c      	b.n	800218e <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 8002174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002178:	221e      	movs	r2, #30
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800217c:	e007      	b.n	800218e <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <servo_pull+0x68>)
 8002180:	221e      	movs	r2, #30
 8002182:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002184:	e003      	b.n	800218e <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <servo_pull+0x68>)
 8002188:	221e      	movs	r2, #30
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800218c:	bf00      	nop
		}
	}
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40000800 	.word	0x40000800

0800219c <servo_push>:

void servo_push(servos servo) {
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d123      	bne.n	80021fa <servo_push+0x5e>
		uint8_t target = servo/2;
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d81c      	bhi.n	80021fa <servo_push+0x5e>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <servo_push+0x2c>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e1 	.word	0x080021e1
 80021d0:	080021eb 	.word	0x080021eb
 80021d4:	080021f3 	.word	0x080021f3
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <servo_push+0x68>)
 80021da:	2264      	movs	r2, #100	; 0x64
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80021de:	e00c      	b.n	80021fa <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	2264      	movs	r2, #100	; 0x64
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80021e8:	e007      	b.n	80021fa <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <servo_push+0x68>)
 80021ec:	2264      	movs	r2, #100	; 0x64
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80021f0:	e003      	b.n	80021fa <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <servo_push+0x68>)
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80021f8:	bf00      	nop
		}
	}
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40000800 	.word	0x40000800

08002208 <HAL_MspInit>:
=======
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++) {
 8001e4e:	2301      	movs	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e010      	b.n	8001e76 <servo_init+0x2e>
		servo_pull(i*2);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f910 	bl	8002080 <servo_pull>
		centre_0(i*2-1);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f860 	bl	8001f30 <centre_0>
	for (uint8_t i = 1; i <= 4; i++) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	3301      	adds	r3, #1
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d9eb      	bls.n	8001e54 <servo_init+0xc>
	}
	HAL_Delay(DELAY_TIME_P);
 8001e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e80:	f000 fd60 	bl	8002944 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8001e84:	2301      	movs	r3, #1
 8001e86:	71bb      	strb	r3, [r7, #6]
 8001e88:	e008      	b.n	8001e9c <servo_init+0x54>
		servo_push(i*2);
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f92b 	bl	80020ec <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	71bb      	strb	r3, [r7, #6]
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d9f3      	bls.n	8001e8a <servo_init+0x42>
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <insert_cube>:

void insert_cube(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8001eb2:	2006      	movs	r0, #6
 8001eb4:	f000 f8e4 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001eb8:	20c8      	movs	r0, #200	; 0xc8
 8001eba:	f000 fd43 	bl	8002944 <HAL_Delay>
	servo_pull(east_back);
 8001ebe:	2004      	movs	r0, #4
 8001ec0:	f000 f8de 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec8:	f000 fd3c 	bl	8002944 <HAL_Delay>

	char stage;
	HAL_UART_Receive(&huart1, &stage, 1, 0xFFFF);
 8001ecc:	1db9      	adds	r1, r7, #6
 8001ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <insert_cube+0x5c>)
 8001ed6:	f002 fb92 	bl	80045fe <HAL_UART_Receive>
	for (uint8_t i = 1; i <= 4; i++)
 8001eda:	2301      	movs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	e008      	b.n	8001ef2 <insert_cube+0x46>
		servo_push(i*2);
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f900 	bl	80020ec <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	71fb      	strb	r3, [r7, #7]
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d9f3      	bls.n	8001ee0 <insert_cube+0x34>
	HAL_Delay(DELAY_TIME_P);
 8001ef8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001efc:	f000 fd22 	bl	8002944 <HAL_Delay>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000278 	.word	0x20000278

08001f0c <remove_cube>:

void remove_cube(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001f10:	2008      	movs	r0, #8
 8001f12:	f000 f8b5 	bl	8002080 <servo_pull>
	servo_pull(south_back);
 8001f16:	2006      	movs	r0, #6
 8001f18:	f000 f8b2 	bl	8002080 <servo_pull>
	servo_pull(east_back);
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f000 f8af 	bl	8002080 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001f22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f26:	f000 fd0d 	bl	8002944 <HAL_Delay>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <centre_0>:

void centre_0(servos servo) {
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <centre_0+0x60>
		uint8_t target = servo/2+1;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d81b      	bhi.n	8001f90 <centre_0+0x60>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <centre_0+0x30>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f89 	.word	0x08001f89
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <centre_0+0x6c>)
 8001f72:	225f      	movs	r2, #95	; 0x5f
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001f76:	e00b      	b.n	8001f90 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <centre_0+0x6c>)
 8001f7a:	2258      	movs	r2, #88	; 0x58
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001f7e:	e007      	b.n	8001f90 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <centre_0+0x6c>)
 8001f82:	225c      	movs	r2, #92	; 0x5c
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001f86:	e003      	b.n	8001f90 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <centre_0+0x6c>)
 8001f8a:	225e      	movs	r2, #94	; 0x5e
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001f8e:	bf00      	nop
		}
	}
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40000400 	.word	0x40000400

08001fa0 <clockwise_90>:

void clockwise_90(servos servo) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d81b      	bhi.n	8002000 <clockwise_90+0x60>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <clockwise_90+0x30>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001fe9 	.word	0x08001fe9
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08001ff9 	.word	0x08001ff9
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <clockwise_90+0x6c>)
 8001fe2:	2299      	movs	r2, #153	; 0x99
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001fe6:	e00b      	b.n	8002000 <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <clockwise_90+0x6c>)
 8001fea:	2291      	movs	r2, #145	; 0x91
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001fee:	e007      	b.n	8002000 <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <clockwise_90+0x6c>)
 8001ff2:	2296      	movs	r2, #150	; 0x96
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001ff6:	e003      	b.n	8002000 <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <clockwise_90+0x6c>)
 8001ffa:	2299      	movs	r2, #153	; 0x99
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001ffe:	bf00      	nop
		}
	}
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40000400 	.word	0x40000400

08002010 <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d024      	beq.n	8002070 <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	3b01      	subs	r3, #1
 8002034:	2b03      	cmp	r3, #3
 8002036:	d81b      	bhi.n	8002070 <anticlockwise_90+0x60>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <anticlockwise_90+0x30>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002051 	.word	0x08002051
 8002044:	08002059 	.word	0x08002059
 8002048:	08002061 	.word	0x08002061
 800204c:	08002069 	.word	0x08002069
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <anticlockwise_90+0x6c>)
 8002052:	2225      	movs	r2, #37	; 0x25
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002056:	e00b      	b.n	8002070 <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <anticlockwise_90+0x6c>)
 800205a:	221d      	movs	r2, #29
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800205e:	e007      	b.n	8002070 <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <anticlockwise_90+0x6c>)
 8002062:	221f      	movs	r2, #31
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002066:	e003      	b.n	8002070 <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <anticlockwise_90+0x6c>)
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 800206e:	bf00      	nop
		}
	}
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400

08002080 <servo_pull>:

void servo_pull(servos servo) {
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d123      	bne.n	80020de <servo_pull+0x5e>
		uint8_t target = servo/2;
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	3b01      	subs	r3, #1
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d81c      	bhi.n	80020de <servo_pull+0x5e>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <servo_pull+0x2c>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020c5 	.word	0x080020c5
 80020b4:	080020cf 	.word	0x080020cf
 80020b8:	080020d7 	.word	0x080020d7
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <servo_pull+0x68>)
 80020be:	221e      	movs	r2, #30
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80020c2:	e00c      	b.n	80020de <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 80020c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c8:	221e      	movs	r2, #30
 80020ca:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80020cc:	e007      	b.n	80020de <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <servo_pull+0x68>)
 80020d0:	221e      	movs	r2, #30
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80020d4:	e003      	b.n	80020de <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <servo_pull+0x68>)
 80020d8:	221e      	movs	r2, #30
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80020dc:	bf00      	nop
		}
	}
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40000800 	.word	0x40000800

080020ec <servo_push>:

void servo_push(servos servo) {
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d123      	bne.n	800214a <servo_push+0x5e>
		uint8_t target = servo/2;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	3b01      	subs	r3, #1
 800210c:	2b03      	cmp	r3, #3
 800210e:	d81c      	bhi.n	800214a <servo_push+0x5e>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <servo_push+0x2c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	08002131 	.word	0x08002131
 8002120:	0800213b 	.word	0x0800213b
 8002124:	08002143 	.word	0x08002143
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <servo_push+0x68>)
 800212a:	2264      	movs	r2, #100	; 0x64
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800212e:	e00c      	b.n	800214a <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 8002130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002134:	2264      	movs	r2, #100	; 0x64
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002138:	e007      	b.n	800214a <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <servo_push+0x68>)
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002140:	e003      	b.n	800214a <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <servo_push+0x68>)
 8002144:	2264      	movs	r2, #100	; 0x64
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002148:	bf00      	nop
		}
	}
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40000800 	.word	0x40000800

08002158 <HAL_MspInit>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
=======
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_MspInit+0x5c>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_MspInit+0x5c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6193      	str	r3, [r2, #24]
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_MspInit+0x5c>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x5c>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x5c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x5c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
=======
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_MspInit+0x5c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_MspInit+0x5c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6193      	str	r3, [r2, #24]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_MspInit+0x5c>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_MspInit+0x5c>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_MspInit+0x5c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_MspInit+0x5c>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_MspInit+0x60>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_MspInit+0x60>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6053      	str	r3, [r2, #4]
=======
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_MspInit+0x60>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_MspInit+0x60>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6053      	str	r3, [r2, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000

0800226c <NMI_Handler>:
=======
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000

080021bc <NMI_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
=======
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:
=======
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
=======
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:
=======
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
=======
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:
=======
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
=======
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:
=======
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
=======
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <SVC_Handler>:
=======
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <SVC_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
=======
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <DebugMon_Handler>:
=======
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <DebugMon_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
=======
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:
=======
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
=======
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <SysTick_Handler>:
=======
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
=======
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80022b2:	f000 fb83 	bl	80029bc <HAL_IncTick>
=======
 8002202:	f000 fb83 	bl	800290c <HAL_IncTick>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <EXTI0_IRQHandler>:
=======
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <EXTI0_IRQHandler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
<<<<<<< HEAD
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) {
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <EXTI0_IRQHandler+0x58>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d021      	beq.n	8002310 <EXTI0_IRQHandler+0x54>
		centre_0(south_front);
 80022cc:	2005      	movs	r0, #5
 80022ce:	f7ff fe87 	bl	8001fe0 <centre_0>
		centre_0(north_front);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7ff fe84 	bl	8001fe0 <centre_0>
		centre_0(east_front);
 80022d8:	2003      	movs	r0, #3
 80022da:	f7ff fe81 	bl	8001fe0 <centre_0>
		centre_0(west_front);
 80022de:	2007      	movs	r0, #7
 80022e0:	f7ff fe7e 	bl	8001fe0 <centre_0>
		servo_pull(south_back);
 80022e4:	2006      	movs	r0, #6
 80022e6:	f7ff ff23 	bl	8002130 <servo_pull>
		servo_pull(east_back);
 80022ea:	2004      	movs	r0, #4
 80022ec:	f7ff ff20 	bl	8002130 <servo_pull>
		servo_pull(north_back);
 80022f0:	2002      	movs	r0, #2
 80022f2:	f7ff ff1d 	bl	8002130 <servo_pull>
		servo_pull(west_back);
 80022f6:	2008      	movs	r0, #8
 80022f8:	f7ff ff1a 	bl	8002130 <servo_pull>
		HAL_Delay(0xFFFF);
 80022fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002300:	f000 fb78 	bl	80029f4 <HAL_Delay>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <EXTI0_IRQHandler+0x58>)
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 800230a:	2001      	movs	r0, #1
 800230c:	f000 fe50 	bl	8002fb0 <HAL_GPIO_EXTI_Callback>
=======
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) {
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <EXTI0_IRQHandler+0x58>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d021      	beq.n	8002260 <EXTI0_IRQHandler+0x54>
		centre_0(south_front);
 800221c:	2005      	movs	r0, #5
 800221e:	f7ff fe87 	bl	8001f30 <centre_0>
		centre_0(north_front);
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff fe84 	bl	8001f30 <centre_0>
		centre_0(east_front);
 8002228:	2003      	movs	r0, #3
 800222a:	f7ff fe81 	bl	8001f30 <centre_0>
		centre_0(west_front);
 800222e:	2007      	movs	r0, #7
 8002230:	f7ff fe7e 	bl	8001f30 <centre_0>
		servo_pull(south_back);
 8002234:	2006      	movs	r0, #6
 8002236:	f7ff ff23 	bl	8002080 <servo_pull>
		servo_pull(east_back);
 800223a:	2004      	movs	r0, #4
 800223c:	f7ff ff20 	bl	8002080 <servo_pull>
		servo_pull(north_back);
 8002240:	2002      	movs	r0, #2
 8002242:	f7ff ff1d 	bl	8002080 <servo_pull>
		servo_pull(west_back);
 8002246:	2008      	movs	r0, #8
 8002248:	f7ff ff1a 	bl	8002080 <servo_pull>
		HAL_Delay(0xFFFF);
 800224c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002250:	f000 fb78 	bl	8002944 <HAL_Delay>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <EXTI0_IRQHandler+0x58>)
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fe50 	bl	8002f00 <HAL_GPIO_EXTI_Callback>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE END EXTI0_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
<<<<<<< HEAD
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010400 	.word	0x40010400

08002318 <SystemInit>:
=======
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40010400 	.word	0x40010400

08002268 <SystemInit>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
=======
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <MX_TIM2_Init>:
=======
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <MX_TIM2_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0
=======
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	619a      	str	r2, [r3, #24]
=======
 800227a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	f107 0320 	add.w	r3, r7, #32
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	619a      	str	r2, [r3, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <MX_TIM2_Init+0xe8>)
 8002356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800235a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <MX_TIM2_Init+0xe8>)
 800235e:	f240 42af 	movw	r2, #1199	; 0x4af
 8002362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <MX_TIM2_Init+0xe8>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <MX_TIM2_Init+0xe8>)
 800236c:	f240 42af 	movw	r2, #1199	; 0x4af
 8002370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <MX_TIM2_Init+0xe8>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <MX_TIM2_Init+0xe8>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800237e:	4823      	ldr	r0, [pc, #140]	; (800240c <MX_TIM2_Init+0xe8>)
 8002380:	f001 fa87 	bl	8003892 <HAL_TIM_Base_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800238a:	f7fe fbd6 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002398:	4619      	mov	r1, r3
 800239a:	481c      	ldr	r0, [pc, #112]	; (800240c <MX_TIM2_Init+0xe8>)
 800239c:	f001 fc98 	bl	8003cd0 <HAL_TIM_ConfigClockSource>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80023a6:	f7fe fbc8 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023aa:	4818      	ldr	r0, [pc, #96]	; (800240c <MX_TIM2_Init+0xe8>)
 80023ac:	f001 fac0 	bl	8003930 <HAL_TIM_PWM_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023b6:	f7fe fbc0 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	4619      	mov	r1, r3
 80023c8:	4810      	ldr	r0, [pc, #64]	; (800240c <MX_TIM2_Init+0xe8>)
 80023ca:	f002 f825 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80023d4:	f7fe fbb1 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d8:	2360      	movs	r3, #96	; 0x60
 80023da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 80023dc:	231e      	movs	r3, #30
 80023de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2208      	movs	r2, #8
 80023ec:	4619      	mov	r1, r3
 80023ee:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM2_Init+0xe8>)
 80023f0:	f001 fbb0 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80023fa:	f7fe fb9e 	bl	8000b3a <Error_Handler>
=======
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <MX_TIM2_Init+0xe8>)
 80022a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <MX_TIM2_Init+0xe8>)
 80022ae:	f240 42af 	movw	r2, #1199	; 0x4af
 80022b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <MX_TIM2_Init+0xe8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <MX_TIM2_Init+0xe8>)
 80022bc:	f240 42af 	movw	r2, #1199	; 0x4af
 80022c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <MX_TIM2_Init+0xe8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <MX_TIM2_Init+0xe8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ce:	4823      	ldr	r0, [pc, #140]	; (800235c <MX_TIM2_Init+0xe8>)
 80022d0:	f001 fa87 	bl	80037e2 <HAL_TIM_Base_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022da:	f7fe fc2e 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e8:	4619      	mov	r1, r3
 80022ea:	481c      	ldr	r0, [pc, #112]	; (800235c <MX_TIM2_Init+0xe8>)
 80022ec:	f001 fc98 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80022f6:	f7fe fc20 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022fa:	4818      	ldr	r0, [pc, #96]	; (800235c <MX_TIM2_Init+0xe8>)
 80022fc:	f001 fac0 	bl	8003880 <HAL_TIM_PWM_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002306:	f7fe fc18 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	4619      	mov	r1, r3
 8002318:	4810      	ldr	r0, [pc, #64]	; (800235c <MX_TIM2_Init+0xe8>)
 800231a:	f002 f825 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002324:	f7fe fc09 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002328:	2360      	movs	r3, #96	; 0x60
 800232a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 800232c:	231e      	movs	r3, #30
 800232e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <MX_TIM2_Init+0xe8>)
 8002340:	f001 fbb0 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800234a:	f7fe fbf6 	bl	8000b3a <Error_Handler>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 80023fe:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM2_Init+0xe8>)
 8002400:	f000 f970 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 8002404:	bf00      	nop
 8002406:	3738      	adds	r7, #56	; 0x38
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200001a0 	.word	0x200001a0

08002410 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08e      	sub	sp, #56	; 0x38
 8002414:	af00      	add	r7, sp, #0
=======
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_TIM2_Init+0xe8>)
 8002350:	f000 f970 	bl	8002634 <HAL_TIM_MspPostInit>

}
 8002354:	bf00      	nop
 8002356:	3738      	adds	r7, #56	; 0x38
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200001a0 	.word	0x200001a0

08002360 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8002416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	619a      	str	r2, [r3, #24]
=======
 8002366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	619a      	str	r2, [r3, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <MX_TIM3_Init+0x128>)
 8002442:	4a3e      	ldr	r2, [pc, #248]	; (800253c <MX_TIM3_Init+0x12c>)
 8002444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <MX_TIM3_Init+0x128>)
 8002448:	f240 42af 	movw	r2, #1199	; 0x4af
 800244c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <MX_TIM3_Init+0x128>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <MX_TIM3_Init+0x128>)
 8002456:	f240 42af 	movw	r2, #1199	; 0x4af
 800245a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <MX_TIM3_Init+0x128>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b35      	ldr	r3, [pc, #212]	; (8002538 <MX_TIM3_Init+0x128>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002468:	4833      	ldr	r0, [pc, #204]	; (8002538 <MX_TIM3_Init+0x128>)
 800246a:	f001 fa12 	bl	8003892 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002474:	f7fe fb61 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800247e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002482:	4619      	mov	r1, r3
 8002484:	482c      	ldr	r0, [pc, #176]	; (8002538 <MX_TIM3_Init+0x128>)
 8002486:	f001 fc23 	bl	8003cd0 <HAL_TIM_ConfigClockSource>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002490:	f7fe fb53 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002494:	4828      	ldr	r0, [pc, #160]	; (8002538 <MX_TIM3_Init+0x128>)
 8002496:	f001 fa4b 	bl	8003930 <HAL_TIM_PWM_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80024a0:	f7fe fb4b 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ac:	f107 0320 	add.w	r3, r7, #32
 80024b0:	4619      	mov	r1, r3
 80024b2:	4821      	ldr	r0, [pc, #132]	; (8002538 <MX_TIM3_Init+0x128>)
 80024b4:	f001 ffb0 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024be:	f7fe fb3c 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c2:	2360      	movs	r3, #96	; 0x60
 80024c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 80024c6:	231c      	movs	r3, #28
 80024c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	4817      	ldr	r0, [pc, #92]	; (8002538 <MX_TIM3_Init+0x128>)
 80024da:	f001 fb3b 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80024e4:	f7fe fb29 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2204      	movs	r2, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4812      	ldr	r0, [pc, #72]	; (8002538 <MX_TIM3_Init+0x128>)
 80024f0:	f001 fb30 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80024fa:	f7fe fb1e 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2208      	movs	r2, #8
 8002502:	4619      	mov	r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	; (8002538 <MX_TIM3_Init+0x128>)
 8002506:	f001 fb25 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002510:	f7fe fb13 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	220c      	movs	r2, #12
 8002518:	4619      	mov	r1, r3
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <MX_TIM3_Init+0x128>)
 800251c:	f001 fb1a 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002526:	f7fe fb08 	bl	8000b3a <Error_Handler>
=======
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <MX_TIM3_Init+0x128>)
 8002392:	4a3e      	ldr	r2, [pc, #248]	; (800248c <MX_TIM3_Init+0x12c>)
 8002394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8002396:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <MX_TIM3_Init+0x128>)
 8002398:	f240 42af 	movw	r2, #1199	; 0x4af
 800239c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <MX_TIM3_Init+0x128>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <MX_TIM3_Init+0x128>)
 80023a6:	f240 42af 	movw	r2, #1199	; 0x4af
 80023aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <MX_TIM3_Init+0x128>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <MX_TIM3_Init+0x128>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023b8:	4833      	ldr	r0, [pc, #204]	; (8002488 <MX_TIM3_Init+0x128>)
 80023ba:	f001 fa12 	bl	80037e2 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023c4:	f7fe fbb9 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d2:	4619      	mov	r1, r3
 80023d4:	482c      	ldr	r0, [pc, #176]	; (8002488 <MX_TIM3_Init+0x128>)
 80023d6:	f001 fc23 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023e0:	f7fe fbab 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023e4:	4828      	ldr	r0, [pc, #160]	; (8002488 <MX_TIM3_Init+0x128>)
 80023e6:	f001 fa4b 	bl	8003880 <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023f0:	f7fe fba3 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	4619      	mov	r1, r3
 8002402:	4821      	ldr	r0, [pc, #132]	; (8002488 <MX_TIM3_Init+0x128>)
 8002404:	f001 ffb0 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800240e:	f7fe fb94 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	; 0x60
 8002414:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002416:	231c      	movs	r3, #28
 8002418:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	4619      	mov	r1, r3
 8002428:	4817      	ldr	r0, [pc, #92]	; (8002488 <MX_TIM3_Init+0x128>)
 800242a:	f001 fb3b 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002434:	f7fe fb81 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2204      	movs	r2, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <MX_TIM3_Init+0x128>)
 8002440:	f001 fb30 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800244a:	f7fe fb76 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2208      	movs	r2, #8
 8002452:	4619      	mov	r1, r3
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <MX_TIM3_Init+0x128>)
 8002456:	f001 fb25 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002460:	f7fe fb6b 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	220c      	movs	r2, #12
 8002468:	4619      	mov	r1, r3
 800246a:	4807      	ldr	r0, [pc, #28]	; (8002488 <MX_TIM3_Init+0x128>)
 800246c:	f001 fb1a 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002476:	f7fe fb60 	bl	8000b3a <Error_Handler>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <MX_TIM3_Init+0x128>)
 800252c:	f000 f8da 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 8002530:	bf00      	nop
 8002532:	3738      	adds	r7, #56	; 0x38
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200001e8 	.word	0x200001e8
 800253c:	40000400 	.word	0x40000400

08002540 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
=======
 800247a:	4803      	ldr	r0, [pc, #12]	; (8002488 <MX_TIM3_Init+0x128>)
 800247c:	f000 f8da 	bl	8002634 <HAL_TIM_MspPostInit>

}
 8002480:	bf00      	nop
 8002482:	3738      	adds	r7, #56	; 0x38
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200001e8 	.word	0x200001e8
 800248c:	40000400 	.word	0x40000400

08002490 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8002546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	f107 0320 	add.w	r3, r7, #32
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]
 800256e:	619a      	str	r2, [r3, #24]
=======
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <MX_TIM4_Init+0x114>)
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <MX_TIM4_Init+0x118>)
 8002574:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <MX_TIM4_Init+0x114>)
 8002578:	f240 42af 	movw	r2, #1199	; 0x4af
 800257c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <MX_TIM4_Init+0x114>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <MX_TIM4_Init+0x114>)
 8002586:	f240 42af 	movw	r2, #1199	; 0x4af
 800258a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <MX_TIM4_Init+0x114>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <MX_TIM4_Init+0x114>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002598:	482e      	ldr	r0, [pc, #184]	; (8002654 <MX_TIM4_Init+0x114>)
 800259a:	f001 f97a 	bl	8003892 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80025a4:	f7fe fac9 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	4619      	mov	r1, r3
 80025b4:	4827      	ldr	r0, [pc, #156]	; (8002654 <MX_TIM4_Init+0x114>)
 80025b6:	f001 fb8b 	bl	8003cd0 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80025c0:	f7fe fabb 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025c4:	4823      	ldr	r0, [pc, #140]	; (8002654 <MX_TIM4_Init+0x114>)
 80025c6:	f001 f9b3 	bl	8003930 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80025d0:	f7fe fab3 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	4619      	mov	r1, r3
 80025e2:	481c      	ldr	r0, [pc, #112]	; (8002654 <MX_TIM4_Init+0x114>)
 80025e4:	f001 ff18 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80025ee:	f7fe faa4 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	; 0x60
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 80025f6:	231c      	movs	r3, #28
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	4619      	mov	r1, r3
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <MX_TIM4_Init+0x114>)
 800260a:	f001 faa3 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002614:	f7fe fa91 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2208      	movs	r2, #8
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_TIM4_Init+0x114>)
 8002620:	f001 fa98 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800262a:	f7fe fa86 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	220c      	movs	r2, #12
 8002632:	4619      	mov	r1, r3
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <MX_TIM4_Init+0x114>)
 8002636:	f001 fa8d 	bl	8003b54 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002640:	f7fe fa7b 	bl	8000b3a <Error_Handler>
=======
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024c2:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <MX_TIM4_Init+0x118>)
 80024c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024c8:	f240 42af 	movw	r2, #1199	; 0x4af
 80024cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024d6:	f240 42af 	movw	r2, #1199	; 0x4af
 80024da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024e8:	482e      	ldr	r0, [pc, #184]	; (80025a4 <MX_TIM4_Init+0x114>)
 80024ea:	f001 f97a 	bl	80037e2 <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80024f4:	f7fe fb21 	bl	8000b3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	4619      	mov	r1, r3
 8002504:	4827      	ldr	r0, [pc, #156]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002506:	f001 fb8b 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002510:	f7fe fb13 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002516:	f001 f9b3 	bl	8003880 <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002520:	f7fe fb0b 	bl	8000b3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4619      	mov	r1, r3
 8002532:	481c      	ldr	r0, [pc, #112]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002534:	f001 ff18 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800253e:	f7fe fafc 	bl	8000b3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002542:	2360      	movs	r3, #96	; 0x60
 8002544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002546:	231c      	movs	r3, #28
 8002548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	4812      	ldr	r0, [pc, #72]	; (80025a4 <MX_TIM4_Init+0x114>)
 800255a:	f001 faa3 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002564:	f7fe fae9 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2208      	movs	r2, #8
 800256c:	4619      	mov	r1, r3
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002570:	f001 fa98 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800257a:	f7fe fade 	bl	8000b3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	220c      	movs	r2, #12
 8002582:	4619      	mov	r1, r3
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002586:	f001 fa8d 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002590:	f7fe fad3 	bl	8000b3a <Error_Handler>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <MX_TIM4_Init+0x114>)
 8002646:	f000 f84d 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 800264a:	bf00      	nop
 800264c:	3738      	adds	r7, #56	; 0x38
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000230 	.word	0x20000230
 8002658:	40000800 	.word	0x40000800

0800265c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d10c      	bne.n	8002688 <HAL_TIM_Base_MspInit+0x2c>
=======
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM4_Init+0x114>)
 8002596:	f000 f84d 	bl	8002634 <HAL_TIM_MspPostInit>

}
 800259a:	bf00      	nop
 800259c:	3738      	adds	r7, #56	; 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000230 	.word	0x20000230
 80025a8:	40000800 	.word	0x40000800

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d10c      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x2c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
=======
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002686:	e022      	b.n	80026ce <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_TIM_Base_MspInit+0x80>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10c      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
}
 80026aa:	e010      	b.n	80026ce <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_TIM_Base_MspInit+0x84>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10b      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_TIM_Base_MspInit+0x7c>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800

080026e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d118      	bne.n	8002736 <HAL_TIM_MspPostInit+0x52>
=======
 80025d6:	e022      	b.n	800261e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <HAL_TIM_Base_MspInit+0x80>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10c      	bne.n	80025fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
}
 80025fa:	e010      	b.n	800261e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <HAL_TIM_Base_MspInit+0x84>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10b      	bne.n	800261e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_TIM_Base_MspInit+0x7c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800

08002634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d118      	bne.n	8002686 <HAL_TIM_MspPostInit+0x52>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]
=======
 8002654:	4b35      	ldr	r3, [pc, #212]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a34      	ldr	r2, [pc, #208]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
<<<<<<< HEAD
 800271c:	2304      	movs	r3, #4
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	482c      	ldr	r0, [pc, #176]	; (80027e0 <HAL_TIM_MspPostInit+0xfc>)
 8002730:	f000 fa92 	bl	8002c58 <HAL_GPIO_Init>
=======
 800266c:	2304      	movs	r3, #4
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	482c      	ldr	r0, [pc, #176]	; (8002730 <HAL_TIM_MspPostInit+0xfc>)
 8002680:	f000 fa92 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8002734:	e04e      	b.n	80027d4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <HAL_TIM_MspPostInit+0x100>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d12b      	bne.n	8002798 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <HAL_TIM_MspPostInit+0x104>)
 800276e:	f000 fa73 	bl	8002c58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_TIM_MspPostInit+0x108>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_TIM_MspPostInit+0x108>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	6053      	str	r3, [r2, #4]
}
 8002796:	e01d      	b.n	80027d4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_TIM_MspPostInit+0x10c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d118      	bne.n	80027d4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6193      	str	r3, [r2, #24]
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_TIM_MspPostInit+0xf8>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80027ba:	f44f 7350 	mov.w	r3, #832	; 0x340
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <HAL_TIM_MspPostInit+0x110>)
 80027d0:	f000 fa42 	bl	8002c58 <HAL_GPIO_Init>
}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40010c00 	.word	0x40010c00

080027f8 <MX_USART1_UART_Init>:
=======
 8002684:	e04e      	b.n	8002724 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <HAL_TIM_MspPostInit+0x100>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d12b      	bne.n	80026e8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	481e      	ldr	r0, [pc, #120]	; (8002738 <HAL_TIM_MspPostInit+0x104>)
 80026be:	f000 fa73 	bl	8002ba8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_TIM_MspPostInit+0x108>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_TIM_MspPostInit+0x108>)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	6053      	str	r3, [r2, #4]
}
 80026e6:	e01d      	b.n	8002724 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_TIM_MspPostInit+0x10c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d118      	bne.n	8002724 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_TIM_MspPostInit+0xf8>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800270a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2302      	movs	r3, #2
 8002716:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_TIM_MspPostInit+0x110>)
 8002720:	f000 fa42 	bl	8002ba8 <HAL_GPIO_Init>
}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40010800 	.word	0x40010800
 8002734:	40000400 	.word	0x40000400
 8002738:	40011000 	.word	0x40011000
 800273c:	40010000 	.word	0x40010000
 8002740:	40000800 	.word	0x40000800
 8002744:	40010c00 	.word	0x40010c00

08002748 <MX_USART1_UART_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
=======
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_USART1_UART_Init+0x50>)
 8002800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 8002804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_USART1_UART_Init+0x4c>)
 8002830:	f001 fe5e 	bl	80044f0 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800283a:	f7fe f97e 	bl	8000b3a <Error_Handler>
=======
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_USART1_UART_Init+0x50>)
 8002750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002780:	f001 fe5e 	bl	8004440 <HAL_UART_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800278a:	f7fe f9d6 	bl	8000b3a <Error_Handler>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000278 	.word	0x20000278
 8002848:	40013800 	.word	0x40013800

0800284c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_UART_MspInit+0x8c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d131      	bne.n	80028d0 <HAL_UART_MspInit+0x84>
=======
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000278 	.word	0x20000278
 8002798:	40013800 	.word	0x40013800

0800279c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <HAL_UART_MspInit+0x8c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d131      	bne.n	8002820 <HAL_UART_MspInit+0x84>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_UART_MspInit+0x90>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_UART_MspInit+0x90>)
 8002872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_UART_MspInit+0x90>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_UART_MspInit+0x90>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_UART_MspInit+0x90>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_UART_MspInit+0x90>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
=======
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_UART_MspInit+0x90>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_UART_MspInit+0x90>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_MspInit+0x90>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0x90>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_UART_MspInit+0x90>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_UART_MspInit+0x90>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 800289c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <HAL_UART_MspInit+0x94>)
 80028b2:	f000 f9d1 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_UART_MspInit+0x94>)
 80028cc:	f000 f9c4 	bl	8002c58 <HAL_GPIO_Init>
=======
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4619      	mov	r1, r3
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <HAL_UART_MspInit+0x94>)
 8002802:	f000 f9d1 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0x94>)
 800281c:	f000 f9c4 	bl	8002ba8 <HAL_GPIO_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010800 	.word	0x40010800

080028e4 <Reset_Handler>:
=======
 8002820:	bf00      	nop
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40013800 	.word	0x40013800
 800282c:	40021000 	.word	0x40021000
 8002830:	40010800 	.word	0x40010800

08002834 <Reset_Handler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800290a:	f7ff fd05 	bl	8002318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290e:	f002 f927 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002912:	f7fe f87d 	bl	8000a10 <main>
  bx lr
 8002916:	4770      	bx	lr
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002920:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8002924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002928:	200002c0 	.word	0x200002c0

0800292c <ADC1_2_IRQHandler>:
=======
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002836:	490d      	ldr	r1, [pc, #52]	; (800286c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800283c:	e002      	b.n	8002844 <LoopCopyDataInit>

0800283e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002842:	3304      	adds	r3, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002848:	d3f9      	bcc.n	800283e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800284c:	4c0a      	ldr	r4, [pc, #40]	; (8002878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002850:	e001      	b.n	8002856 <LoopFillZerobss>

08002852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002854:	3204      	adds	r2, #4

08002856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002858:	d3fb      	bcc.n	8002852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800285a:	f7ff fd05 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285e:	f002 f927 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002862:	f7fe f8d5 	bl	8000a10 <main>
  bx lr
 8002866:	4770      	bx	lr
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002870:	08005138 	.word	0x08005138
  ldr r2, =_sbss
 8002874:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002878:	200002c0 	.word	0x200002c0

0800287c <ADC1_2_IRQHandler>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 800292c:	e7fe      	b.n	800292c <ADC1_2_IRQHandler>
	...

08002930 <HAL_Init>:
=======
 800287c:	e7fe      	b.n	800287c <ADC1_2_IRQHandler>
	...

08002880 <HAL_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
=======
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_Init+0x28>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_Init+0x28>)
 800293a:	f043 0310 	orr.w	r3, r3, #16
 800293e:	6013      	str	r3, [r2, #0]
=======
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_Init+0x28>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_Init+0x28>)
 800288a:	f043 0310 	orr.w	r3, r3, #16
 800288e:	6013      	str	r3, [r2, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f947 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	200f      	movs	r0, #15
 8002948:	f000 f808 	bl	800295c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7ff fc5c 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_InitTick>:
=======
 8002890:	2003      	movs	r0, #3
 8002892:	f000 f947 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f808 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f7ff fc5c 	bl	8002158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40022000 	.word	0x40022000

080028ac <HAL_InitTick>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x54>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_InitTick+0x58>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f95f 	bl	8002c3e <HAL_SYSTICK_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00e      	b.n	80029a8 <HAL_InitTick+0x4c>
=======
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f95f 	bl	8002b8e <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d80a      	bhi.n	80029a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002990:	2200      	movs	r2, #0
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002998:	f000 f927 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <HAL_InitTick+0x5c>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
=======
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e8:	f000 f927 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000008 	.word	0x20000008
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_IncTick>:
=======
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000000 	.word	0x20000000
 8002904:	20000008 	.word	0x20000008
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_IncTick>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x1c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x20>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	4a03      	ldr	r2, [pc, #12]	; (80029dc <HAL_IncTick+0x20>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000008 	.word	0x20000008
 80029dc:	200002bc 	.word	0x200002bc

080029e0 <HAL_GetTick>:
=======
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_IncTick+0x1c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_IncTick+0x20>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_IncTick+0x20>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000008 	.word	0x20000008
 800292c:	200002bc 	.word	0x200002bc

08002930 <HAL_GetTick>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <HAL_GetTick+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	200002bc 	.word	0x200002bc

080029f4 <HAL_Delay>:
=======
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_GetTick+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	200002bc 	.word	0x200002bc

08002944 <HAL_Delay>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_Delay+0x44>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1a:	bf00      	nop
 8002a1c:	f7ff ffe0 	bl	80029e0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000008 	.word	0x20000008

08002a3c <__NVIC_SetPriorityGrouping>:
=======
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff fff0 	bl	8002930 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffe0 	bl	8002930 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008

0800298c <__NVIC_SetPriorityGrouping>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
=======
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
=======
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <__NVIC_EnableIRQ+0x34>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
=======
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4906      	ldr	r1, [pc, #24]	; (8002a24 <__NVIC_EnableIRQ+0x34>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
=======
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
=======
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Config>:
=======
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <SysTick_Config>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb4:	f7ff ff90 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b04:	f7ff ff90 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
=======
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff2d 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
=======
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff2d 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
=======
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002bfc:	f7ff ff42 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff90 	bl	8002b2c <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5f 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
=======
 8002b4c:	f7ff ff42 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff90 	bl	8002a7c <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5f 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
=======
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff35 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
=======
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff35 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
=======
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_GPIO_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002ba8:	b480      	push	{r7}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
=======
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8002c6a:	e179      	b.n	8002f60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8168 	bne.w	8002f5a <HAL_GPIO_Init+0x302>
=======
 8002bba:	e179      	b.n	8002eb0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8168 	bne.w	8002eaa <HAL_GPIO_Init+0x302>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a96      	ldr	r2, [pc, #600]	; (8002ee8 <HAL_GPIO_Init+0x290>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_GPIO_Init+0x290>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a94      	ldr	r2, [pc, #592]	; (8002eec <HAL_GPIO_Init+0x294>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_GPIO_Init+0x294>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a92      	ldr	r2, [pc, #584]	; (8002ef0 <HAL_GPIO_Init+0x298>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <HAL_GPIO_Init+0x298>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a90      	ldr	r2, [pc, #576]	; (8002ef4 <HAL_GPIO_Init+0x29c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a8e      	ldr	r2, [pc, #568]	; (8002ef4 <HAL_GPIO_Init+0x29c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a8e      	ldr	r2, [pc, #568]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a8c      	ldr	r2, [pc, #560]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
=======
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a96      	ldr	r2, [pc, #600]	; (8002e38 <HAL_GPIO_Init+0x290>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d05e      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002be4:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_GPIO_Init+0x290>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d875      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002bea:	4a94      	ldr	r2, [pc, #592]	; (8002e3c <HAL_GPIO_Init+0x294>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d058      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002bf0:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_GPIO_Init+0x294>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d86f      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002bf6:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_GPIO_Init+0x298>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d052      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002bfc:	4a90      	ldr	r2, [pc, #576]	; (8002e40 <HAL_GPIO_Init+0x298>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d869      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_GPIO_Init+0x29c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04c      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002c08:	4a8e      	ldr	r2, [pc, #568]	; (8002e44 <HAL_GPIO_Init+0x29c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d863      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c0e:	4a8e      	ldr	r2, [pc, #568]	; (8002e48 <HAL_GPIO_Init+0x2a0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d046      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
 8002c14:	4a8c      	ldr	r2, [pc, #560]	; (8002e48 <HAL_GPIO_Init+0x2a0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d85d      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d82a      	bhi.n	8002c74 <HAL_GPIO_Init+0xcc>
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d859      	bhi.n	8002cd6 <HAL_GPIO_Init+0x12e>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_GPIO_Init+0x80>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002ca3 	.word	0x08002ca3
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c8f 	.word	0x08002c8f
 8002c34:	08002cd1 	.word	0x08002cd1
 8002c38:	08002cd7 	.word	0x08002cd7
 8002c3c:	08002cd7 	.word	0x08002cd7
 8002c40:	08002cd7 	.word	0x08002cd7
 8002c44:	08002cd7 	.word	0x08002cd7
 8002c48:	08002cd7 	.word	0x08002cd7
 8002c4c:	08002cd7 	.word	0x08002cd7
 8002c50:	08002cd7 	.word	0x08002cd7
 8002c54:	08002cd7 	.word	0x08002cd7
 8002c58:	08002cd7 	.word	0x08002cd7
 8002c5c:	08002cd7 	.word	0x08002cd7
 8002c60:	08002cd7 	.word	0x08002cd7
 8002c64:	08002cd7 	.word	0x08002cd7
 8002c68:	08002cd7 	.word	0x08002cd7
 8002c6c:	08002c85 	.word	0x08002c85
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	4a75      	ldr	r2, [pc, #468]	; (8002e4c <HAL_GPIO_Init+0x2a4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0xfa>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
=======
 8002c7a:	e02c      	b.n	8002cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e029      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e024      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	3308      	adds	r3, #8
 8002c94:	623b      	str	r3, [r7, #32]
          break;
 8002c96:	e01f      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	623b      	str	r3, [r7, #32]
          break;
 8002ca0:	e01a      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002caa:	2304      	movs	r3, #4
 8002cac:	623b      	str	r3, [r7, #32]
          break;
 8002cae:	e013      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	611a      	str	r2, [r3, #16]
          break;
 8002cc2:	e009      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	615a      	str	r2, [r3, #20]
          break;
 8002cce:	e003      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
          break;
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x130>
          break;
 8002cd6:	bf00      	nop
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
=======
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d801      	bhi.n	8002ce2 <HAL_GPIO_Init+0x13a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	e001      	b.n	8002ce6 <HAL_GPIO_Init+0x13e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	d802      	bhi.n	8002cf4 <HAL_GPIO_Init+0x14c>
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	e002      	b.n	8002cfa <HAL_GPIO_Init+0x152>
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	210f      	movs	r1, #15
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80c1 	beq.w	8002f5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a48      	ldr	r2, [pc, #288]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a44      	ldr	r2, [pc, #272]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01f      	beq.n	8002e5c <HAL_GPIO_Init+0x204>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d019      	beq.n	8002e58 <HAL_GPIO_Init+0x200>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1fc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1f8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1f4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a37      	ldr	r2, [pc, #220]	; (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1f0>
 8002e44:	2305      	movs	r3, #5
 8002e46:	e00a      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e48:	2306      	movs	r3, #6
 8002e4a:	e008      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	e006      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e50:	2303      	movs	r3, #3
 8002e52:	e004      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e002      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	f002 0203 	and.w	r2, r2, #3
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	4093      	lsls	r3, r2
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80c1 	beq.w	8002eaa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_GPIO_Init+0x2a8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_GPIO_Init+0x2a8>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_GPIO_Init+0x2a8>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d40:	4a44      	ldr	r2, [pc, #272]	; (8002e54 <HAL_GPIO_Init+0x2ac>)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <HAL_GPIO_Init+0x2b0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01f      	beq.n	8002dac <HAL_GPIO_Init+0x204>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <HAL_GPIO_Init+0x2b4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d019      	beq.n	8002da8 <HAL_GPIO_Init+0x200>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <HAL_GPIO_Init+0x2b8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_GPIO_Init+0x1fc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00d      	beq.n	8002da0 <HAL_GPIO_Init+0x1f8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <HAL_GPIO_Init+0x2c0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x1f4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <HAL_GPIO_Init+0x2c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_GPIO_Init+0x1f0>
 8002d94:	2305      	movs	r3, #5
 8002d96:	e00a      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002d98:	2306      	movs	r3, #6
 8002d9a:	e008      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_Init+0x206>
 8002dac:	2300      	movs	r3, #0
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_GPIO_Init+0x2ac>)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4924      	ldr	r1, [pc, #144]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x24c>
=======
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4924      	ldr	r1, [pc, #144]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x24c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4920      	ldr	r1, [pc, #128]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
=======
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4920      	ldr	r1, [pc, #128]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	491a      	ldr	r1, [pc, #104]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x274>
=======
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	491a      	ldr	r1, [pc, #104]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x274>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
=======
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	4916      	ldr	r1, [pc, #88]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d025      	beq.n	8002f24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4910      	ldr	r1, [pc, #64]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
 8002ee4:	e025      	b.n	8002f32 <HAL_GPIO_Init+0x2da>
 8002ee6:	bf00      	nop
 8002ee8:	10320000 	.word	0x10320000
 8002eec:	10310000 	.word	0x10310000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	10120000 	.word	0x10120000
 8002efc:	10110000 	.word	0x10110000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40011800 	.word	0x40011800
 8002f1c:	40011c00 	.word	0x40011c00
 8002f20:	40010400 	.word	0x40010400
=======
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d025      	beq.n	8002e74 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4910      	ldr	r1, [pc, #64]	; (8002e70 <HAL_GPIO_Init+0x2c8>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
 8002e34:	e025      	b.n	8002e82 <HAL_GPIO_Init+0x2da>
 8002e36:	bf00      	nop
 8002e38:	10320000 	.word	0x10320000
 8002e3c:	10310000 	.word	0x10310000
 8002e40:	10220000 	.word	0x10220000
 8002e44:	10210000 	.word	0x10210000
 8002e48:	10120000 	.word	0x10120000
 8002e4c:	10110000 	.word	0x10110000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	40010c00 	.word	0x40010c00
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40011400 	.word	0x40011400
 8002e68:	40011800 	.word	0x40011800
 8002e6c:	40011c00 	.word	0x40011c00
 8002e70:	40010400 	.word	0x40010400
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4913      	ldr	r1, [pc, #76]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
=======
 8002e74:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	4913      	ldr	r1, [pc, #76]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60cb      	str	r3, [r1, #12]
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x302>
=======
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60cb      	str	r3, [r1, #12]
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x302>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60cb      	str	r3, [r1, #12]
=======
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	4909      	ldr	r1, [pc, #36]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }

	position++;
<<<<<<< HEAD
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae7e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	; 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_WritePin>:
=======
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	3301      	adds	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f47f ae7e 	bne.w	8002bbc <HAL_GPIO_Init+0x14>
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	372c      	adds	r7, #44	; 0x2c
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_WritePin>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
=======
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	611a      	str	r2, [r3, #16]
=======
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	611a      	str	r2, [r3, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_EXTI_Callback>:
=======
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	611a      	str	r2, [r3, #16]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_EXTI_Callback>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
=======
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_RCC_OscConfig>:
=======
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_RCC_OscConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
=======
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e272      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
=======
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e272      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x12e>
=======
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8087 	beq.w	8003042 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8002fe4:	4b92      	ldr	r3, [pc, #584]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x12c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e24c      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
=======
 8002f34:	4b92      	ldr	r3, [pc, #584]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f40:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06c      	beq.n	8003040 <HAL_RCC_OscConfig+0x12c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d168      	bne.n	8003040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e24c      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x76>
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7f      	ldr	r2, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e02e      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x98>
 8003042:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7a      	ldr	r2, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b78      	ldr	r3, [pc, #480]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xbc>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a71      	ldr	r2, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]
=======
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x76>
 8002f7c:	4b80      	ldr	r3, [pc, #512]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7f      	ldr	r2, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xbc>
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6e      	ldr	r2, [pc, #440]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a67      	ldr	r2, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fc9e 	bl	80029e0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fc9a 	bl	80029e0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e200      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe4>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
=======
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7ff fc9e 	bl	8002930 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7ff fc9a 	bl	8002930 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e200      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe4>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80030c8:	f7ff fc8a 	bl	80029e0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff fc86 	bl	80029e0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1ec      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x10c>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
=======
 8003018:	f7ff fc8a 	bl	8002930 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7ff fc86 	bl	8002930 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1ec      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x10c>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x202>
=======
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x202>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1c0      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
=======
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c0      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
=======
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4939      	ldr	r1, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7ff fc3f 	bl	80029e0 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff fc3b 	bl	80029e0 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1a1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1a2>
=======
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7ff fc3f 	bl	8002930 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b6:	f7ff fc3b 	bl	8002930 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a1      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4927      	ldr	r1, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
=======
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4927      	ldr	r1, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7ff fc1e 	bl	80029e0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7ff fc1a 	bl	80029e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e180      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1e4>
=======
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff fc1e 	bl	8002930 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7ff fc1a 	bl	8002930 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e180      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03a      	beq.n	8003248 <HAL_RCC_OscConfig+0x284>
=======
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03a      	beq.n	8003198 <HAL_RCC_OscConfig+0x284>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7ff fbfe 	bl	80029e0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7ff fbfa 	bl	80029e0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e160      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x224>
=======
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7ff fbfe 	bl	8002930 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7ff fbfa 	bl	8002930 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e160      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x224>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8003206:	2001      	movs	r0, #1
 8003208:	f000 fad8 	bl	80037bc <RCC_Delay>
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
=======
 8003156:	2001      	movs	r0, #1
 8003158:	f000 fad8 	bl	800370c <RCC_Delay>
 800315c:	e01c      	b.n	8003198 <HAL_RCC_OscConfig+0x284>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7ff fbe4 	bl	80029e0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321a:	e00f      	b.n	800323c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7ff fbe0 	bl	80029e0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d908      	bls.n	800323c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e146      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	42420000 	.word	0x42420000
 8003238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e9      	bne.n	800321c <HAL_RCC_OscConfig+0x258>
=======
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7ff fbe4 	bl	8002930 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316a:	e00f      	b.n	800318c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7ff fbe0 	bl	8002930 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d908      	bls.n	800318c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e146      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	42420000 	.word	0x42420000
 8003188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e9      	bne.n	800316c <HAL_RCC_OscConfig+0x258>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a6 	beq.w	80033a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
=======
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a6 	beq.w	80032f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800325a:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a87      	ldr	r2, [pc, #540]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b7f      	ldr	r3, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7e      	ldr	r2, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7ff fba1 	bl	80029e0 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7ff fb9d 	bl	80029e0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e103      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2de>
=======
 80031aa:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a87      	ldr	r2, [pc, #540]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	61d3      	str	r3, [r2, #28]
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <HAL_RCC_OscConfig+0x4c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <HAL_RCC_OscConfig+0x4c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7e      	ldr	r2, [pc, #504]	; (80033dc <HAL_RCC_OscConfig+0x4c8>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7ff fba1 	bl	8002930 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7ff fb9d 	bl	8002930 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e103      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b75      	ldr	r3, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4c8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2de>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x312>
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e02d      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x334>
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	e01c      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d10c      	bne.n	800331a <HAL_RCC_OscConfig+0x356>
 8003300:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4a5d      	ldr	r2, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	e00b      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a5a      	ldr	r2, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d015      	beq.n	8003366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7ff fb51 	bl	80029e0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7ff fb4d 	bl	80029e0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0b1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <HAL_RCC_OscConfig+0x37e>
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x3cc>
=======
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x312>
 8003218:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e02d      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x334>
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x356>
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 800326a:	4b5b      	ldr	r3, [pc, #364]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a5a      	ldr	r2, [pc, #360]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a57      	ldr	r2, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7ff fb51 	bl	8002930 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7ff fb4d 	bl	8002930 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0b1      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x37e>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003366:	f7ff fb3b 	bl	80029e0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7ff fb37 	bl	80029e0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e09b      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_OscConfig+0x3aa>
=======
 80032b6:	f7ff fb3b 	bl	8002930 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7ff fb37 	bl	8002930 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e09b      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	61d3      	str	r3, [r2, #28]
=======
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	61d3      	str	r3, [r2, #28]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d061      	beq.n	800347c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d146      	bne.n	800344e <HAL_RCC_OscConfig+0x48a>
=======
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8087 	beq.w	800340a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d061      	beq.n	80033cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d146      	bne.n	800339e <HAL_RCC_OscConfig+0x48a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7ff fb0b 	bl	80029e0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7ff fb07 	bl	80029e0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e06d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x40a>
=======
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7ff fb0b 	bl	8002930 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7ff fb07 	bl	8002930 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e06d      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x40a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x444>
=======
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4921      	ldr	r1, [pc, #132]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
=======
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4921      	ldr	r1, [pc, #132]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a19      	ldr	r1, [r3, #32]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	430b      	orrs	r3, r1
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7ff fadb 	bl	80029e0 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7ff fad7 	bl	80029e0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x46a>
 800344c:	e035      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
=======
 8003358:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a19      	ldr	r1, [r3, #32]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	430b      	orrs	r3, r1
 800336a:	491b      	ldr	r1, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x4cc>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7ff fadb 	bl	8002930 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7ff fad7 	bl	8002930 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x46a>
 800339c:	e035      	b.n	800340a <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff fac4 	bl	80029e0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff fac0 	bl	80029e0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e026      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x498>
 800347a:	e01e      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
=======
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff fac4 	bl	8002930 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7ff fac0 	bl	8002930 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e026      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x498>
 80033ca:	e01e      	b.n	800340a <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e019      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
 8003490:	42420060 	.word	0x42420060
=======
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e019      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42420060 	.word	0x42420060
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_OscConfig+0x500>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
=======
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x500>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_RCC_ClockConfig>:
=======
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_RCC_ClockConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
=======
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d0      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0d0      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d910      	bls.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4965      	ldr	r1, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
=======
 800342c:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4965      	ldr	r1, [pc, #404]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
=======
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x92>
=======
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x92>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003546:	6053      	str	r3, [r2, #4]
=======
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003496:	6053      	str	r3, [r2, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
=======
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d040      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x120>
=======
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d040      	beq.n	8003538 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
=======
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d115      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e073      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
=======
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b41      	ldr	r3, [pc, #260]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e073      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06b      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4936      	ldr	r1, [pc, #216]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7ff fa12 	bl	80029e0 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7ff fa0e 	bl	80029e0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e053      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf8>
=======
 80034e6:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06b      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4936      	ldr	r1, [pc, #216]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7ff fa12 	bl	8002930 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7ff fa0e 	bl	8002930 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e053      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d210      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4922      	ldr	r1, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
=======
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d210      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 0207 	bic.w	r2, r3, #7
 800354e:	4922      	ldr	r1, [pc, #136]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
=======
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
=======
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1cc>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1d0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f970 	bl	800295c <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	080051c8 	.word	0x080051c8
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
=======
 80035a6:	f000 f821 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1cc>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1d0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f970 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08005118 	.word	0x08005118
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800369c:	b490      	push	{r4, r7}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
=======
 80035ec:	b490      	push	{r4, r7}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_GetSysClockFreq+0xac>)
 80036a4:	1d3c      	adds	r4, r7, #4
 80036a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_GetSysClockFreq+0xac>)
 80035f4:	1d3c      	adds	r4, r7, #4
 80035f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 80036ac:	f240 2301 	movw	r3, #513	; 0x201
 80036b0:	803b      	strh	r3, [r7, #0]
=======
 80035fc:	f240 2301 	movw	r3, #513	; 0x201
 8003600:	803b      	strh	r3, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
=======
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x46>
 80036da:	e02b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x98>
=======
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b04      	cmp	r3, #4
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x40>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x46>
 800362a:	e02b      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x98>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036de:	623b      	str	r3, [r7, #32]
      break;
 80036e0:	e02b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x9e>
=======
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800362e:	623b      	str	r3, [r7, #32]
      break;
 8003630:	e02b      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3328      	adds	r3, #40	; 0x28
 80036ec:	443b      	add	r3, r7
 80036ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x88>
=======
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3328      	adds	r3, #40	; 0x28
 800363c:	443b      	add	r3, r7
 800363e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003642:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	0c5b      	lsrs	r3, r3, #17
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	3328      	adds	r3, #40	; 0x28
 800370a:	443b      	add	r3, r7
 800370c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003710:	61bb      	str	r3, [r7, #24]
=======
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0c5b      	lsrs	r3, r3, #17
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	3328      	adds	r3, #40	; 0x28
 800365a:	443b      	add	r3, r7
 800365c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003660:	61bb      	str	r3, [r7, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	fb03 f202 	mul.w	r2, r3, r2
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e004      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x92>
=======
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003666:	fb03 f202 	mul.w	r2, r3, r2
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e004      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x92>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	623b      	str	r3, [r7, #32]
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x9e>
=======
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	623b      	str	r3, [r7, #32]
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003736:	623b      	str	r3, [r7, #32]
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6a3b      	ldr	r3, [r7, #32]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc90      	pop	{r4, r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	08004bc8 	.word	0x08004bc8
 800374c:	40021000 	.word	0x40021000
 8003750:	007a1200 	.word	0x007a1200
 8003754:	003d0900 	.word	0x003d0900

08003758 <HAL_RCC_GetHCLKFreq>:
=======
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003686:	623b      	str	r3, [r7, #32]
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6a3b      	ldr	r3, [r7, #32]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc90      	pop	{r4, r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	08004b18 	.word	0x08004b18
 800369c:	40021000 	.word	0x40021000
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	003d0900 	.word	0x003d0900

080036a8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <HAL_RCC_GetHCLKFreq+0x10>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20000000 	.word	0x20000000

0800376c <HAL_RCC_GetPCLK1Freq>:
=======
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff fff2 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	080051d8 	.word	0x080051d8

08003794 <HAL_RCC_GetPCLK2Freq>:
=======
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c0:	f7ff fff2 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08005128 	.word	0x08005128

080036e4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffde 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	0adb      	lsrs	r3, r3, #11
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	080051d8 	.word	0x080051d8

080037bc <RCC_Delay>:
=======
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	0adb      	lsrs	r3, r3, #11
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	08005128 	.word	0x08005128

0800370c <RCC_Delay>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <RCC_Delay+0x34>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <RCC_Delay+0x38>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0a5b      	lsrs	r3, r3, #9
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037d8:	bf00      	nop
  }
  while (Delay --);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	60fa      	str	r2, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <RCC_Delay+0x1c>
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	20000000 	.word	0x20000000
 80037f4:	10624dd3 	.word	0x10624dd3

080037f8 <HAL_SRAM_Init>:
=======
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <RCC_Delay+0x34>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <RCC_Delay+0x38>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0a5b      	lsrs	r3, r3, #9
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003728:	bf00      	nop
  }
  while (Delay --);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	60fa      	str	r2, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f9      	bne.n	8003728 <RCC_Delay+0x1c>
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	20000000 	.word	0x20000000
 8003744:	10624dd3 	.word	0x10624dd3

08003748 <HAL_SRAM_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
<<<<<<< HEAD
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_SRAM_Init+0x1c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003812:	d101      	bne.n	8003818 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e038      	b.n	800388a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_SRAM_Init+0x1c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d101      	bne.n	8003768 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e038      	b.n	80037da <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
<<<<<<< HEAD
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7fc fda1 	bl	8000374 <HAL_SRAM_MspInit>
=======
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fc fdf9 	bl	8000374 <HAL_SRAM_MspInit>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
<<<<<<< HEAD
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3308      	adds	r3, #8
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f001 f8b1 	bl	80049a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	461a      	mov	r2, r3
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	f001 f913 	bl	8004a78 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6858      	ldr	r0, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f001 f93e 	bl	8004ae0 <FSMC_NORSRAM_Extended_Timing_Init>
=======
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3308      	adds	r3, #8
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f001 f8b1 	bl	80048f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	461a      	mov	r2, r3
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	f001 f913 	bl	80049c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6858      	ldr	r0, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f001 f93e 	bl	8004a30 <FSMC_NORSRAM_Extended_Timing_Init>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
<<<<<<< HEAD
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6892      	ldr	r2, [r2, #8]
 800386c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	f041 0101 	orr.w	r1, r1, #1
 800387c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_Base_Init>:
=======
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	f041 0101 	orr.w	r1, r1, #1
 80037cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_TIM_Base_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e041      	b.n	8003928 <HAL_TIM_Base_Init+0x96>
=======
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e041      	b.n	8003878 <HAL_TIM_Base_Init+0x96>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fe fecf 	bl	800265c <HAL_TIM_Base_MspInit>
=======
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fe fecf 	bl	80025ac <HAL_TIM_Base_MspInit>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f000 fac1 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_PWM_Init>:
=======
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 fac1 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_PWM_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e041      	b.n	80039c6 <HAL_TIM_PWM_Init+0x96>
=======
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e041      	b.n	8003916 <HAL_TIM_PWM_Init+0x96>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f839 	bl	80039ce <HAL_TIM_PWM_MspInit>
=======
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f839 	bl	800391e <HAL_TIM_PWM_MspInit>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fa72 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_PWM_MspInit>:
=======
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 fa72 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_PWM_MspInit>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
=======
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_Start>:
=======
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_PWM_Start>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
=======
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e022      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d109      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x3e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e015      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e008      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e072      	b.n	8003b38 <HAL_TIM_PWM_Start+0x158>
=======
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_TIM_PWM_Start+0x24>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e022      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d109      	bne.n	800396e <HAL_TIM_PWM_Start+0x3e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e015      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d109      	bne.n	8003988 <HAL_TIM_PWM_Start+0x58>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e008      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e072      	b.n	8003a88 <HAL_TIM_PWM_Start+0x158>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x82>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	e013      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x92>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a70:	e00b      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a80:	e003      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fc9c 	bl	80043d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <HAL_TIM_PWM_Start+0x160>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_PWM_Start+0xcc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_TIM_PWM_Start+0x164>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_PWM_Start+0xd0>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xd2>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0x82>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	e013      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x92>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c0:	e00b      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	e003      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fc9c 	bl	8004320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <HAL_TIM_PWM_Start+0x160>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_TIM_PWM_Start+0xcc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_TIM_PWM_Start+0x164>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_PWM_Start+0xd0>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_PWM_Start+0xd2>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_TIM_PWM_Start+0x160>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x122>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_TIM_PWM_Start+0x164>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x122>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x122>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIM_PWM_Start+0x168>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x122>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIM_PWM_Start+0x16c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x122>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_TIM_PWM_Start+0x170>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d111      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d010      	beq.n	8003b36 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	e007      	b.n	8003b36 <HAL_TIM_PWM_Start+0x156>
=======
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_TIM_PWM_Start+0x160>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x122>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PWM_Start+0x164>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x122>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x122>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_TIM_PWM_Start+0x168>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x122>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_TIM_PWM_Start+0x16c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x122>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_TIM_PWM_Start+0x170>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d111      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d010      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	e007      	b.n	8003a86 <HAL_TIM_PWM_Start+0x156>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
=======
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40013400 	.word	0x40013400
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00

08003b54 <HAL_TIM_PWM_ConfigChannel>:
=======
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40013400 	.word	0x40013400
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00

08003aa4 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
=======
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0ac      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	f200 809f 	bhi.w	8003cbc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003cbd 	.word	0x08003cbd
 8003b8c:	08003cbd 	.word	0x08003cbd
 8003b90:	08003cbd 	.word	0x08003cbd
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003cbd 	.word	0x08003cbd
 8003b9c:	08003cbd 	.word	0x08003cbd
 8003ba0:	08003cbd 	.word	0x08003cbd
 8003ba4:	08003c3b 	.word	0x08003c3b
 8003ba8:	08003cbd 	.word	0x08003cbd
 8003bac:	08003cbd 	.word	0x08003cbd
 8003bb0:	08003cbd 	.word	0x08003cbd
 8003bb4:	08003c7b 	.word	0x08003c7b
=======
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e0ac      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	f200 809f 	bhi.w	8003c0c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003c0d 	.word	0x08003c0d
 8003adc:	08003c0d 	.word	0x08003c0d
 8003ae0:	08003c0d 	.word	0x08003c0d
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003c0d 	.word	0x08003c0d
 8003aec:	08003c0d 	.word	0x08003c0d
 8003af0:	08003c0d 	.word	0x08003c0d
 8003af4:	08003b8b 	.word	0x08003b8b
 8003af8:	08003c0d 	.word	0x08003c0d
 8003afc:	08003c0d 	.word	0x08003c0d
 8003b00:	08003c0d 	.word	0x08003c0d
 8003b04:	08003bcb 	.word	0x08003bcb
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f9c4 	bl	8003f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0204 	bic.w	r2, r2, #4
 8003be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	619a      	str	r2, [r3, #24]
      break;
 8003bf6:	e062      	b.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f9c4 	bl	8003e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	619a      	str	r2, [r3, #24]
      break;
 8003b46:	e062      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fa14 	bl	800402c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6999      	ldr	r1, [r3, #24]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	021a      	lsls	r2, r3, #8
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	619a      	str	r2, [r3, #24]
      break;
 8003c38:	e041      	b.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fa14 	bl	8003f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	619a      	str	r2, [r3, #24]
      break;
 8003b88:	e041      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fa67 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0208 	orr.w	r2, r2, #8
 8003c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0204 	bic.w	r2, r2, #4
 8003c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69d9      	ldr	r1, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	61da      	str	r2, [r3, #28]
      break;
 8003c78:	e021      	b.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fa67 	bl	8004064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0208 	orr.w	r2, r2, #8
 8003ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0204 	bic.w	r2, r2, #4
 8003bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	61da      	str	r2, [r3, #28]
      break;
 8003bc8:	e021      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fabb 	bl	80041fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	021a      	lsls	r2, r3, #8
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	61da      	str	r2, [r3, #28]
      break;
 8003cba:	e000      	b.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fabb 	bl	800414c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	61da      	str	r2, [r3, #28]
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    default:
      break;
<<<<<<< HEAD
 8003cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_ConfigClockSource>:
=======
 8003c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_ConfigClockSource>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
=======
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0b3      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x180>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x18>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0b3      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x180>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d03e      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0xd0>
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	f200 8087 	bhi.w	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	f000 8085 	beq.w	8003e3c <HAL_TIM_ConfigClockSource+0x16c>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d87f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d01a      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xa2>
 8003d3c:	2b70      	cmp	r3, #112	; 0x70
 8003d3e:	d87b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d40:	2b60      	cmp	r3, #96	; 0x60
 8003d42:	d050      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x116>
 8003d44:	2b60      	cmp	r3, #96	; 0x60
 8003d46:	d877      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d03c      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0xf6>
 8003d4c:	2b50      	cmp	r3, #80	; 0x50
 8003d4e:	d873      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d058      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x136>
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d86f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d064      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x156>
 8003d5c:	2b30      	cmp	r3, #48	; 0x30
 8003d5e:	d86b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d060      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x156>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d867      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x156>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d05a      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x156>
=======
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d03e      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xd0>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	f200 8087 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	f000 8085 	beq.w	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d87f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xa2>
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d87b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d050      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x116>
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d877      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003c98:	2b50      	cmp	r3, #80	; 0x50
 8003c9a:	d03c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xf6>
 8003c9c:	2b50      	cmp	r3, #80	; 0x50
 8003c9e:	d873      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d058      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x136>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d86f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d064      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x156>
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d86b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d060      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x156>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d867      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x156>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d05a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 8003d70:	e062      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f000 fb06 	bl	8004392 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	609a      	str	r2, [r3, #8]
      break;
 8003d9e:	e04e      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f000 faef 	bl	8004392 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc2:	609a      	str	r2, [r3, #8]
      break;
 8003dc4:	e03b      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 fa66 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2150      	movs	r1, #80	; 0x50
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fabd 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003de4:	e02b      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 fa84 	bl	8004300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2160      	movs	r1, #96	; 0x60
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 faad 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003e04:	e01b      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 fa46 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fa9d 	bl	800435e <TIM_ITRx_SetConfig>
      break;
 8003e24:	e00b      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fa94 	bl	800435e <TIM_ITRx_SetConfig>
        break;
 8003e36:	e002      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e38:	bf00      	nop
 8003e3a:	e000      	b.n	8003e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <TIM_Base_SetConfig>:
=======
 8003cc0:	e062      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fb06 	bl	80042e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
      break;
 8003cee:	e04e      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f000 faef 	bl	80042e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e03b      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fa66 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2150      	movs	r1, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fabd 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d34:	e02b      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fa84 	bl	8004250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2160      	movs	r1, #96	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 faad 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d54:	e01b      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fa46 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa9d 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d74:	e00b      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fa94 	bl	80042ae <TIM_ITRx_SetConfig>
        break;
 8003d86:	e002      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <TIM_Base_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a33      	ldr	r2, [pc, #204]	; (8003f38 <TIM_Base_SetConfig+0xe0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <TIM_Base_SetConfig+0xe0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0x82>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0x82>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0x82>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
=======
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <TIM_Base_SetConfig+0xe0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00f      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a2f      	ldr	r2, [pc, #188]	; (8003e90 <TIM_Base_SetConfig+0xe8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <TIM_Base_SetConfig+0xec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <TIM_Base_SetConfig+0xf0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <TIM_Base_SetConfig+0xe0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <TIM_Base_SetConfig+0x82>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00f      	beq.n	8003e2a <TIM_Base_SetConfig+0x82>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e10:	d00b      	beq.n	8003e2a <TIM_Base_SetConfig+0x82>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <TIM_Base_SetConfig+0xe8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_Base_SetConfig+0x82>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <TIM_Base_SetConfig+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_Base_SetConfig+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <TIM_Base_SetConfig+0xf0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <TIM_Base_SetConfig+0xe0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0xc8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <TIM_Base_SetConfig+0xe0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0xc8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00

08003f4c <TIM_OC1_SetConfig>:
=======
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00

08003e9c <TIM_OC1_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
=======
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 0302 	bic.w	r3, r3, #2
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a20      	ldr	r2, [pc, #128]	; (8004024 <TIM_OC1_SetConfig+0xd8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC1_SetConfig+0x64>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <TIM_OC1_SetConfig+0xdc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10c      	bne.n	8003fca <TIM_OC1_SetConfig+0x7e>
=======
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 0302 	bic.w	r3, r3, #2
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <TIM_OC1_SetConfig+0xd8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC1_SetConfig+0x64>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <TIM_OC1_SetConfig+0xdc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10c      	bne.n	8003f1a <TIM_OC1_SetConfig+0x7e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0308 	bic.w	r3, r3, #8
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <TIM_OC1_SetConfig+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC1_SetConfig+0x8e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC1_SetConfig+0xdc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d111      	bne.n	8003ffe <TIM_OC1_SetConfig+0xb2>
=======
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0308 	bic.w	r3, r3, #8
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <TIM_OC1_SetConfig+0xd8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC1_SetConfig+0x8e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <TIM_OC1_SetConfig+0xdc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <TIM_OC1_SetConfig+0xb2>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
=======
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40013400 	.word	0x40013400

0800402c <TIM_OC2_SetConfig>:
=======
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40013400 	.word	0x40013400

08003f7c <TIM_OC2_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
=======
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <TIM_OC2_SetConfig+0xe0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC2_SetConfig+0x68>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <TIM_OC2_SetConfig+0xe4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10d      	bne.n	80040b0 <TIM_OC2_SetConfig+0x84>
=======
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0210 	bic.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <TIM_OC2_SetConfig+0xe0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_OC2_SetConfig+0x68>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a20      	ldr	r2, [pc, #128]	; (8004060 <TIM_OC2_SetConfig+0xe4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10d      	bne.n	8004000 <TIM_OC2_SetConfig+0x84>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ae:	617b      	str	r3, [r7, #20]
=======
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffe:	617b      	str	r3, [r7, #20]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC2_SetConfig+0xe0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC2_SetConfig+0x94>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC2_SetConfig+0xe4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d113      	bne.n	80040e8 <TIM_OC2_SetConfig+0xbc>
=======
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a16      	ldr	r2, [pc, #88]	; (800405c <TIM_OC2_SetConfig+0xe0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC2_SetConfig+0x94>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <TIM_OC2_SetConfig+0xe4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d113      	bne.n	8004038 <TIM_OC2_SetConfig+0xbc>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
=======
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400

08004114 <TIM_OC3_SetConfig>:
=======
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40013400 	.word	0x40013400

08004064 <TIM_OC3_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
=======
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_OC3_SetConfig+0xe0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC3_SetConfig+0x66>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <TIM_OC3_SetConfig+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10d      	bne.n	8004196 <TIM_OC3_SetConfig+0x82>
=======
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <TIM_OC3_SetConfig+0xe0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC3_SetConfig+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <TIM_OC3_SetConfig+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10d      	bne.n	80040e6 <TIM_OC3_SetConfig+0x82>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <TIM_OC3_SetConfig+0xe0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_OC3_SetConfig+0x92>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <TIM_OC3_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d113      	bne.n	80041ce <TIM_OC3_SetConfig+0xba>
=======
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <TIM_OC3_SetConfig+0xe0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_OC3_SetConfig+0x92>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_OC3_SetConfig+0xe4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d113      	bne.n	800411e <TIM_OC3_SetConfig+0xba>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
=======
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40013400 	.word	0x40013400

080041fc <TIM_OC4_SetConfig>:
=======
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400

0800414c <TIM_OC4_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
=======
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a11      	ldr	r2, [pc, #68]	; (800429c <TIM_OC4_SetConfig+0xa0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC4_SetConfig+0x68>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <TIM_OC4_SetConfig+0xa4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <TIM_OC4_SetConfig+0x7c>
=======
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <TIM_OC4_SetConfig+0xa0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x68>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <TIM_OC4_SetConfig+0xa4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x7c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
=======
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40013400 	.word	0x40013400

080042a4 <TIM_TI1_ConfigInputStage>:
=======
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40013400 	.word	0x40013400

080041f4 <TIM_TI1_ConfigInputStage>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
=======
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <TIM_TI2_ConfigInputStage>:
=======
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <TIM_TI2_ConfigInputStage>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
=======
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 0210 	bic.w	r2, r3, #16
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <TIM_ITRx_SetConfig>:
=======
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f023 0210 	bic.w	r2, r3, #16
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800427a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <TIM_ITRx_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
=======
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	f043 0307 	orr.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <TIM_ETR_SetConfig>:
=======
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f043 0307 	orr.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <TIM_ETR_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	609a      	str	r2, [r3, #8]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <TIM_CCxChannelCmd>:
=======
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	431a      	orrs	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM_CCxChannelCmd>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
=======
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2201      	movs	r2, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2201      	movs	r2, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
=======
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e050      	b.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00e      	beq.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10c      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	609a      	str	r2, [r3, #8]
=======
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e050      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a12      	ldr	r2, [pc, #72]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00

080044f0 <HAL_UART_Init>:
=======
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00

08004440 <HAL_UART_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03f      	b.n	8004582 <HAL_UART_Init+0x92>
=======
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e03f      	b.n	80044d2 <HAL_UART_Init+0x92>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe f998 	bl	800284c <HAL_UART_MspInit>
=======
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe f998 	bl	800279c <HAL_UART_MspInit>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2224      	movs	r2, #36	; 0x24
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9a7 	bl	8004888 <UART_SetConfig>
=======
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9a7 	bl	80047d8 <UART_SetConfig>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UART_Transmit>:
=======
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Transmit>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800458a:	b580      	push	{r7, lr}
 800458c:	b08a      	sub	sp, #40	; 0x28
 800458e:	af02      	add	r7, sp, #8
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d17c      	bne.n	80046a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_UART_Transmit+0x2c>
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e075      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
=======
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d17c      	bne.n	80045f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x2c>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e075      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x3e>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2221      	movs	r2, #33	; 0x21
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045de:	f7fe f9ff 	bl	80029e0 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d108      	bne.n	800460c <HAL_UART_Transmit+0x82>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e003      	b.n	8004614 <HAL_UART_Transmit+0x8a>
=======
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x3e>
 8004514:	2302      	movs	r3, #2
 8004516:	e06e      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2221      	movs	r2, #33	; 0x21
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fe f9ff 	bl	8002930 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x82>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x8a>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
=======
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800461c:	e02a      	b.n	8004674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f8e2 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e036      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3302      	adds	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e007      	b.n	8004666 <HAL_UART_Transmit+0xdc>
=======
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f8e2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xdc>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1cf      	bne.n	800461e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2140      	movs	r1, #64	; 0x40
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8b2 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
=======
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8b2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
=======
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_UART_Receive>:
=======
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08a      	sub	sp, #40	; 0x28
 80046b2:	af02      	add	r7, sp, #8
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	f040 808c 	bne.w	80047e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Receive+0x2e>
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e084      	b.n	80047ea <HAL_UART_Receive+0x13c>
=======
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 808c 	bne.w	8004738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Receive+0x2e>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e084      	b.n	800473a <HAL_UART_Receive+0x13c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Receive+0x40>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e07d      	b.n	80047ea <HAL_UART_Receive+0x13c>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fe f969 	bl	80029e0 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Receive+0x8a>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Receive+0x92>
=======
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Receive+0x40>
 800463a:	2302      	movs	r3, #2
 800463c:	e07d      	b.n	800473a <HAL_UART_Receive+0x13c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2222      	movs	r2, #34	; 0x22
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800465a:	f7fe f969 	bl	8002930 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Receive+0x8a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive+0x92>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
=======
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004748:	e043      	b.n	80047d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2120      	movs	r1, #32
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f84c 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e042      	b.n	80047ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	b29a      	uxth	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e01f      	b.n	80047c4 <HAL_UART_Receive+0x116>
=======
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004698:	e043      	b.n	8004722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2120      	movs	r1, #32
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f84c 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e042      	b.n	800473a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e01f      	b.n	8004714 <HAL_UART_Receive+0x116>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
<<<<<<< HEAD
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d007      	beq.n	800479e <HAL_UART_Receive+0xf0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_UART_Receive+0xfe>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e008      	b.n	80047be <HAL_UART_Receive+0x110>
=======
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d007      	beq.n	80046ee <HAL_UART_Receive+0xf0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_UART_Receive+0xfe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e008      	b.n	800470e <HAL_UART_Receive+0x110>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1b6      	bne.n	800474a <HAL_UART_Receive+0x9c>
=======
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b6      	bne.n	800469a <HAL_UART_Receive+0x9c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_UART_Receive+0x13c>
=======
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Receive+0x13c>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_WaitOnFlagUntilTimeout>:
=======
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	e02c      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	d028      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x30>
 8004812:	f7fe f8e5 	bl	80029e0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d21d      	bcs.n	800485e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004830:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d0c3      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004752:	e02c      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475a:	d028      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	f7fe f8e5 	bl	8002930 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d21d      	bcs.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004780:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e00f      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d0c3      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <UART_SetConfig>:
=======
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <UART_SetConfig>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
=======
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	611a      	str	r2, [r3, #16]
=======
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	611a      	str	r2, [r3, #16]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048c2:	f023 030c 	bic.w	r3, r3, #12
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	60d3      	str	r3, [r2, #12]
=======
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004812:	f023 030c 	bic.w	r3, r3, #12
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	430b      	orrs	r3, r1
 800481e:	60d3      	str	r3, [r2, #12]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	; (800499c <UART_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7fe ff50 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	e002      	b.n	80048fe <UART_SetConfig+0x76>
=======
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <UART_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe ff50 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	e002      	b.n	800484e <UART_SetConfig+0x76>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80048f8:	f7fe ff38 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80048fc:	60f8      	str	r0, [r7, #12]
=======
 8004848:	f7fe ff38 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800484c:	60f8      	str	r0, [r7, #12]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009a      	lsls	r2, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <UART_SetConfig+0x118>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	0119      	lsls	r1, r3, #4
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009a      	lsls	r2, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fbb2 f2f3 	udiv	r2, r2, r3
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <UART_SetConfig+0x118>)
 8004936:	fba3 0302 	umull	r0, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2064      	movs	r0, #100	; 0x64
 800493e:	fb00 f303 	mul.w	r3, r0, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	3332      	adds	r3, #50	; 0x32
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <UART_SetConfig+0x118>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004954:	4419      	add	r1, r3
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009a      	lsls	r2, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	fbb2 f2f3 	udiv	r2, r2, r3
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <UART_SetConfig+0x118>)
 800496e:	fba3 0302 	umull	r0, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2064      	movs	r0, #100	; 0x64
 8004976:	fb00 f303 	mul.w	r3, r0, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <UART_SetConfig+0x118>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	440a      	add	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40013800 	.word	0x40013800
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <FSMC_NORSRAM_Init>:
=======
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	0119      	lsls	r1, r3, #4
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	; 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a4:	4419      	add	r1, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	; 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	440a      	add	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40013800 	.word	0x40013800
 80048f0:	51eb851f 	.word	0x51eb851f

080048f4 <FSMC_NORSRAM_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
<<<<<<< HEAD
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
=======
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
<<<<<<< HEAD
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	f023 0101 	bic.w	r1, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d102      	bne.n	80049d4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e001      	b.n	80049d8 <FSMC_NORSRAM_Init+0x34>
=======
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f023 0101 	bic.w	r1, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d102      	bne.n	8004924 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e001      	b.n	8004928 <FSMC_NORSRAM_Init+0x34>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
<<<<<<< HEAD
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
=======
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
<<<<<<< HEAD
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80049e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80049ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80049f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80049f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80049fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004a02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004a08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004a0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004a14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <FSMC_NORSRAM_Init+0xd0>)
 8004a34:	60fb      	str	r3, [r7, #12]
=======
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004934:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800493a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004940:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004946:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800494c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004952:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004958:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800495e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004964:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <FSMC_NORSRAM_Init+0xd0>)
 8004984:	60fb      	str	r3, [r7, #12]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
<<<<<<< HEAD
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a3c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004a44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	ea02 0103 	and.w	r1, r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4319      	orrs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	0008fb7f 	.word	0x0008fb7f

08004a78 <FSMC_NORSRAM_Timing_Init>:
=======
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	ea02 0103 	and.w	r1, r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4319      	orrs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	0008fb7f 	.word	0x0008fb7f

080049c8 <FSMC_NORSRAM_Timing_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
<<<<<<< HEAD
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
=======
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
<<<<<<< HEAD
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	051b      	lsls	r3, r3, #20
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	3b02      	subs	r3, #2
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	3201      	adds	r2, #1
 8004acc:	4319      	orrs	r1, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049de:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	3b02      	subs	r3, #2
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	3201      	adds	r2, #1
 8004a1c:	4319      	orrs	r1, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
<<<<<<< HEAD
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <FSMC_NORSRAM_Extended_Timing_Init>:
=======
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <FSMC_NORSRAM_Extended_Timing_Init>:
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
<<<<<<< HEAD
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
=======
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
<<<<<<< HEAD
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af4:	d11d      	bne.n	8004b32 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
=======
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a44:	d11d      	bne.n	8004a82 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
<<<<<<< HEAD
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	6811      	ldr	r1, [r2, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	6852      	ldr	r2, [r2, #4]
 8004b0a:	0112      	lsls	r2, r2, #4
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	0212      	lsls	r2, r2, #8
 8004b14:	4311      	orrs	r1, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	6992      	ldr	r2, [r2, #24]
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68d2      	ldr	r2, [r2, #12]
 8004b20:	0412      	lsls	r2, r2, #16
 8004b22:	430a      	orrs	r2, r1
 8004b24:	ea43 0102 	orr.w	r1, r3, r2
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b30:	e005      	b.n	8004b3e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
=======
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	6852      	ldr	r2, [r2, #4]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	4311      	orrs	r1, r2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	6892      	ldr	r2, [r2, #8]
 8004a62:	0212      	lsls	r2, r2, #8
 8004a64:	4311      	orrs	r1, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	6992      	ldr	r2, [r2, #24]
 8004a6a:	4311      	orrs	r1, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	68d2      	ldr	r2, [r2, #12]
 8004a70:	0412      	lsls	r2, r2, #16
 8004a72:	430a      	orrs	r2, r1
 8004a74:	ea43 0102 	orr.w	r1, r3, r2
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a80:	e005      	b.n	8004a8e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
<<<<<<< HEAD
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	cff00000 	.word	0xcff00000

08004b50 <memset>:
 8004b50:	4603      	mov	r3, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d100      	bne.n	8004b5a <memset+0xa>
 8004b58:	4770      	bx	lr
 8004b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5e:	e7f9      	b.n	8004b54 <memset+0x4>

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2600      	movs	r6, #0
 8004b64:	4d0c      	ldr	r5, [pc, #48]	; (8004b98 <__libc_init_array+0x38>)
 8004b66:	4c0d      	ldr	r4, [pc, #52]	; (8004b9c <__libc_init_array+0x3c>)
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	f000 f81a 	bl	8004ba8 <_init>
 8004b74:	2600      	movs	r6, #0
 8004b76:	4d0a      	ldr	r5, [pc, #40]	; (8004ba0 <__libc_init_array+0x40>)
 8004b78:	4c0a      	ldr	r4, [pc, #40]	; (8004ba4 <__libc_init_array+0x44>)
 8004b7a:	1b64      	subs	r4, r4, r5
 8004b7c:	10a4      	asrs	r4, r4, #2
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	080051e0 	.word	0x080051e0
 8004b9c:	080051e0 	.word	0x080051e0
 8004ba0:	080051e0 	.word	0x080051e0
 8004ba4:	080051e4 	.word	0x080051e4

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
=======
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	cff00000 	.word	0xcff00000

08004aa0 <memset>:
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4402      	add	r2, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	4d0c      	ldr	r5, [pc, #48]	; (8004ae8 <__libc_init_array+0x38>)
 8004ab6:	4c0d      	ldr	r4, [pc, #52]	; (8004aec <__libc_init_array+0x3c>)
 8004ab8:	1b64      	subs	r4, r4, r5
 8004aba:	10a4      	asrs	r4, r4, #2
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	f000 f81a 	bl	8004af8 <_init>
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	4d0a      	ldr	r5, [pc, #40]	; (8004af0 <__libc_init_array+0x40>)
 8004ac8:	4c0a      	ldr	r4, [pc, #40]	; (8004af4 <__libc_init_array+0x44>)
 8004aca:	1b64      	subs	r4, r4, r5
 8004acc:	10a4      	asrs	r4, r4, #2
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08005130 	.word	0x08005130
 8004aec:	08005130 	.word	0x08005130
 8004af0:	08005130 	.word	0x08005130
 8004af4:	08005134 	.word	0x08005134

08004af8 <_init>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr

08004b04 <_fini>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr
>>>>>>> 734b260d2a24a0610a5e6c4888033ccbd31dd5b5
