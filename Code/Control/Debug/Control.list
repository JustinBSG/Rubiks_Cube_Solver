
Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005410  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800561c  0800561c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800561c  0800561c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800561c  0800561c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005630  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d67e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002854  00000000  00000000  0002d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc6  00000000  00000000  00030fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aee7  00000000  00000000  00031c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c70  00000000  00000000  0004cb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b993  00000000  00000000  0005e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004218  00000000  00000000  000fa188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000fe3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080055dc 	.word	0x080055dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080055dc 	.word	0x080055dc

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f003 ffb5 	bl	800422c <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fbb7 	bl	8000a3a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f003 f9b0 	bl	80036a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f003 f9a3 	bl	80036a0 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000070 	.word	0x20000070
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <MX_GPIO_Init+0x118>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a3f      	ldr	r2, [pc, #252]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a39      	ldr	r2, [pc, #228]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0x118>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0x118>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <MX_GPIO_Init+0x11c>)
 800041c:	f003 fad4 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000426:	f003 facf 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481b      	ldr	r0, [pc, #108]	; (80004ac <MX_GPIO_Init+0x124>)
 8000440:	f003 f92e 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044c:	2302      	movs	r3, #2
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000458:	f003 f922 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x11c>)
 8000476:	f003 f913 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000492:	f003 f905 	bl	80036a0 <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010800 	.word	0x40010800

080004b4 <Delay>:

void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	e002      	b.n	80004c4 <Delay+0x10>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f9      	bne.n	80004be <Delay+0xa>
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f829 	bl	8000534 <LCD_BackLed_Control>
	LCD_Rst();
 80004e2:	f000 f80f 	bl	8000504 <LCD_Rst>
	LCD_REG_Config();
 80004e6:	f000 f85f 	bl	80005a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004f4:	22f0      	movs	r2, #240	; 0xf0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9e6 	bl	80008ca <LCD_Clear>
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <LCD_Rst+0x28>)
 800050e:	f003 fa5b 	bl	80039c8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <LCD_Rst+0x2c>)
 8000514:	f7ff ffce 	bl	80004b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LCD_Rst+0x28>)
 800051e:	f003 fa53 	bl	80039c8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <LCD_Rst+0x2c>)
 8000524:	f7ff ffc6 	bl	80004b4 <Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40011800 	.word	0x40011800
 8000530:	0002bffc 	.word	0x0002bffc

08000534 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <LCD_BackLed_Control+0x34>)
 800054c:	f003 fa3c 	bl	80039c8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000550:	e005      	b.n	800055e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <LCD_BackLed_Control+0x34>)
 800055a:	f003 fa35 	bl	80039c8 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40011400 	.word	0x40011400

0800056c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000576:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	8013      	strh	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LCD_Write_Data+0x1c>)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	8013      	strh	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	60020000 	.word	0x60020000

080005a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005ac:	20cf      	movs	r0, #207	; 0xcf
 80005ae:	f7ff ffdd 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffe8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005b8:	2081      	movs	r0, #129	; 0x81
 80005ba:	f7ff ffe5 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005be:	2030      	movs	r0, #48	; 0x30
 80005c0:	f7ff ffe2 	bl	8000588 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005c4:	20ed      	movs	r0, #237	; 0xed
 80005c6:	f7ff ffd1 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f7ff ffdc 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ffd9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005d6:	2012      	movs	r0, #18
 80005d8:	f7ff ffd6 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005dc:	2081      	movs	r0, #129	; 0x81
 80005de:	f7ff ffd3 	bl	8000588 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005e2:	20e8      	movs	r0, #232	; 0xe8
 80005e4:	f7ff ffc2 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005e8:	2085      	movs	r0, #133	; 0x85
 80005ea:	f7ff ffcd 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005ee:	2010      	movs	r0, #16
 80005f0:	f7ff ffca 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f7ff ffc7 	bl	8000588 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80005fa:	20cb      	movs	r0, #203	; 0xcb
 80005fc:	f7ff ffb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000600:	2039      	movs	r0, #57	; 0x39
 8000602:	f7ff ffc1 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000606:	202c      	movs	r0, #44	; 0x2c
 8000608:	f7ff ffbe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffbb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000612:	2034      	movs	r0, #52	; 0x34
 8000614:	f7ff ffb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ffb5 	bl	8000588 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800061e:	20f7      	movs	r0, #247	; 0xf7
 8000620:	f7ff ffa4 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000624:	2020      	movs	r0, #32
 8000626:	f7ff ffaf 	bl	8000588 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800062a:	20ea      	movs	r0, #234	; 0xea
 800062c:	f7ff ff9e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffa9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffa6 	bl	8000588 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800063c:	20b1      	movs	r0, #177	; 0xb1
 800063e:	f7ff ff95 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffa0 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000648:	201b      	movs	r0, #27
 800064a:	f7ff ff9d 	bl	8000588 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f7ff ff8c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000654:	200a      	movs	r0, #10
 8000656:	f7ff ff97 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800065a:	20a2      	movs	r0, #162	; 0xa2
 800065c:	f7ff ff94 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000660:	20c0      	movs	r0, #192	; 0xc0
 8000662:	f7ff ff83 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000666:	2035      	movs	r0, #53	; 0x35
 8000668:	f7ff ff8e 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800066c:	20c1      	movs	r0, #193	; 0xc1
 800066e:	f7ff ff7d 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000672:	2011      	movs	r0, #17
 8000674:	f7ff ff88 	bl	8000588 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000678:	20c5      	movs	r0, #197	; 0xc5
 800067a:	f7ff ff77 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f7ff ff82 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f7ff ff7f 	bl	8000588 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800068a:	20c7      	movs	r0, #199	; 0xc7
 800068c:	f7ff ff6e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000690:	20a2      	movs	r0, #162	; 0xa2
 8000692:	f7ff ff79 	bl	8000588 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000696:	20f2      	movs	r0, #242	; 0xf2
 8000698:	f7ff ff68 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff73 	bl	8000588 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006a2:	2026      	movs	r0, #38	; 0x26
 80006a4:	f7ff ff62 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff6d 	bl	8000588 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006ae:	20e0      	movs	r0, #224	; 0xe0
 80006b0:	f7ff ff5c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006b4:	200f      	movs	r0, #15
 80006b6:	f7ff ff67 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ba:	2026      	movs	r0, #38	; 0x26
 80006bc:	f7ff ff64 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006c0:	2024      	movs	r0, #36	; 0x24
 80006c2:	f7ff ff61 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006c6:	200b      	movs	r0, #11
 80006c8:	f7ff ff5e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff5b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006d2:	2009      	movs	r0, #9
 80006d4:	f7ff ff58 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006d8:	2054      	movs	r0, #84	; 0x54
 80006da:	f7ff ff55 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006de:	20a8      	movs	r0, #168	; 0xa8
 80006e0:	f7ff ff52 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006e4:	2046      	movs	r0, #70	; 0x46
 80006e6:	f7ff ff4f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ff4c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80006f0:	2017      	movs	r0, #23
 80006f2:	f7ff ff49 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006f6:	2009      	movs	r0, #9
 80006f8:	f7ff ff46 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff ff43 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000702:	2007      	movs	r0, #7
 8000704:	f7ff ff40 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff3d 	bl	8000588 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800070e:	20e1      	movs	r0, #225	; 0xe1
 8000710:	f7ff ff2c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800071a:	2019      	movs	r0, #25
 800071c:	f7ff ff34 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff ff31 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff2e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff ff2b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff28 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000738:	202a      	movs	r0, #42	; 0x2a
 800073a:	f7ff ff25 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800073e:	2047      	movs	r0, #71	; 0x47
 8000740:	f7ff ff22 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000744:	2039      	movs	r0, #57	; 0x39
 8000746:	f7ff ff1f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff ff1c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff ff19 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000756:	2006      	movs	r0, #6
 8000758:	f7ff ff16 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800075c:	2030      	movs	r0, #48	; 0x30
 800075e:	f7ff ff13 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000762:	2038      	movs	r0, #56	; 0x38
 8000764:	f7ff ff10 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000768:	200f      	movs	r0, #15
 800076a:	f7ff ff0d 	bl	8000588 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fefc 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f7ff ff07 	bl	8000588 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fef6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff01 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fefe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fefb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000792:	20ef      	movs	r0, #239	; 0xef
 8000794:	f7ff fef8 	bl	8000588 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000798:	202b      	movs	r0, #43	; 0x2b
 800079a:	f7ff fee7 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fef2 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff feef 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff feec 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007b0:	203f      	movs	r0, #63	; 0x3f
 80007b2:	f7ff fee9 	bl	8000588 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007b6:	203a      	movs	r0, #58	; 0x3a
 80007b8:	f7ff fed8 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007bc:	2055      	movs	r0, #85	; 0x55
 80007be:	f7ff fee3 	bl	8000588 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff fed2 	bl	800056c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <LCD_REG_Config+0x230>)
 80007ca:	f7ff fe73 	bl	80004b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007ce:	2029      	movs	r0, #41	; 0x29
 80007d0:	f7ff fecc 	bl	800056c <LCD_Write_Cmd>
	
	
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	0002bffc 	.word	0x0002bffc

080007dc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80007fa:	202a      	movs	r0, #42	; 0x2a
 80007fc:	f7ff feb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b29b      	uxth	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff febe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	4413      	add	r3, r2
 800081e:	3b01      	subs	r3, #1
 8000820:	121b      	asrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff feaf 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	4413      	add	r3, r2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3b01      	subs	r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	b29b      	uxth	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fea4 	bl	8000588 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fe93 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe9b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe95 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800085e:	88ba      	ldrh	r2, [r7, #4]
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	3b01      	subs	r3, #1
 8000866:	121b      	asrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe8c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	883b      	ldrh	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe81 	bl	8000588 <LCD_Write_Data>
	
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f7ff fe64 	bl	800056c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e006      	b.n	80008b8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe6b 	bl	8000588 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3f4      	bcc.n	80008aa <LCD_FillColor+0x1c>
		
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	4623      	mov	r3, r4
 80008da:	80fb      	strh	r3, [r7, #6]
 80008dc:	4603      	mov	r3, r0
 80008de:	80bb      	strh	r3, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	807b      	strh	r3, [r7, #2]
 80008e4:	4613      	mov	r3, r2
 80008e6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	887a      	ldrh	r2, [r7, #2]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88f8      	ldrh	r0, [r7, #6]
 80008f0:	f7ff ff74 	bl	80007dc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	883a      	ldrh	r2, [r7, #0]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	8b3b      	ldrh	r3, [r7, #24]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f7ff ffc3 	bl	800088e <LCD_FillColor>
	
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f002 fd59 	bl	80033cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f849 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f7ff fd33 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000922:	f7ff fc7f 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
 8000926:	f002 fac1 	bl	8002eac <MX_TIM3_Init>
  MX_TIM4_Init();
 800092a:	f002 fb57 	bl	8002fdc <MX_TIM4_Init>
  MX_TIM2_Init();
 800092e:	f002 fa47 	bl	8002dc0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000932:	f002 fcaf 	bl	8003294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000936:	2100      	movs	r1, #0
 8000938:	4819      	ldr	r0, [pc, #100]	; (80009a0 <main+0x90>)
 800093a:	f003 fd6b 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800093e:	2108      	movs	r1, #8
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <main+0x94>)
 8000942:	f003 fd67 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000946:	2108      	movs	r1, #8
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <main+0x90>)
 800094a:	f003 fd63 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800094e:	210c      	movs	r1, #12
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <main+0x90>)
 8000952:	f003 fd5f 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000956:	2100      	movs	r1, #0
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <main+0x98>)
 800095a:	f003 fd5b 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800095e:	2104      	movs	r1, #4
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <main+0x98>)
 8000962:	f003 fd57 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000966:	2108      	movs	r1, #8
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <main+0x98>)
 800096a:	f003 fd53 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800096e:	210c      	movs	r1, #12
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <main+0x98>)
 8000972:	f003 fd4f 	bl	8004414 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000976:	f7ff fdae 	bl	80004d6 <LCD_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  servo_init();
 800097a:	f002 f839 	bl	80029f0 <servo_init>
	  uint8_t choice = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
	  char input[5];
	  HAL_UART_Receive(&huart1, input, sizeof(input), 0xFFFF);
 8000982:	4639      	mov	r1, r7
 8000984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000988:	2205      	movs	r2, #5
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <main+0x9c>)
 800098c:	f004 fba9 	bl	80050e2 <HAL_UART_Receive>
	  choice = input[5]-'1'+1;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	3b30      	subs	r3, #48	; 0x30
 8000994:	71fb      	strb	r3, [r7, #7]
	  mode(choice);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4618      	mov	r0, r3
 800099a:	f001 ff83 	bl	80028a4 <mode>
  {
 800099e:	e7ec      	b.n	800097a <main+0x6a>
 80009a0:	20000104 	.word	0x20000104
 80009a4:	20000074 	.word	0x20000074
 80009a8:	200000bc 	.word	0x200000bc
 80009ac:	2000014c 	.word	0x2000014c

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	; 0x40
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	2228      	movs	r2, #40	; 0x28
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fde0 	bl	8005584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fffd 	bl	80039f8 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a04:	f000 f819 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fa6a 	bl	8003efc <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <movement_F>:
 */

#include "movement.h"

// Number of Delay: 4
void movement_F(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	clockwise_90(south_front);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f002 f87d 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000a4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a52:	f002 fd1d 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8000a56:	2006      	movs	r0, #6
 8000a58:	f002 f8e6 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f002 fd16 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f002 f837 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6e:	f002 fd0f 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8000a72:	2006      	movs	r0, #6
 8000a74:	f002 f90e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7c:	f002 fd08 	bl	8003490 <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <movement_aF>:

// Number of Delay: 4
void movement_aF(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 8000a88:	2005      	movs	r0, #5
 8000a8a:	f002 f895 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a92:	f002 fcfd 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8000a96:	2006      	movs	r0, #6
 8000a98:	f002 f8c6 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa0:	f002 fcf6 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8000aa4:	2005      	movs	r0, #5
 8000aa6:	f002 f817 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aae:	f002 fcef 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f002 f8ee 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abc:	f002 fce8 	bl	8003490 <HAL_Delay>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <movement_R>:

// Number of Delay: 4
void movement_R(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f002 f83d 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f002 fcdd 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f002 f8a6 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae0:	f002 fcd6 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f001 fff7 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aee:	f002 fccf 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000af2:	2004      	movs	r0, #4
 8000af4:	f002 f8ce 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f002 fcc8 	bl	8003490 <HAL_Delay>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <movement_aR>:

// Number of Delay: 4
void movement_aR(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f002 f855 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b12:	f002 fcbd 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8000b16:	2004      	movs	r0, #4
 8000b18:	f002 f886 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b20:	f002 fcb6 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f001 ffd7 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2e:	f002 fcaf 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000b32:	2004      	movs	r0, #4
 8000b34:	f002 f8ae 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3c:	f002 fca8 	bl	8003490 <HAL_Delay>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <movement_L>:

// Number of Delay: 4
void movement_L(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	clockwise_90(west_front);
 8000b48:	2007      	movs	r0, #7
 8000b4a:	f001 fffd 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b52:	f002 fc9d 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8000b56:	2008      	movs	r0, #8
 8000b58:	f002 f866 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f002 fc96 	bl	8003490 <HAL_Delay>
	centre_0(west_front);
 8000b64:	2007      	movs	r0, #7
 8000b66:	f001 ffb7 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f002 fc8f 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f002 f88e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7c:	f002 fc88 	bl	8003490 <HAL_Delay>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <movement_aL>:

// Number of Delay: 4
void movement_aL(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	anticlockwise_90(west_front);
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f002 f815 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f002 fc7d 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8000b96:	2008      	movs	r0, #8
 8000b98:	f002 f846 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba0:	f002 fc76 	bl	8003490 <HAL_Delay>
	centre_0(west_front);
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f001 ff97 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000baa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bae:	f002 fc6f 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8000bb2:	2008      	movs	r0, #8
 8000bb4:	f002 f86e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f002 fc68 	bl	8003490 <HAL_Delay>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <movement_B>:

// Number of Delay: 4
void movement_B(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f001 ffbd 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd2:	f002 fc5d 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f002 f826 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f002 fc56 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f001 ff77 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bee:	f002 fc4f 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f002 f84e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f002 fc48 	bl	8003490 <HAL_Delay>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <movement_aB>:

// Number of Delay: 4
void movement_aB(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 ffd5 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f002 fc3d 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f002 f806 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c20:	f002 fc36 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f001 ff57 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2e:	f002 fc2f 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000c32:	2002      	movs	r0, #2
 8000c34:	f002 f82e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f002 fc28 	bl	8003490 <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <movement_U>:

// Number of Delay: 13
void movement_U(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000c48:	2004      	movs	r0, #4
 8000c4a:	f001 ffed 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f001 ffea 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f002 fc1a 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8000c5c:	2005      	movs	r0, #5
 8000c5e:	f001 ff73 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f001 ffa8 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6c:	f002 fc10 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000c70:	2004      	movs	r0, #4
 8000c72:	f002 f80f 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000c76:	2008      	movs	r0, #8
 8000c78:	f002 f80c 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f002 fc06 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f001 ffcf 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f001 ffcc 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c94:	f002 fbfc 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 ff1d 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8000c9e:	2005      	movs	r0, #5
 8000ca0:	f001 ff1a 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca8:	f002 fbf2 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f001 fff1 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f001 ffee 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f002 fbe8 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f001 ff41 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000cc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cca:	f002 fbe1 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8000cce:	2004      	movs	r0, #4
 8000cd0:	f001 ffaa 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000cd4:	2008      	movs	r0, #8
 8000cd6:	f001 ffa7 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cde:	f002 fbd7 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f001 ff68 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f001 ff2d 	bl	8002b48 <clockwise_90>
	centre_0(east_front);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f001 fef2 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000cf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf8:	f002 fbca 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000cfc:	2004      	movs	r0, #4
 8000cfe:	f001 ffc9 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000d02:	2008      	movs	r0, #8
 8000d04:	f001 ffc6 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0c:	f002 fbc0 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f001 ff89 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000d16:	2006      	movs	r0, #6
 8000d18:	f001 ff86 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f002 fbb6 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8000d24:	2005      	movs	r0, #5
 8000d26:	f001 fed7 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f001 fed4 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d34:	f002 fbac 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f001 ffab 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f001 ffa8 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d48:	f002 fba2 	bl	8003490 <HAL_Delay>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <movement_aU>:

// Number of Delay: 13
void movement_aU(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000d54:	2004      	movs	r0, #4
 8000d56:	f001 ff67 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000d5a:	2008      	movs	r0, #8
 8000d5c:	f001 ff64 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f002 fb94 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f001 feed 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f001 ff22 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d78:	f002 fb8a 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f001 ff89 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000d82:	2008      	movs	r0, #8
 8000d84:	f001 ff86 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d8c:	f002 fb80 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f001 ff49 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000d96:	2006      	movs	r0, #6
 8000d98:	f001 ff46 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da0:	f002 fb76 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 fe97 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8000daa:	2005      	movs	r0, #5
 8000dac:	f001 fe94 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000db0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db4:	f002 fb6c 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f001 ff6b 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000dbe:	2006      	movs	r0, #6
 8000dc0:	f001 ff68 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc8:	f002 fb62 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f001 fef3 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd6:	f002 fb5b 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f001 ff24 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(west_back);
 8000de0:	2008      	movs	r0, #8
 8000de2:	f001 ff21 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dea:	f002 fb51 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 8000dee:	2005      	movs	r0, #5
 8000df0:	f001 fee2 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f001 fea7 	bl	8002b48 <clockwise_90>
	centre_0(east_front);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f001 fe6c 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e04:	f002 fb44 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f001 ff43 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f001 ff40 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e18:	f002 fb3a 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f001 ff03 	bl	8002c28 <servo_pull>
//	HAL_Delay(DELAY_TIME_sP);
	servo_pull(south_back);
 8000e22:	2006      	movs	r0, #6
 8000e24:	f001 ff00 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2c:	f002 fb30 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8000e30:	2005      	movs	r0, #5
 8000e32:	f001 fe51 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f001 fe4e 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f002 fb26 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f001 ff25 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f001 ff22 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e54:	f002 fb1c 	bl	8003490 <HAL_Delay>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <movement_D>:

// Number of Delay: 13
void movement_D(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f001 fee1 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000e66:	20af      	movs	r0, #175	; 0xaf
 8000e68:	f002 fb12 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8000e6c:	2008      	movs	r0, #8
 8000e6e:	f001 fedb 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e76:	f002 fb0b 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f001 fe64 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f001 fe99 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8a:	f002 fb01 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f001 ff00 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000e94:	2008      	movs	r0, #8
 8000e96:	f001 fefd 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9e:	f002 faf7 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f001 fec0 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ea8:	20af      	movs	r0, #175	; 0xaf
 8000eaa:	f002 faf1 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f001 feba 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000eb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb8:	f002 faea 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f001 fe0b 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f001 fe08 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ecc:	f002 fae0 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f001 fedf 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000ed6:	2006      	movs	r0, #6
 8000ed8:	f001 fedc 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee0:	f002 fad6 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f001 fe2f 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000eea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eee:	f002 facf 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f001 fe98 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000ef8:	20af      	movs	r0, #175	; 0xaf
 8000efa:	f002 fac9 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8000efe:	2008      	movs	r0, #8
 8000f00:	f001 fe92 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f08:	f002 fac2 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f001 fe53 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f001 fe18 	bl	8002b48 <clockwise_90>
	centre_0(west_front);
 8000f18:	2007      	movs	r0, #7
 8000f1a:	f001 fddd 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f22:	f002 fab5 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000f26:	2004      	movs	r0, #4
 8000f28:	f001 feb4 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000f2c:	2008      	movs	r0, #8
 8000f2e:	f001 feb1 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f36:	f002 faab 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f001 fe74 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000f40:	20af      	movs	r0, #175	; 0xaf
 8000f42:	f002 faa5 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8000f46:	2006      	movs	r0, #6
 8000f48:	f001 fe6e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f002 fa9e 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8000f54:	2005      	movs	r0, #5
 8000f56:	f001 fdbf 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f001 fdbc 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f002 fa94 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f001 fe93 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f001 fe90 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f78:	f002 fa8a 	bl	8003490 <HAL_Delay>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <movement_aD>:

// Number of Delay: 13
void movement_aD(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f001 fe4f 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000f8a:	20af      	movs	r0, #175	; 0xaf
 8000f8c:	f002 fa80 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8000f90:	2008      	movs	r0, #8
 8000f92:	f001 fe49 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9a:	f002 fa79 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f001 fdd2 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fe07 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000faa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fae:	f002 fa6f 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f001 fe6e 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8000fb8:	2008      	movs	r0, #8
 8000fba:	f001 fe6b 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc2:	f002 fa65 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f001 fe2e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8000fcc:	20af      	movs	r0, #175	; 0xaf
 8000fce:	f002 fa5f 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f001 fe28 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f002 fa58 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 fd79 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 fd76 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff0:	f002 fa4e 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f001 fe4d 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f001 fe4a 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f002 fa44 	bl	8003490 <HAL_Delay>
	anticlockwise_90(west_front);
 8001008:	2007      	movs	r0, #7
 800100a:	f001 fdd5 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800100e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001012:	f002 fa3d 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001016:	2004      	movs	r0, #4
 8001018:	f001 fe06 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800101c:	20af      	movs	r0, #175	; 0xaf
 800101e:	f002 fa37 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001022:	2008      	movs	r0, #8
 8001024:	f001 fe00 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102c:	f002 fa30 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 8001030:	2005      	movs	r0, #5
 8001032:	f001 fdc1 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8001036:	2001      	movs	r0, #1
 8001038:	f001 fd86 	bl	8002b48 <clockwise_90>
	centre_0(west_front);
 800103c:	2007      	movs	r0, #7
 800103e:	f001 fd4b 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001046:	f002 fa23 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 800104a:	2004      	movs	r0, #4
 800104c:	f001 fe22 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001050:	2008      	movs	r0, #8
 8001052:	f001 fe1f 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105a:	f002 fa19 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 800105e:	2002      	movs	r0, #2
 8001060:	f001 fde2 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001064:	20af      	movs	r0, #175	; 0xaf
 8001066:	f002 fa13 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 800106a:	2006      	movs	r0, #6
 800106c:	f001 fddc 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001074:	f002 fa0c 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001078:	2005      	movs	r0, #5
 800107a:	f001 fd2d 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 800107e:	2001      	movs	r0, #1
 8001080:	f001 fd2a 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001084:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001088:	f002 fa02 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 800108c:	2002      	movs	r0, #2
 800108e:	f001 fe01 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001092:	2006      	movs	r0, #6
 8001094:	f001 fdfe 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f002 f9f8 	bl	8003490 <HAL_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <movement_F2>:

// Number of Delay: 8
void movement_F2(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 80010a8:	2006      	movs	r0, #6
 80010aa:	f001 fdbd 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80010ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b2:	f002 f9ed 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 80010b6:	2005      	movs	r0, #5
 80010b8:	f001 fd7e 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80010bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c0:	f002 f9e6 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 80010c4:	2006      	movs	r0, #6
 80010c6:	f001 fde5 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f002 f9df 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 80010d2:	2005      	movs	r0, #5
 80010d4:	f001 fd38 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80010d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80010dc:	f002 f9d8 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f001 fda1 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80010e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ea:	f002 f9d1 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f001 fcf2 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80010f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f8:	f002 f9ca 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 80010fc:	2006      	movs	r0, #6
 80010fe:	f001 fdc9 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001106:	f002 f9c3 	bl	8003490 <HAL_Delay>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}

0800110e <movement_aF2>:

// Number of Delay: 8
void movement_aF2(void) {
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8001112:	2006      	movs	r0, #6
 8001114:	f001 fd88 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111c:	f002 f9b8 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8001120:	2005      	movs	r0, #5
 8001122:	f001 fd11 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112a:	f002 f9b1 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 800112e:	2006      	movs	r0, #6
 8001130:	f001 fdb0 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f002 f9aa 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 800113c:	2005      	movs	r0, #5
 800113e:	f001 fd3b 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001142:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001146:	f002 f9a3 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 800114a:	2006      	movs	r0, #6
 800114c:	f001 fd6c 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001154:	f002 f99c 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001158:	2005      	movs	r0, #5
 800115a:	f001 fcbd 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800115e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001162:	f002 f995 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8001166:	2006      	movs	r0, #6
 8001168:	f001 fd94 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800116c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001170:	f002 f98e 	bl	8003490 <HAL_Delay>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <movement_R2>:

// Number of Delay: 8
void movement_R2(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 800117c:	2004      	movs	r0, #4
 800117e:	f001 fd53 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001186:	f002 f983 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 800118a:	2003      	movs	r0, #3
 800118c:	f001 fd14 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f002 f97c 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001198:	2004      	movs	r0, #4
 800119a:	f001 fd7b 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800119e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a2:	f002 f975 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f001 fcce 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80011ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80011b0:	f002 f96e 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 80011b4:	2004      	movs	r0, #4
 80011b6:	f001 fd37 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f002 f967 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f001 fc88 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80011c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011cc:	f002 f960 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80011d0:	2004      	movs	r0, #4
 80011d2:	f001 fd5f 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80011d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011da:	f002 f959 	bl	8003490 <HAL_Delay>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <movement_aR2>:

// Number of Delay: 8
void movement_aR2(void) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 80011e6:	2004      	movs	r0, #4
 80011e8:	f001 fd1e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f002 f94e 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f001 fca7 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80011fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fe:	f002 f947 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001202:	2004      	movs	r0, #4
 8001204:	f001 fd46 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120c:	f002 f940 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 8001210:	2003      	movs	r0, #3
 8001212:	f001 fcd1 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001216:	f44f 7061 	mov.w	r0, #900	; 0x384
 800121a:	f002 f939 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 800121e:	2004      	movs	r0, #4
 8001220:	f001 fd02 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001228:	f002 f932 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 800122c:	2003      	movs	r0, #3
 800122e:	f001 fc53 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001236:	f002 f92b 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 800123a:	2004      	movs	r0, #4
 800123c:	f001 fd2a 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f002 f924 	bl	8003490 <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <movement_L2>:

// Number of Delay: 8
void movement_L2(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001250:	2008      	movs	r0, #8
 8001252:	f001 fce9 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800125a:	f002 f919 	bl	8003490 <HAL_Delay>
	anticlockwise_90(west_front);
 800125e:	2007      	movs	r0, #7
 8001260:	f001 fcaa 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f002 f912 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 800126c:	2008      	movs	r0, #8
 800126e:	f001 fd11 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001276:	f002 f90b 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 800127a:	2007      	movs	r0, #7
 800127c:	f001 fc64 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001280:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001284:	f002 f904 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001288:	2008      	movs	r0, #8
 800128a:	f001 fccd 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800128e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001292:	f002 f8fd 	bl	8003490 <HAL_Delay>
	centre_0(west_front);
 8001296:	2007      	movs	r0, #7
 8001298:	f001 fc1e 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800129c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a0:	f002 f8f6 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f001 fcf5 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ae:	f002 f8ef 	bl	8003490 <HAL_Delay>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <movement_aL2>:

// Number of Delay: 8
void movement_aL2(void) {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 80012ba:	2008      	movs	r0, #8
 80012bc:	f001 fcb4 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c4:	f002 f8e4 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 80012c8:	2007      	movs	r0, #7
 80012ca:	f001 fc3d 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80012ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d2:	f002 f8dd 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 80012d6:	2008      	movs	r0, #8
 80012d8:	f001 fcdc 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80012dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e0:	f002 f8d6 	bl	8003490 <HAL_Delay>
	anticlockwise_90(west_front);
 80012e4:	2007      	movs	r0, #7
 80012e6:	f001 fc67 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80012ea:	f44f 7061 	mov.w	r0, #900	; 0x384
 80012ee:	f002 f8cf 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 80012f2:	2008      	movs	r0, #8
 80012f4:	f001 fc98 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80012f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fc:	f002 f8c8 	bl	8003490 <HAL_Delay>
	centre_0(west_front);
 8001300:	2007      	movs	r0, #7
 8001302:	f001 fbe9 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130a:	f002 f8c1 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 800130e:	2008      	movs	r0, #8
 8001310:	f001 fcc0 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f002 f8ba 	bl	8003490 <HAL_Delay>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <movement_B2>:

// Number of Delay: 8
void movement_B2(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001324:	2002      	movs	r0, #2
 8001326:	f001 fc7f 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f002 f8af 	bl	8003490 <HAL_Delay>
	anticlockwise_90(north_front);
 8001332:	2001      	movs	r0, #1
 8001334:	f001 fc40 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f002 f8a8 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001340:	2002      	movs	r0, #2
 8001342:	f001 fca7 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134a:	f002 f8a1 	bl	8003490 <HAL_Delay>
	clockwise_90(north_front);
 800134e:	2001      	movs	r0, #1
 8001350:	f001 fbfa 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001354:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001358:	f002 f89a 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 800135c:	2002      	movs	r0, #2
 800135e:	f001 fc63 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f002 f893 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 fbb4 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001374:	f002 f88c 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001378:	2002      	movs	r0, #2
 800137a:	f001 fc8b 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800137e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001382:	f002 f885 	bl	8003490 <HAL_Delay>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <movement_aB2>:

// Number of Delay: 8
void movement_aB2(void) {
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 800138e:	2002      	movs	r0, #2
 8001390:	f001 fc4a 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001398:	f002 f87a 	bl	8003490 <HAL_Delay>
	clockwise_90(north_front);
 800139c:	2001      	movs	r0, #1
 800139e:	f001 fbd3 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80013a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a6:	f002 f873 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f001 fc72 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b4:	f002 f86c 	bl	8003490 <HAL_Delay>
	anticlockwise_90(north_front);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f001 fbfd 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80013be:	f44f 7061 	mov.w	r0, #900	; 0x384
 80013c2:	f002 f865 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f001 fc2e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80013cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d0:	f002 f85e 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 fb7f 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80013da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013de:	f002 f857 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f001 fc56 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f002 f850 	bl	8003490 <HAL_Delay>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <movement_U2>:

// Number of Delay: 17
void movement_U2(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 80013f8:	2004      	movs	r0, #4
 80013fa:	f001 fc15 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80013fe:	20af      	movs	r0, #175	; 0xaf
 8001400:	f002 f846 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001404:	2008      	movs	r0, #8
 8001406:	f001 fc0f 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f002 f83f 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8001412:	2005      	movs	r0, #5
 8001414:	f001 fb98 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8001418:	2001      	movs	r0, #1
 800141a:	f001 fbcd 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800141e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001422:	f002 f835 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001426:	2004      	movs	r0, #4
 8001428:	f001 fc34 	bl	8002c94 <servo_push>
	servo_push(west_back);
 800142c:	2008      	movs	r0, #8
 800142e:	f001 fc31 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001436:	f002 f82b 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 800143a:	2002      	movs	r0, #2
 800143c:	f001 fbf4 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001440:	20af      	movs	r0, #175	; 0xaf
 8001442:	f002 f825 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001446:	2006      	movs	r0, #6
 8001448:	f001 fbee 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f002 f81e 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8001454:	2001      	movs	r0, #1
 8001456:	f001 fb3f 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 800145a:	2005      	movs	r0, #5
 800145c:	f001 fb3c 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001460:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001464:	f002 f814 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001468:	2002      	movs	r0, #2
 800146a:	f001 fc13 	bl	8002c94 <servo_push>
	servo_push(south_back);
 800146e:	2006      	movs	r0, #6
 8001470:	f001 fc10 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001478:	f002 f80a 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 800147c:	2004      	movs	r0, #4
 800147e:	f001 fbd3 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001486:	f002 f803 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 800148a:	2003      	movs	r0, #3
 800148c:	f001 fb94 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001494:	f001 fffc 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001498:	2004      	movs	r0, #4
 800149a:	f001 fbfb 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800149e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a2:	f001 fff5 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f001 fb4e 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80014ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80014b0:	f001 ffee 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 80014b4:	2004      	movs	r0, #4
 80014b6:	f001 fbb7 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80014ba:	20af      	movs	r0, #175	; 0xaf
 80014bc:	f001 ffe8 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 80014c0:	2008      	movs	r0, #8
 80014c2:	f001 fbb1 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f001 ffe1 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 80014ce:	2005      	movs	r0, #5
 80014d0:	f001 fb72 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f001 fb37 	bl	8002b48 <clockwise_90>
	centre_0(east_front);
 80014da:	2003      	movs	r0, #3
 80014dc:	f001 fafc 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f001 ffd4 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80014e8:	2004      	movs	r0, #4
 80014ea:	f001 fbd3 	bl	8002c94 <servo_push>
	servo_push(west_back);
 80014ee:	2008      	movs	r0, #8
 80014f0:	f001 fbd0 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80014f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f8:	f001 ffca 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f001 fb93 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001502:	20af      	movs	r0, #175	; 0xaf
 8001504:	f001 ffc4 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001508:	2006      	movs	r0, #6
 800150a:	f001 fb8d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800150e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001512:	f001 ffbd 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001516:	2005      	movs	r0, #5
 8001518:	f001 fade 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 800151c:	2001      	movs	r0, #1
 800151e:	f001 fadb 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001526:	f001 ffb3 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 800152a:	2002      	movs	r0, #2
 800152c:	f001 fbb2 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001530:	2006      	movs	r0, #6
 8001532:	f001 fbaf 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153a:	f001 ffa9 	bl	8003490 <HAL_Delay>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <movement_aU2>:

// Number of Delay: 17
void movement_aU2(void) {
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001546:	2004      	movs	r0, #4
 8001548:	f001 fb6e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800154c:	20af      	movs	r0, #175	; 0xaf
 800154e:	f001 ff9f 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001552:	2008      	movs	r0, #8
 8001554:	f001 fb68 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800155c:	f001 ff98 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8001560:	2005      	movs	r0, #5
 8001562:	f001 faf1 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8001566:	2001      	movs	r0, #1
 8001568:	f001 fb26 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800156c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001570:	f001 ff8e 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001574:	2004      	movs	r0, #4
 8001576:	f001 fb8d 	bl	8002c94 <servo_push>
	servo_push(west_back);
 800157a:	2008      	movs	r0, #8
 800157c:	f001 fb8a 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001584:	f001 ff84 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001588:	2002      	movs	r0, #2
 800158a:	f001 fb4d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800158e:	20af      	movs	r0, #175	; 0xaf
 8001590:	f001 ff7e 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001594:	2006      	movs	r0, #6
 8001596:	f001 fb47 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800159a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159e:	f001 ff77 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f001 fa98 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 80015a8:	2005      	movs	r0, #5
 80015aa:	f001 fa95 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f001 ff6d 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f001 fb6c 	bl	8002c94 <servo_push>
	servo_push(south_back);
 80015bc:	2006      	movs	r0, #6
 80015be:	f001 fb69 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80015c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c6:	f001 ff63 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 80015ca:	2004      	movs	r0, #4
 80015cc:	f001 fb2c 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80015d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d4:	f001 ff5c 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 80015d8:	2003      	movs	r0, #3
 80015da:	f001 fab5 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80015de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e2:	f001 ff55 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80015e6:	2004      	movs	r0, #4
 80015e8:	f001 fb54 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80015ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f0:	f001 ff4e 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f001 fadf 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 80015fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80015fe:	f001 ff47 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001602:	2004      	movs	r0, #4
 8001604:	f001 fb10 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001608:	20af      	movs	r0, #175	; 0xaf
 800160a:	f001 ff41 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 800160e:	2008      	movs	r0, #8
 8001610:	f001 fb0a 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001618:	f001 ff3a 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 800161c:	2005      	movs	r0, #5
 800161e:	f001 facb 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8001622:	2001      	movs	r0, #1
 8001624:	f001 fa90 	bl	8002b48 <clockwise_90>
	centre_0(east_front);
 8001628:	2003      	movs	r0, #3
 800162a:	f001 fa55 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800162e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001632:	f001 ff2d 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001636:	2004      	movs	r0, #4
 8001638:	f001 fb2c 	bl	8002c94 <servo_push>
	servo_push(west_back);
 800163c:	2008      	movs	r0, #8
 800163e:	f001 fb29 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001642:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001646:	f001 ff23 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 800164a:	2002      	movs	r0, #2
 800164c:	f001 faec 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001650:	20af      	movs	r0, #175	; 0xaf
 8001652:	f001 ff1d 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001656:	2006      	movs	r0, #6
 8001658:	f001 fae6 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800165c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001660:	f001 ff16 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001664:	2005      	movs	r0, #5
 8001666:	f001 fa37 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 800166a:	2001      	movs	r0, #1
 800166c:	f001 fa34 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001674:	f001 ff0c 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001678:	2002      	movs	r0, #2
 800167a:	f001 fb0b 	bl	8002c94 <servo_push>
	servo_push(south_back);
 800167e:	2006      	movs	r0, #6
 8001680:	f001 fb08 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001688:	f001 ff02 	bl	8003490 <HAL_Delay>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <movement_D2>:

// Number of Delay: 17
void movement_D2(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001694:	2004      	movs	r0, #4
 8001696:	f001 fac7 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800169a:	20af      	movs	r0, #175	; 0xaf
 800169c:	f001 fef8 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 80016a0:	2008      	movs	r0, #8
 80016a2:	f001 fac1 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80016a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016aa:	f001 fef1 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 80016ae:	2005      	movs	r0, #5
 80016b0:	f001 fa4a 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f001 fa7f 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80016ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016be:	f001 fee7 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80016c2:	2004      	movs	r0, #4
 80016c4:	f001 fae6 	bl	8002c94 <servo_push>
	servo_push(west_back);
 80016c8:	2008      	movs	r0, #8
 80016ca:	f001 fae3 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80016ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d2:	f001 fedd 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f001 faa6 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80016dc:	20af      	movs	r0, #175	; 0xaf
 80016de:	f001 fed7 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 80016e2:	2006      	movs	r0, #6
 80016e4:	f001 faa0 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80016e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ec:	f001 fed0 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f9f1 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 80016f6:	2005      	movs	r0, #5
 80016f8:	f001 f9ee 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f001 fec6 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001704:	2002      	movs	r0, #2
 8001706:	f001 fac5 	bl	8002c94 <servo_push>
	servo_push(south_back);
 800170a:	2006      	movs	r0, #6
 800170c:	f001 fac2 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001714:	f001 febc 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001718:	2008      	movs	r0, #8
 800171a:	f001 fa85 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800171e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001722:	f001 feb5 	bl	8003490 <HAL_Delay>
	anticlockwise_90(west_front);
 8001726:	2007      	movs	r0, #7
 8001728:	f001 fa46 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f001 feae 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8001734:	2008      	movs	r0, #8
 8001736:	f001 faad 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800173a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173e:	f001 fea7 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 8001742:	2007      	movs	r0, #7
 8001744:	f001 fa00 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001748:	f44f 7061 	mov.w	r0, #900	; 0x384
 800174c:	f001 fea0 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001750:	2004      	movs	r0, #4
 8001752:	f001 fa69 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001756:	20af      	movs	r0, #175	; 0xaf
 8001758:	f001 fe9a 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 800175c:	2008      	movs	r0, #8
 800175e:	f001 fa63 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001766:	f001 fe93 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 800176a:	2005      	movs	r0, #5
 800176c:	f001 fa24 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8001770:	2001      	movs	r0, #1
 8001772:	f001 f9e9 	bl	8002b48 <clockwise_90>
	centre_0(west_front);
 8001776:	2007      	movs	r0, #7
 8001778:	f001 f9ae 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800177c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001780:	f001 fe86 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001784:	2004      	movs	r0, #4
 8001786:	f001 fa85 	bl	8002c94 <servo_push>
	servo_push(west_back);
 800178a:	2008      	movs	r0, #8
 800178c:	f001 fa82 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001794:	f001 fe7c 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001798:	2002      	movs	r0, #2
 800179a:	f001 fa45 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800179e:	20af      	movs	r0, #175	; 0xaf
 80017a0:	f001 fe76 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 80017a4:	2006      	movs	r0, #6
 80017a6:	f001 fa3f 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ae:	f001 fe6f 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 80017b2:	2005      	movs	r0, #5
 80017b4:	f001 f990 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f001 f98d 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80017be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c2:	f001 fe65 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f001 fa64 	bl	8002c94 <servo_push>
	servo_push(south_back);
 80017cc:	2006      	movs	r0, #6
 80017ce:	f001 fa61 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80017d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017d6:	f001 fe5b 	bl	8003490 <HAL_Delay>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <movement_aD2>:

// Number of Delay: 17
void movement_aD2(void) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 80017e2:	2004      	movs	r0, #4
 80017e4:	f001 fa20 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80017e8:	20af      	movs	r0, #175	; 0xaf
 80017ea:	f001 fe51 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 80017ee:	2008      	movs	r0, #8
 80017f0:	f001 fa1a 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80017f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f8:	f001 fe4a 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 80017fc:	2005      	movs	r0, #5
 80017fe:	f001 f9a3 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8001802:	2001      	movs	r0, #1
 8001804:	f001 f9d8 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180c:	f001 fe40 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001810:	2004      	movs	r0, #4
 8001812:	f001 fa3f 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001816:	2008      	movs	r0, #8
 8001818:	f001 fa3c 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800181c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001820:	f001 fe36 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001824:	2002      	movs	r0, #2
 8001826:	f001 f9ff 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 800182a:	20af      	movs	r0, #175	; 0xaf
 800182c:	f001 fe30 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001830:	2006      	movs	r0, #6
 8001832:	f001 f9f9 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800183a:	f001 fe29 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 800183e:	2001      	movs	r0, #1
 8001840:	f001 f94a 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8001844:	2005      	movs	r0, #5
 8001846:	f001 f947 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f001 fe1f 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001852:	2002      	movs	r0, #2
 8001854:	f001 fa1e 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001858:	2006      	movs	r0, #6
 800185a:	f001 fa1b 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800185e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001862:	f001 fe15 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001866:	2008      	movs	r0, #8
 8001868:	f001 f9de 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800186c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001870:	f001 fe0e 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 8001874:	2007      	movs	r0, #7
 8001876:	f001 f967 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 800187a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187e:	f001 fe07 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8001882:	2008      	movs	r0, #8
 8001884:	f001 fa06 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188c:	f001 fe00 	bl	8003490 <HAL_Delay>
	anticlockwise_90(west_front);
 8001890:	2007      	movs	r0, #7
 8001892:	f001 f991 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_180);
 8001896:	f44f 7061 	mov.w	r0, #900	; 0x384
 800189a:	f001 fdf9 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 800189e:	2004      	movs	r0, #4
 80018a0:	f001 f9c2 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80018a4:	20af      	movs	r0, #175	; 0xaf
 80018a6:	f001 fdf3 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 80018aa:	2008      	movs	r0, #8
 80018ac:	f001 f9bc 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80018b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b4:	f001 fdec 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 80018b8:	2005      	movs	r0, #5
 80018ba:	f001 f97d 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 80018be:	2001      	movs	r0, #1
 80018c0:	f001 f942 	bl	8002b48 <clockwise_90>
	centre_0(west_front);
 80018c4:	2007      	movs	r0, #7
 80018c6:	f001 f907 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80018ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ce:	f001 fddf 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80018d2:	2004      	movs	r0, #4
 80018d4:	f001 f9de 	bl	8002c94 <servo_push>
	servo_push(west_back);
 80018d8:	2008      	movs	r0, #8
 80018da:	f001 f9db 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80018de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e2:	f001 fdd5 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 80018e6:	2002      	movs	r0, #2
 80018e8:	f001 f99e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80018ec:	20af      	movs	r0, #175	; 0xaf
 80018ee:	f001 fdcf 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 80018f2:	2006      	movs	r0, #6
 80018f4:	f001 f998 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80018f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fc:	f001 fdc8 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001900:	2005      	movs	r0, #5
 8001902:	f001 f8e9 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8001906:	2001      	movs	r0, #1
 8001908:	f001 f8e6 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 800190c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001910:	f001 fdbe 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001914:	2002      	movs	r0, #2
 8001916:	f001 f9bd 	bl	8002c94 <servo_push>
	servo_push(south_back);
 800191a:	2006      	movs	r0, #6
 800191c:	f001 f9ba 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_90);
 8001920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001924:	f001 fdb4 	bl	8003490 <HAL_Delay>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <movement_X>:

// Number of Delay: 6
void movement_X(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001930:	2002      	movs	r0, #2
 8001932:	f001 f979 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001936:	20af      	movs	r0, #175	; 0xaf
 8001938:	f001 fdaa 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 800193c:	2006      	movs	r0, #6
 800193e:	f001 f973 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001946:	f001 fda3 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 800194a:	2003      	movs	r0, #3
 800194c:	f001 f8fc 	bl	8002b48 <clockwise_90>
	anticlockwise_90(west_front);
 8001950:	2007      	movs	r0, #7
 8001952:	f001 f931 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f001 fd99 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 800195e:	2002      	movs	r0, #2
 8001960:	f001 f998 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001964:	2006      	movs	r0, #6
 8001966:	f001 f995 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800196a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196e:	f001 fd8f 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001972:	2004      	movs	r0, #4
 8001974:	f001 f958 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001978:	20af      	movs	r0, #175	; 0xaf
 800197a:	f001 fd89 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 800197e:	2008      	movs	r0, #8
 8001980:	f001 f952 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001988:	f001 fd82 	bl	8003490 <HAL_Delay>
	centre_0(west_front);
 800198c:	2007      	movs	r0, #7
 800198e:	f001 f8a3 	bl	8002ad8 <centre_0>
	centre_0(east_front);
 8001992:	2003      	movs	r0, #3
 8001994:	f001 f8a0 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800199c:	f001 fd78 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 80019a0:	2004      	movs	r0, #4
 80019a2:	f001 f977 	bl	8002c94 <servo_push>
	servo_push(west_back);
 80019a6:	2008      	movs	r0, #8
 80019a8:	f001 f974 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80019ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b0:	f001 fd6e 	bl	8003490 <HAL_Delay>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <movement_aX>:

// Number of Delay: 6
void movement_aX(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 80019bc:	2002      	movs	r0, #2
 80019be:	f001 f933 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 80019c2:	20af      	movs	r0, #175	; 0xaf
 80019c4:	f001 fd64 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 80019c8:	2006      	movs	r0, #6
 80019ca:	f001 f92d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80019ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d2:	f001 fd5d 	bl	8003490 <HAL_Delay>
	clockwise_90(west_front);
 80019d6:	2007      	movs	r0, #7
 80019d8:	f001 f8b6 	bl	8002b48 <clockwise_90>
	anticlockwise_90(east_front);
 80019dc:	2003      	movs	r0, #3
 80019de:	f001 f8eb 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 80019e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e6:	f001 fd53 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f001 f952 	bl	8002c94 <servo_push>
	servo_push(south_back);
 80019f0:	2006      	movs	r0, #6
 80019f2:	f001 f94f 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80019f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019fa:	f001 fd49 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 80019fe:	2004      	movs	r0, #4
 8001a00:	f001 f912 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001a04:	20af      	movs	r0, #175	; 0xaf
 8001a06:	f001 fd43 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001a0a:	2008      	movs	r0, #8
 8001a0c:	f001 f90c 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a14:	f001 fd3c 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f001 f85d 	bl	8002ad8 <centre_0>
	centre_0(west_front);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f001 f85a 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a28:	f001 fd32 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001a2c:	2004      	movs	r0, #4
 8001a2e:	f001 f931 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001a32:	2008      	movs	r0, #8
 8001a34:	f001 f92e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3c:	f001 fd28 	bl	8003490 <HAL_Delay>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <movement_Y>:

// Number of Delay: 18
void movement_Y(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	movement_X();
 8001a48:	f7ff ff70 	bl	800192c <movement_X>
	movement_aZ();
 8001a4c:	f000 f854 	bl	8001af8 <movement_aZ>
	movement_aX();
 8001a50:	f7ff ffb2 	bl	80019b8 <movement_aX>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <movement_aY>:

// Number of Delay: 18
void movement_aY(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	movement_X();
 8001a5c:	f7ff ff66 	bl	800192c <movement_X>
	movement_Z();
 8001a60:	f000 f804 	bl	8001a6c <movement_Z>
	movement_aX();
 8001a64:	f7ff ffa8 	bl	80019b8 <movement_aX>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <movement_Z>:

// Number of Delay: 6
void movement_Z(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001a70:	2004      	movs	r0, #4
 8001a72:	f001 f8d9 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001a76:	20af      	movs	r0, #175	; 0xaf
 8001a78:	f001 fd0a 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001a7c:	2008      	movs	r0, #8
 8001a7e:	f001 f8d3 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a86:	f001 fd03 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8001a8a:	2005      	movs	r0, #5
 8001a8c:	f001 f85c 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f001 f891 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9a:	f001 fcf9 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	f001 f8f8 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001aa4:	2008      	movs	r0, #8
 8001aa6:	f001 f8f5 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aae:	f001 fcef 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f001 f8b8 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001ab8:	20af      	movs	r0, #175	; 0xaf
 8001aba:	f001 fce9 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001abe:	2006      	movs	r0, #6
 8001ac0:	f001 f8b2 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac8:	f001 fce2 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001acc:	2005      	movs	r0, #5
 8001ace:	f001 f803 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f001 f800 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001adc:	f001 fcd8 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f001 f8d7 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001ae6:	2006      	movs	r0, #6
 8001ae8:	f001 f8d4 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af0:	f001 fcce 	bl	8003490 <HAL_Delay>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <movement_aZ>:

// Number of Delay: 6
void movement_aZ(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8001afc:	2004      	movs	r0, #4
 8001afe:	f001 f893 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001b02:	20af      	movs	r0, #175	; 0xaf
 8001b04:	f001 fcc4 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001b08:	2008      	movs	r0, #8
 8001b0a:	f001 f88d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b12:	f001 fcbd 	bl	8003490 <HAL_Delay>
	anticlockwise_90(south_front);
 8001b16:	2005      	movs	r0, #5
 8001b18:	f001 f84e 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(north_front);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f001 f813 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b26:	f001 fcb3 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f001 f8b2 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001b30:	2008      	movs	r0, #8
 8001b32:	f001 f8af 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001b36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b3a:	f001 fca9 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f001 f872 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001b44:	20af      	movs	r0, #175	; 0xaf
 8001b46:	f001 fca3 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001b4a:	2006      	movs	r0, #6
 8001b4c:	f001 f86c 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b54:	f001 fc9c 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f000 ffbd 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f000 ffba 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b68:	f001 fc92 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f001 f891 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001b72:	2006      	movs	r0, #6
 8001b74:	f001 f88e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b7c:	f001 fc88 	bl	8003490 <HAL_Delay>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <movement_M>:

// Number of Delay: 4
void movement_M(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 ffdd 	bl	8002b48 <clockwise_90>
	anticlockwise_90(west_front);
 8001b8e:	2007      	movs	r0, #7
 8001b90:	f001 f812 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b98:	f001 fc7a 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f001 f843 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001ba2:	20af      	movs	r0, #175	; 0xaf
 8001ba4:	f001 fc74 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001ba8:	2006      	movs	r0, #6
 8001baa:	f001 f83d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001bae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb2:	f001 fc6d 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f000 ff8e 	bl	8002ad8 <centre_0>
	centre_0(west_front);
 8001bbc:	2007      	movs	r0, #7
 8001bbe:	f000 ff8b 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc6:	f001 fc63 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f001 f862 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f001 f85f 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bda:	f001 fc59 	bl	8003490 <HAL_Delay>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <movement_aM>:

// Number of Delay: 4
void movement_aM(void) {
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f000 ffe6 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(west_front);
 8001bec:	2007      	movs	r0, #7
 8001bee:	f000 ffab 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001bf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf6:	f001 fc4b 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f001 f814 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001c00:	20af      	movs	r0, #175	; 0xaf
 8001c02:	f001 fc45 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001c06:	2006      	movs	r0, #6
 8001c08:	f001 f80e 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c10:	f001 fc3e 	bl	8003490 <HAL_Delay>
	centre_0(east_front);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 ff5f 	bl	8002ad8 <centre_0>
	centre_0(west_front);
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f000 ff5c 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c24:	f001 fc34 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f001 f833 	bl	8002c94 <servo_push>
	servo_push(south_back);
 8001c2e:	2006      	movs	r0, #6
 8001c30:	f001 f830 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c38:	f001 fc2a 	bl	8003490 <HAL_Delay>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <movement_E>:

// Number of Delay: 14
void movement_E(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	movement_Z();
 8001c44:	f7ff ff12 	bl	8001a6c <movement_Z>
	movement_M();
 8001c48:	f7ff ff9c 	bl	8001b84 <movement_M>
	movement_aZ();
 8001c4c:	f7ff ff54 	bl	8001af8 <movement_aZ>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <movement_aE>:

// Number of Delay: 14
void movement_aE(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	movement_aZ();
 8001c58:	f7ff ff4e 	bl	8001af8 <movement_aZ>
	movement_M();
 8001c5c:	f7ff ff92 	bl	8001b84 <movement_M>
	movement_Z();
 8001c60:	f7ff ff04 	bl	8001a6c <movement_Z>
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <movement_S>:

// Number of Delay: 4
void movement_S(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 ff6b 	bl	8002b48 <clockwise_90>
	anticlockwise_90(south_front);
 8001c72:	2005      	movs	r0, #5
 8001c74:	f000 ffa0 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c7c:	f001 fc08 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001c80:	2004      	movs	r0, #4
 8001c82:	f000 ffd1 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001c86:	20af      	movs	r0, #175	; 0xaf
 8001c88:	f001 fc02 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001c8c:	2008      	movs	r0, #8
 8001c8e:	f000 ffcb 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c96:	f001 fbfb 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 ff1c 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f000 ff19 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001caa:	f001 fbf1 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001cae:	2004      	movs	r0, #4
 8001cb0:	f000 fff0 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001cb4:	2008      	movs	r0, #8
 8001cb6:	f000 ffed 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cbe:	f001 fbe7 	bl	8003490 <HAL_Delay>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <movement_aS>:

// Number of Delay: 4
void movement_aS(void) {
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 ff74 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(south_front);
 8001cd0:	2005      	movs	r0, #5
 8001cd2:	f000 ff39 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cda:	f001 fbd9 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001cde:	2004      	movs	r0, #4
 8001ce0:	f000 ffa2 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001ce4:	20af      	movs	r0, #175	; 0xaf
 8001ce6:	f001 fbd3 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001cea:	2008      	movs	r0, #8
 8001cec:	f000 ff9c 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cf4:	f001 fbcc 	bl	8003490 <HAL_Delay>
	centre_0(north_front);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f000 feed 	bl	8002ad8 <centre_0>
	centre_0(south_front);
 8001cfe:	2005      	movs	r0, #5
 8001d00:	f000 feea 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f001 fbc2 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001d0c:	2004      	movs	r0, #4
 8001d0e:	f000 ffc1 	bl	8002c94 <servo_push>
	servo_push(west_back);
 8001d12:	2008      	movs	r0, #8
 8001d14:	f000 ffbe 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d1c:	f001 fbb8 	bl	8003490 <HAL_Delay>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <movement_u>:

// Number of Delay: 31
void movement_u(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	movement_D();
 8001d28:	f7ff f898 	bl	8000e5c <movement_D>
	movement_Y();
 8001d2c:	f7ff fe8a 	bl	8001a44 <movement_Y>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <movement_au>:

// Number of Delay: 31
void movement_au(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	movement_aD();
 8001d38:	f7ff f922 	bl	8000f80 <movement_aD>
	movement_aY();
 8001d3c:	f7ff fe8c 	bl	8001a58 <movement_aY>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <movement_l>:

// Number of Delay: 10
void movement_l(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	movement_R();
 8001d48:	f7fe febc 	bl	8000ac4 <movement_R>
	movement_aX();
 8001d4c:	f7ff fe34 	bl	80019b8 <movement_aX>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <movement_al>:

// Number of Delay: 10
void movement_al(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	movement_aR();
 8001d58:	f7fe fed4 	bl	8000b04 <movement_aR>
	movement_X();
 8001d5c:	f7ff fde6 	bl	800192c <movement_X>
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <movement_f>:

// Number of Delay: 10
void movement_f(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	movement_B();
 8001d68:	f7fe ff2c 	bl	8000bc4 <movement_B>
	movement_Z();
 8001d6c:	f7ff fe7e 	bl	8001a6c <movement_Z>
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <movement_af>:

// Number of Delay: 10
void movement_af(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	movement_aB();
 8001d78:	f7fe ff44 	bl	8000c04 <movement_aB>
	movement_aZ();
 8001d7c:	f7ff febc 	bl	8001af8 <movement_aZ>
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <movement_r>:

// Number of Delay: 10
void movement_r(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	movement_L();
 8001d88:	f7fe fedc 	bl	8000b44 <movement_L>
	movement_X();
 8001d8c:	f7ff fdce 	bl	800192c <movement_X>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <movement_ar>:

// Number of Delay: 10
void movement_ar(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	movement_aL();
 8001d98:	f7fe fef4 	bl	8000b84 <movement_aL>
	movement_aX();
 8001d9c:	f7ff fe0c 	bl	80019b8 <movement_aX>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <movement_b>:

// Number of Delay: 10
void movement_b(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	movement_F();
 8001da8:	f7fe fe4c 	bl	8000a44 <movement_F>
	movement_aZ();
 8001dac:	f7ff fea4 	bl	8001af8 <movement_aZ>
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <movement_ab>:

// Number of Delay: 10
void movement_ab(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	movement_aF();
 8001db8:	f7fe fe64 	bl	8000a84 <movement_aF>
	movement_Z();
 8001dbc:	f7ff fe56 	bl	8001a6c <movement_Z>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <movement_d>:

// Number of Delay: 31
void movement_d(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	movement_U();
 8001dc8:	f7fe ff3c 	bl	8000c44 <movement_U>
	movement_aY();
 8001dcc:	f7ff fe44 	bl	8001a58 <movement_aY>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <movement_ad>:

// Number of Delay: 31
void movement_ad(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	movement_aU();
 8001dd8:	f7fe ffba 	bl	8000d50 <movement_aU>
	movement_Y();
 8001ddc:	f7ff fe32 	bl	8001a44 <movement_Y>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <movement_scan_up>:

void movement_scan_up(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001de8:	2002      	movs	r0, #2
 8001dea:	f000 ff1d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001dee:	20af      	movs	r0, #175	; 0xaf
 8001df0:	f001 fb4e 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001df4:	2006      	movs	r0, #6
 8001df6:	f000 ff17 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dfe:	f001 fb47 	bl	8003490 <HAL_Delay>
	clockwise_90(south_front);
 8001e02:	2005      	movs	r0, #5
 8001e04:	f000 fea0 	bl	8002b48 <clockwise_90>
	anticlockwise_90(north_front);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f000 fed5 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e12:	f001 fb3d 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001e16:	2002      	movs	r0, #2
 8001e18:	f000 ff3c 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001e1c:	20af      	movs	r0, #175	; 0xaf
 8001e1e:	f001 fb37 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8001e22:	2006      	movs	r0, #6
 8001e24:	f000 ff36 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e2c:	f001 fb30 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001e30:	2004      	movs	r0, #4
 8001e32:	f000 fef9 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001e36:	20af      	movs	r0, #175	; 0xaf
 8001e38:	f001 fb2a 	bl	8003490 <HAL_Delay>
	servo_pull(west_back);
 8001e3c:	2008      	movs	r0, #8
 8001e3e:	f000 fef3 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e46:	f001 fb23 	bl	8003490 <HAL_Delay>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <movement_scan_up_r>:

void movement_scan_up_r(void) {
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
	servo_push(east_back);
 8001e52:	2004      	movs	r0, #4
 8001e54:	f000 ff1e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001e58:	20af      	movs	r0, #175	; 0xaf
 8001e5a:	f001 fb19 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8001e5e:	2008      	movs	r0, #8
 8001e60:	f000 ff18 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e68:	f001 fb12 	bl	8003490 <HAL_Delay>
	servo_pull(north_back);
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f000 fedb 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001e72:	20af      	movs	r0, #175	; 0xaf
 8001e74:	f001 fb0c 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001e78:	2006      	movs	r0, #6
 8001e7a:	f000 fed5 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e82:	f001 fb05 	bl	8003490 <HAL_Delay>
	centre_0(south_front);
 8001e86:	2005      	movs	r0, #5
 8001e88:	f000 fe26 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 fe23 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e96:	f001 fafb 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f000 fefa 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001ea0:	20af      	movs	r0, #175	; 0xaf
 8001ea2:	f001 faf5 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f000 fef4 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb0:	f001 faee 	bl	8003490 <HAL_Delay>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <movement_scan_north>:

void movement_scan_north(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f000 feb3 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001ec2:	20af      	movs	r0, #175	; 0xaf
 8001ec4:	f001 fae4 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001ec8:	2006      	movs	r0, #6
 8001eca:	f000 fead 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed2:	f001 fadd 	bl	8003490 <HAL_Delay>
	anticlockwise_90(east_front);
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	f000 fe6e 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(west_front);
 8001edc:	2007      	movs	r0, #7
 8001ede:	f000 fe33 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee6:	f001 fad3 	bl	8003490 <HAL_Delay>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}

08001eee <movement_scan_north_r>:

void movement_scan_north_r(void) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
	centre_0(west_front);
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f000 fdf0 	bl	8002ad8 <centre_0>
	centre_0(east_front);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 fded 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f02:	f001 fac5 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f000 fec4 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001f0c:	20af      	movs	r0, #175	; 0xaf
 8001f0e:	f001 fabf 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8001f12:	2006      	movs	r0, #6
 8001f14:	f000 febe 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f1c:	f001 fab8 	bl	8003490 <HAL_Delay>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <movement_scan_east>:

void movement_scan_east(void) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8001f28:	2008      	movs	r0, #8
 8001f2a:	f000 fe7d 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001f2e:	20af      	movs	r0, #175	; 0xaf
 8001f30:	f001 faae 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8001f34:	2004      	movs	r0, #4
 8001f36:	f000 fe77 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3e:	f001 faa7 	bl	8003490 <HAL_Delay>
	clockwise_90(north_front);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fe00 	bl	8002b48 <clockwise_90>
	anticlockwise_90(south_front);
 8001f48:	2005      	movs	r0, #5
 8001f4a:	f000 fe35 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f52:	f001 fa9d 	bl	8003490 <HAL_Delay>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <movement_scan_east_r>:

void movement_scan_east_r(void) {
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
	centre_0(south_front);
 8001f5e:	2005      	movs	r0, #5
 8001f60:	f000 fdba 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f000 fdb7 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f6e:	f001 fa8f 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 8001f72:	2008      	movs	r0, #8
 8001f74:	f000 fe8e 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001f78:	20af      	movs	r0, #175	; 0xaf
 8001f7a:	f001 fa89 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f000 fe88 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f88:	f001 fa82 	bl	8003490 <HAL_Delay>
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <movement_scan_south>:

void movement_scan_south(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	servo_pull(north_back);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f000 fe47 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8001f9a:	20af      	movs	r0, #175	; 0xaf
 8001f9c:	f001 fa78 	bl	8003490 <HAL_Delay>
	servo_pull(south_back);
 8001fa0:	2006      	movs	r0, #6
 8001fa2:	f000 fe41 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001faa:	f001 fa71 	bl	8003490 <HAL_Delay>
	clockwise_90(east_front);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f000 fdca 	bl	8002b48 <clockwise_90>
	anticlockwise_90(west_front);
 8001fb4:	2007      	movs	r0, #7
 8001fb6:	f000 fdff 	bl	8002bb8 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001fba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fbe:	f001 fa67 	bl	8003490 <HAL_Delay>
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <movement_scan_south_r>:

void movement_scan_south_r(void) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
	centre_0(west_front);
 8001fca:	2007      	movs	r0, #7
 8001fcc:	f000 fd84 	bl	8002ad8 <centre_0>
	centre_0(east_front);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 fd81 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001fd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fda:	f001 fa59 	bl	8003490 <HAL_Delay>
	servo_push(north_back);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f000 fe58 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8001fe4:	20af      	movs	r0, #175	; 0xaf
 8001fe6:	f001 fa53 	bl	8003490 <HAL_Delay>
	servo_push(south_back);
 8001fea:	2006      	movs	r0, #6
 8001fec:	f000 fe52 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff4:	f001 fa4c 	bl	8003490 <HAL_Delay>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <movement_scan_west>:

void movement_scan_west(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8002000:	2008      	movs	r0, #8
 8002002:	f000 fe11 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8002006:	20af      	movs	r0, #175	; 0xaf
 8002008:	f001 fa42 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 800200c:	2004      	movs	r0, #4
 800200e:	f000 fe0b 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002016:	f001 fa3b 	bl	8003490 <HAL_Delay>
	anticlockwise_90(north_front);
 800201a:	2001      	movs	r0, #1
 800201c:	f000 fdcc 	bl	8002bb8 <anticlockwise_90>
	clockwise_90(south_front);
 8002020:	2005      	movs	r0, #5
 8002022:	f000 fd91 	bl	8002b48 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8002026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202a:	f001 fa31 	bl	8003490 <HAL_Delay>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}

08002032 <movement_scan_west_r>:

void movement_scan_west_r(void) {
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
	centre_0(south_front);
 8002036:	2005      	movs	r0, #5
 8002038:	f000 fd4e 	bl	8002ad8 <centre_0>
	centre_0(north_front);
 800203c:	2001      	movs	r0, #1
 800203e:	f000 fd4b 	bl	8002ad8 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8002042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002046:	f001 fa23 	bl	8003490 <HAL_Delay>
	servo_push(west_back);
 800204a:	2008      	movs	r0, #8
 800204c:	f000 fe22 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_sP);
 8002050:	20af      	movs	r0, #175	; 0xaf
 8002052:	f001 fa1d 	bl	8003490 <HAL_Delay>
	servo_push(east_back);
 8002056:	2004      	movs	r0, #4
 8002058:	f000 fe1c 	bl	8002c94 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800205c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002060:	f001 fa16 	bl	8003490 <HAL_Delay>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <movement_scan_down>:

void movement_scan_down(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	movement_X();
 800206c:	f7ff fc5e 	bl	800192c <movement_X>
	movement_X();
 8002070:	f7ff fc5c 	bl	800192c <movement_X>
	movement_scan_up();
 8002074:	f7ff feb6 	bl	8001de4 <movement_scan_up>
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <movement_scan_down_r>:

void movement_scan_down_r(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	movement_scan_up_r();
 8002080:	f7ff fee5 	bl	8001e4e <movement_scan_up_r>
	movement_X();
 8002084:	f7ff fc52 	bl	800192c <movement_X>
	movement_X();
 8002088:	f7ff fc50 	bl	800192c <movement_X>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <splitCharArray>:
 *
 * @param src[] string
 * @param target[][SIZE_OF_ONE_MOVEMENT] an array of string
 * @return number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 */
int splitCharArray(char src[], char target[][SIZE_OF_ONE_MOVEMENT]) {
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    int pos = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
    int index = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
    int num = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
    while (src[pos] != ENDING_CHAR) {
 80020a6:	e026      	b.n	80020f6 <splitCharArray+0x66>
        if (src[pos] != DELIMETER) {
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d00e      	beq.n	80020d2 <splitCharArray+0x42>
            target[index][num++] = src[pos];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	18d1      	adds	r1, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1c58      	adds	r0, r3, #1
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	7809      	ldrb	r1, [r1, #0]
 80020ce:	54d1      	strb	r1, [r2, r3]
 80020d0:	e00e      	b.n	80020f0 <splitCharArray+0x60>
        } else {
            target[index][num] = END_OF_CHAR;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	441a      	add	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
            index++;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3301      	adds	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
            num = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
        }
        pos++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
    while (src[pos] != ENDING_CHAR) {
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b23      	cmp	r3, #35	; 0x23
 8002100:	d1d2      	bne.n	80020a8 <splitCharArray+0x18>
    }
    target[index][num] = END_OF_CHAR;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	441a      	add	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    index++;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3301      	adds	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
    return index;
 800211c:	693b      	ldr	r3, [r7, #16]
}
 800211e:	4618      	mov	r0, r3
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <ReadInput>:
 *
 * @param input[] string of input
 * @param *size number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 * @param listOfCommand[][SIZE_OF_ONE_MOVEMENT] string that store different movements into seperated rows
 */
void ReadInput(char input[], int *size, char listOfCommand[][SIZE_OF_ONE_MOVEMENT]) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart1, input, sizeof(input), 0xFFFF);
 8002134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002138:	2204      	movs	r2, #4
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <ReadInput+0x30>)
 800213e:	f002 ffd0 	bl	80050e2 <HAL_UART_Receive>
    (*size) = splitCharArray(input, listOfCommand);
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff ffa3 	bl	8002090 <splitCharArray>
 800214a:	4602      	mov	r2, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000014c 	.word	0x2000014c

0800215c <makeOneMovement>:
/*
 * Perform one movement according to character array
 *
 * @param Movement[SIZE_OF_ONE_MOVEMENT] character array that store one command of movement
 */
void makeOneMovement(char Movement[]) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	switch (Movement[0]) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3b42      	subs	r3, #66	; 0x42
 800216a:	2b33      	cmp	r3, #51	; 0x33
 800216c:	f200 82dc 	bhi.w	8002728 <makeOneMovement+0x5cc>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <makeOneMovement+0x1c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	08002309 	.word	0x08002309
 800217c:	08002729 	.word	0x08002729
 8002180:	08002389 	.word	0x08002389
 8002184:	080024e9 	.word	0x080024e9
 8002188:	08002249 	.word	0x08002249
 800218c:	08002729 	.word	0x08002729
 8002190:	08002729 	.word	0x08002729
 8002194:	08002729 	.word	0x08002729
 8002198:	08002729 	.word	0x08002729
 800219c:	08002729 	.word	0x08002729
 80021a0:	080022c9 	.word	0x080022c9
 80021a4:	080024a1 	.word	0x080024a1
 80021a8:	08002729 	.word	0x08002729
 80021ac:	08002729 	.word	0x08002729
 80021b0:	08002729 	.word	0x08002729
 80021b4:	08002729 	.word	0x08002729
 80021b8:	08002289 	.word	0x08002289
 80021bc:	08002531 	.word	0x08002531
 80021c0:	08002729 	.word	0x08002729
 80021c4:	08002349 	.word	0x08002349
 80021c8:	08002729 	.word	0x08002729
 80021cc:	08002729 	.word	0x08002729
 80021d0:	080023c9 	.word	0x080023c9
 80021d4:	08002411 	.word	0x08002411
 80021d8:	08002459 	.word	0x08002459
 80021dc:	08002729 	.word	0x08002729
 80021e0:	08002729 	.word	0x08002729
 80021e4:	08002729 	.word	0x08002729
 80021e8:	08002729 	.word	0x08002729
 80021ec:	08002729 	.word	0x08002729
 80021f0:	08002729 	.word	0x08002729
 80021f4:	08002729 	.word	0x08002729
 80021f8:	08002699 	.word	0x08002699
 80021fc:	08002729 	.word	0x08002729
 8002200:	080026e1 	.word	0x080026e1
 8002204:	08002729 	.word	0x08002729
 8002208:	08002609 	.word	0x08002609
 800220c:	08002729 	.word	0x08002729
 8002210:	08002729 	.word	0x08002729
 8002214:	08002729 	.word	0x08002729
 8002218:	08002729 	.word	0x08002729
 800221c:	08002729 	.word	0x08002729
 8002220:	080025c1 	.word	0x080025c1
 8002224:	08002729 	.word	0x08002729
 8002228:	08002729 	.word	0x08002729
 800222c:	08002729 	.word	0x08002729
 8002230:	08002729 	.word	0x08002729
 8002234:	08002729 	.word	0x08002729
 8002238:	08002651 	.word	0x08002651
 800223c:	08002729 	.word	0x08002729
 8002240:	08002729 	.word	0x08002729
 8002244:	08002579 	.word	0x08002579
		case 'F':
			if (Movement[2] != '\0')
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3302      	adds	r3, #2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <makeOneMovement+0xfc>
				movement_aF2();
 8002252:	f7fe ff5c 	bl	800110e <movement_aF2>
				movement_F();
			else if (Movement[1] == '2')
				movement_F2();
			else
				movement_aF();
			break;
 8002256:	e267      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <makeOneMovement+0x116>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3302      	adds	r3, #2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <makeOneMovement+0x116>
				movement_F();
 800226c:	f7fe fbea 	bl	8000a44 <movement_F>
			break;
 8002270:	e25a      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3301      	adds	r3, #1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b32      	cmp	r3, #50	; 0x32
 800227a:	d102      	bne.n	8002282 <makeOneMovement+0x126>
				movement_F2();
 800227c:	f7fe ff12 	bl	80010a4 <movement_F2>
			break;
 8002280:	e252      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aF();
 8002282:	f7fe fbff 	bl	8000a84 <movement_aF>
			break;
 8002286:	e24f      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'R':
			if (Movement[2] != '\0')
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3302      	adds	r3, #2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <makeOneMovement+0x13c>
				movement_aR2();
 8002292:	f7fe ffa6 	bl	80011e2 <movement_aR2>
				movement_R();
			else if (Movement[1] == '2')
				movement_R2();
			else
				movement_aR();
			break;
 8002296:	e247      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <makeOneMovement+0x156>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <makeOneMovement+0x156>
				movement_R();
 80022ac:	f7fe fc0a 	bl	8000ac4 <movement_R>
			break;
 80022b0:	e23a      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3301      	adds	r3, #1
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b32      	cmp	r3, #50	; 0x32
 80022ba:	d102      	bne.n	80022c2 <makeOneMovement+0x166>
				movement_R2();
 80022bc:	f7fe ff5c 	bl	8001178 <movement_R2>
			break;
 80022c0:	e232      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aR();
 80022c2:	f7fe fc1f 	bl	8000b04 <movement_aR>
			break;
 80022c6:	e22f      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'L':
			if (Movement[2] != '\0')
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3302      	adds	r3, #2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <makeOneMovement+0x17c>
				movement_aL2();
 80022d2:	f7fe fff0 	bl	80012b6 <movement_aL2>
				movement_L();
			else if (Movement[1] == '2')
				movement_L2();
			else
				movement_aL();
			break;
 80022d6:	e227      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3301      	adds	r3, #1
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <makeOneMovement+0x196>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3302      	adds	r3, #2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <makeOneMovement+0x196>
				movement_L();
 80022ec:	f7fe fc2a 	bl	8000b44 <movement_L>
			break;
 80022f0:	e21a      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3301      	adds	r3, #1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b32      	cmp	r3, #50	; 0x32
 80022fa:	d102      	bne.n	8002302 <makeOneMovement+0x1a6>
				movement_L2();
 80022fc:	f7fe ffa6 	bl	800124c <movement_L2>
			break;
 8002300:	e212      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aL();
 8002302:	f7fe fc3f 	bl	8000b84 <movement_aL>
			break;
 8002306:	e20f      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'B':
			if (Movement[2] != '\0')
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3302      	adds	r3, #2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <makeOneMovement+0x1bc>
				movement_aB2();
 8002312:	f7ff f83a 	bl	800138a <movement_aB2>
				movement_B();
			else if (Movement[1] == '2')
				movement_B2();
			else
				movement_aB();
			break;
 8002316:	e207      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3301      	adds	r3, #1
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <makeOneMovement+0x1d6>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3302      	adds	r3, #2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <makeOneMovement+0x1d6>
				movement_B();
 800232c:	f7fe fc4a 	bl	8000bc4 <movement_B>
			break;
 8002330:	e1fa      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3301      	adds	r3, #1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b32      	cmp	r3, #50	; 0x32
 800233a:	d102      	bne.n	8002342 <makeOneMovement+0x1e6>
				movement_B2();
 800233c:	f7fe fff0 	bl	8001320 <movement_B2>
			break;
 8002340:	e1f2      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aB();
 8002342:	f7fe fc5f 	bl	8000c04 <movement_aB>
			break;
 8002346:	e1ef      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'U':
			if (Movement[2] != '\0')
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3302      	adds	r3, #2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <makeOneMovement+0x1fc>
				movement_aU2();
 8002352:	f7ff f8f6 	bl	8001542 <movement_aU2>
				movement_U();
			else if (Movement[1] == '2')
				movement_U2();
			else
				movement_aU();
			break;
 8002356:	e1e7      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <makeOneMovement+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3302      	adds	r3, #2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <makeOneMovement+0x216>
				movement_U();
 800236c:	f7fe fc6a 	bl	8000c44 <movement_U>
			break;
 8002370:	e1da      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3301      	adds	r3, #1
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b32      	cmp	r3, #50	; 0x32
 800237a:	d102      	bne.n	8002382 <makeOneMovement+0x226>
				movement_U2();
 800237c:	f7ff f83a 	bl	80013f4 <movement_U2>
			break;
 8002380:	e1d2      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aU();
 8002382:	f7fe fce5 	bl	8000d50 <movement_aU>
			break;
 8002386:	e1cf      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'D':
			if (Movement[2] != '\0')
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3302      	adds	r3, #2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <makeOneMovement+0x23c>
				movement_aD2();
 8002392:	f7ff fa24 	bl	80017de <movement_aD2>
				movement_D();
			else if (Movement[1] == '2')
				movement_D2();
			else
				movement_aD();
			break;
 8002396:	e1c7      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <makeOneMovement+0x256>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3302      	adds	r3, #2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <makeOneMovement+0x256>
				movement_D();
 80023ac:	f7fe fd56 	bl	8000e5c <movement_D>
			break;
 80023b0:	e1ba      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2')
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3301      	adds	r3, #1
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b32      	cmp	r3, #50	; 0x32
 80023ba:	d102      	bne.n	80023c2 <makeOneMovement+0x266>
				movement_D2();
 80023bc:	f7ff f968 	bl	8001690 <movement_D2>
			break;
 80023c0:	e1b2      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aD();
 80023c2:	f7fe fddd 	bl	8000f80 <movement_aD>
			break;
 80023c6:	e1af      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'X':
			if (Movement[2] != '\0') {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3302      	adds	r3, #2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <makeOneMovement+0x280>
				movement_aX();
 80023d2:	f7ff faf1 	bl	80019b8 <movement_aX>
				movement_aX();
 80023d6:	f7ff faef 	bl	80019b8 <movement_aX>
			else if (Movement[1] == '2') {
				movement_X();
				movement_X();
			} else
				movement_aX();
			break;
 80023da:	e1a5      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <makeOneMovement+0x29a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3302      	adds	r3, #2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <makeOneMovement+0x29a>
				movement_X();
 80023f0:	f7ff fa9c 	bl	800192c <movement_X>
			break;
 80023f4:	e198      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b32      	cmp	r3, #50	; 0x32
 80023fe:	d104      	bne.n	800240a <makeOneMovement+0x2ae>
				movement_X();
 8002400:	f7ff fa94 	bl	800192c <movement_X>
				movement_X();
 8002404:	f7ff fa92 	bl	800192c <movement_X>
			break;
 8002408:	e18e      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aX();
 800240a:	f7ff fad5 	bl	80019b8 <movement_aX>
			break;
 800240e:	e18b      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'Y':
			if (Movement[2] != '\0') {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3302      	adds	r3, #2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <makeOneMovement+0x2c8>
				movement_aY();
 800241a:	f7ff fb1d 	bl	8001a58 <movement_aY>
				movement_aY();
 800241e:	f7ff fb1b 	bl	8001a58 <movement_aY>
			else if (Movement[1] == '2') {
				movement_Y();
				movement_Y();
			} else
				movement_aY();
			break;
 8002422:	e181      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3301      	adds	r3, #1
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <makeOneMovement+0x2e2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3302      	adds	r3, #2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <makeOneMovement+0x2e2>
				movement_Y();
 8002438:	f7ff fb04 	bl	8001a44 <movement_Y>
			break;
 800243c:	e174      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b32      	cmp	r3, #50	; 0x32
 8002446:	d104      	bne.n	8002452 <makeOneMovement+0x2f6>
				movement_Y();
 8002448:	f7ff fafc 	bl	8001a44 <movement_Y>
				movement_Y();
 800244c:	f7ff fafa 	bl	8001a44 <movement_Y>
			break;
 8002450:	e16a      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aY();
 8002452:	f7ff fb01 	bl	8001a58 <movement_aY>
			break;
 8002456:	e167      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'Z':
			if (Movement[2] != '\0') {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3302      	adds	r3, #2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <makeOneMovement+0x310>
				movement_aZ();
 8002462:	f7ff fb49 	bl	8001af8 <movement_aZ>
				movement_aZ();
 8002466:	f7ff fb47 	bl	8001af8 <movement_aZ>
			else if (Movement[1] == '2') {
				movement_Z();
				movement_Z();
			} else
				movement_aZ();
			break;
 800246a:	e15d      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3301      	adds	r3, #1
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <makeOneMovement+0x32a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3302      	adds	r3, #2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <makeOneMovement+0x32a>
				movement_Z();
 8002480:	f7ff faf4 	bl	8001a6c <movement_Z>
			break;
 8002484:	e150      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3301      	adds	r3, #1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b32      	cmp	r3, #50	; 0x32
 800248e:	d104      	bne.n	800249a <makeOneMovement+0x33e>
				movement_Z();
 8002490:	f7ff faec 	bl	8001a6c <movement_Z>
				movement_Z();
 8002494:	f7ff faea 	bl	8001a6c <movement_Z>
			break;
 8002498:	e146      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aZ();
 800249a:	f7ff fb2d 	bl	8001af8 <movement_aZ>
			break;
 800249e:	e143      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'M':
			if (Movement[2] != '\0') {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3302      	adds	r3, #2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <makeOneMovement+0x358>
				movement_aM();
 80024aa:	f7ff fb9a 	bl	8001be2 <movement_aM>
				movement_aM();
 80024ae:	f7ff fb98 	bl	8001be2 <movement_aM>
			else if (Movement[1] == '2') {
				movement_M();
				movement_M();
			} else
				movement_aM();
			break;
 80024b2:	e139      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <makeOneMovement+0x372>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3302      	adds	r3, #2
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <makeOneMovement+0x372>
				movement_M();
 80024c8:	f7ff fb5c 	bl	8001b84 <movement_M>
			break;
 80024cc:	e12c      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3301      	adds	r3, #1
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b32      	cmp	r3, #50	; 0x32
 80024d6:	d104      	bne.n	80024e2 <makeOneMovement+0x386>
				movement_M();
 80024d8:	f7ff fb54 	bl	8001b84 <movement_M>
				movement_M();
 80024dc:	f7ff fb52 	bl	8001b84 <movement_M>
			break;
 80024e0:	e122      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aM();
 80024e2:	f7ff fb7e 	bl	8001be2 <movement_aM>
			break;
 80024e6:	e11f      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'E':
			if (Movement[2] != '\0') {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3302      	adds	r3, #2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <makeOneMovement+0x3a0>
				movement_aE();
 80024f2:	f7ff fbaf 	bl	8001c54 <movement_aE>
				movement_aE();
 80024f6:	f7ff fbad 	bl	8001c54 <movement_aE>
			else if (Movement[1] == '2') {
				movement_E();
				movement_E();
			} else
				movement_aE();
			break;
 80024fa:	e115      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <makeOneMovement+0x3ba>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3302      	adds	r3, #2
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <makeOneMovement+0x3ba>
				movement_E();
 8002510:	f7ff fb96 	bl	8001c40 <movement_E>
			break;
 8002514:	e108      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3301      	adds	r3, #1
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b32      	cmp	r3, #50	; 0x32
 800251e:	d104      	bne.n	800252a <makeOneMovement+0x3ce>
				movement_E();
 8002520:	f7ff fb8e 	bl	8001c40 <movement_E>
				movement_E();
 8002524:	f7ff fb8c 	bl	8001c40 <movement_E>
			break;
 8002528:	e0fe      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aE();
 800252a:	f7ff fb93 	bl	8001c54 <movement_aE>
			break;
 800252e:	e0fb      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'S':
			if (Movement[2] != '\0') {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3302      	adds	r3, #2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <makeOneMovement+0x3e8>
				movement_aS();
 800253a:	f7ff fbc4 	bl	8001cc6 <movement_aS>
				movement_aS();
 800253e:	f7ff fbc2 	bl	8001cc6 <movement_aS>
			else if (Movement[1] == '2') {
				movement_S();
				movement_S();
			} else
				movement_aS();
			break;
 8002542:	e0f1      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <makeOneMovement+0x402>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3302      	adds	r3, #2
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <makeOneMovement+0x402>
				movement_S();
 8002558:	f7ff fb86 	bl	8001c68 <movement_S>
			break;
 800255c:	e0e4      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3301      	adds	r3, #1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b32      	cmp	r3, #50	; 0x32
 8002566:	d104      	bne.n	8002572 <makeOneMovement+0x416>
				movement_S();
 8002568:	f7ff fb7e 	bl	8001c68 <movement_S>
				movement_S();
 800256c:	f7ff fb7c 	bl	8001c68 <movement_S>
			break;
 8002570:	e0da      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_aS();
 8002572:	f7ff fba8 	bl	8001cc6 <movement_aS>
			break;
 8002576:	e0d7      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'u':
			if (Movement[2] != '\0') {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3302      	adds	r3, #2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <makeOneMovement+0x430>
				movement_au();
 8002582:	f7ff fbd7 	bl	8001d34 <movement_au>
				movement_au();
 8002586:	f7ff fbd5 	bl	8001d34 <movement_au>
			else if (Movement[1] == '2') {
				movement_u();
				movement_u();
			} else
				movement_au();
			break;
 800258a:	e0cd      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3301      	adds	r3, #1
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <makeOneMovement+0x44a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <makeOneMovement+0x44a>
				movement_u();
 80025a0:	f7ff fbc0 	bl	8001d24 <movement_u>
			break;
 80025a4:	e0c0      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b32      	cmp	r3, #50	; 0x32
 80025ae:	d104      	bne.n	80025ba <makeOneMovement+0x45e>
				movement_u();
 80025b0:	f7ff fbb8 	bl	8001d24 <movement_u>
				movement_u();
 80025b4:	f7ff fbb6 	bl	8001d24 <movement_u>
			break;
 80025b8:	e0b6      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_au();
 80025ba:	f7ff fbbb 	bl	8001d34 <movement_au>
			break;
 80025be:	e0b3      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'l':
			if (Movement[2] != '\0') {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <makeOneMovement+0x478>
				movement_al();
 80025ca:	f7ff fbc3 	bl	8001d54 <movement_al>
				movement_al();
 80025ce:	f7ff fbc1 	bl	8001d54 <movement_al>
			else if (Movement[1] == '2') {
				movement_l();
				movement_l();
			} else
				movement_al();
			break;
 80025d2:	e0a9      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <makeOneMovement+0x492>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3302      	adds	r3, #2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <makeOneMovement+0x492>
				movement_l();
 80025e8:	f7ff fbac 	bl	8001d44 <movement_l>
			break;
 80025ec:	e09c      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3301      	adds	r3, #1
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b32      	cmp	r3, #50	; 0x32
 80025f6:	d104      	bne.n	8002602 <makeOneMovement+0x4a6>
				movement_l();
 80025f8:	f7ff fba4 	bl	8001d44 <movement_l>
				movement_l();
 80025fc:	f7ff fba2 	bl	8001d44 <movement_l>
			break;
 8002600:	e092      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_al();
 8002602:	f7ff fba7 	bl	8001d54 <movement_al>
			break;
 8002606:	e08f      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'f':
			if (Movement[2] != '\0') {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3302      	adds	r3, #2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <makeOneMovement+0x4c0>
				movement_af();
 8002612:	f7ff fbaf 	bl	8001d74 <movement_af>
				movement_af();
 8002616:	f7ff fbad 	bl	8001d74 <movement_af>
			else if (Movement[1] == '2') {
				movement_f();
				movement_f();
			} else
				movement_af();
			break;
 800261a:	e085      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3301      	adds	r3, #1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <makeOneMovement+0x4da>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <makeOneMovement+0x4da>
				movement_f();
 8002630:	f7ff fb98 	bl	8001d64 <movement_f>
			break;
 8002634:	e078      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3301      	adds	r3, #1
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b32      	cmp	r3, #50	; 0x32
 800263e:	d104      	bne.n	800264a <makeOneMovement+0x4ee>
				movement_f();
 8002640:	f7ff fb90 	bl	8001d64 <movement_f>
				movement_f();
 8002644:	f7ff fb8e 	bl	8001d64 <movement_f>
			break;
 8002648:	e06e      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_af();
 800264a:	f7ff fb93 	bl	8001d74 <movement_af>
			break;
 800264e:	e06b      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'r':
			if (Movement[2] != '\0') {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3302      	adds	r3, #2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <makeOneMovement+0x508>
				movement_ar();
 800265a:	f7ff fb9b 	bl	8001d94 <movement_ar>
				movement_ar();
 800265e:	f7ff fb99 	bl	8001d94 <movement_ar>
			else if (Movement[1] == '2') {
				movement_r();
				movement_r();
			} else
				movement_ar();
			break;
 8002662:	e061      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3301      	adds	r3, #1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <makeOneMovement+0x522>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3302      	adds	r3, #2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <makeOneMovement+0x522>
				movement_r();
 8002678:	f7ff fb84 	bl	8001d84 <movement_r>
			break;
 800267c:	e054      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3301      	adds	r3, #1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b32      	cmp	r3, #50	; 0x32
 8002686:	d104      	bne.n	8002692 <makeOneMovement+0x536>
				movement_r();
 8002688:	f7ff fb7c 	bl	8001d84 <movement_r>
				movement_r();
 800268c:	f7ff fb7a 	bl	8001d84 <movement_r>
			break;
 8002690:	e04a      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_ar();
 8002692:	f7ff fb7f 	bl	8001d94 <movement_ar>
			break;
 8002696:	e047      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'b':
			if (Movement[2] != '\0') {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3302      	adds	r3, #2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <makeOneMovement+0x550>
				movement_ab();
 80026a2:	f7ff fb87 	bl	8001db4 <movement_ab>
				movement_ab();
 80026a6:	f7ff fb85 	bl	8001db4 <movement_ab>
			else if (Movement[1] == '2') {
				movement_b();
				movement_b();
			} else
				movement_ab();
			break;
 80026aa:	e03d      	b.n	8002728 <makeOneMovement+0x5cc>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3301      	adds	r3, #1
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <makeOneMovement+0x56a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3302      	adds	r3, #2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <makeOneMovement+0x56a>
				movement_b();
 80026c0:	f7ff fb70 	bl	8001da4 <movement_b>
			break;
 80026c4:	e030      	b.n	8002728 <makeOneMovement+0x5cc>
			else if (Movement[1] == '2') {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3301      	adds	r3, #1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b32      	cmp	r3, #50	; 0x32
 80026ce:	d104      	bne.n	80026da <makeOneMovement+0x57e>
				movement_b();
 80026d0:	f7ff fb68 	bl	8001da4 <movement_b>
				movement_b();
 80026d4:	f7ff fb66 	bl	8001da4 <movement_b>
			break;
 80026d8:	e026      	b.n	8002728 <makeOneMovement+0x5cc>
				movement_ab();
 80026da:	f7ff fb6b 	bl	8001db4 <movement_ab>
			break;
 80026de:	e023      	b.n	8002728 <makeOneMovement+0x5cc>
		case 'd':
			if (Movement[2] != '\0') {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3302      	adds	r3, #2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <makeOneMovement+0x598>
				movement_ad();
 80026ea:	f7ff fb73 	bl	8001dd4 <movement_ad>
				movement_ad();
 80026ee:	f7ff fb71 	bl	8001dd4 <movement_ad>
			else if (Movement[1] == '2') {
				movement_d();
				movement_d();
			} else
				movement_ad();
			break;
 80026f2:	e018      	b.n	8002726 <makeOneMovement+0x5ca>
			} else if (Movement[1] == '\0' && Movement[2] == '\0')
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3301      	adds	r3, #1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <makeOneMovement+0x5b2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3302      	adds	r3, #2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <makeOneMovement+0x5b2>
				movement_d();
 8002708:	f7ff fb5c 	bl	8001dc4 <movement_d>
			break;
 800270c:	e00b      	b.n	8002726 <makeOneMovement+0x5ca>
			else if (Movement[1] == '2') {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3301      	adds	r3, #1
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b32      	cmp	r3, #50	; 0x32
 8002716:	d104      	bne.n	8002722 <makeOneMovement+0x5c6>
				movement_d();
 8002718:	f7ff fb54 	bl	8001dc4 <movement_d>
				movement_d();
 800271c:	f7ff fb52 	bl	8001dc4 <movement_d>
			break;
 8002720:	e001      	b.n	8002726 <makeOneMovement+0x5ca>
				movement_ad();
 8002722:	f7ff fb57 	bl	8001dd4 <movement_ad>
			break;
 8002726:	bf00      	nop
	}
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <SolveTheCube>:
 *
 * @param listOfCommand[][SIZE_OF_ONE_MOVEMENT] array that contains different movements
 * @param size number of rows of listOfCommand[][SIZE_OF_ONE_MOVEMENT]
 *
 */
void SolveTheCube(char listOfCommand[][SIZE_OF_ONE_MOVEMENT], int size) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    for (int i=0; i<size; ++i)
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e00b      	b.n	8002758 <SolveTheCube+0x28>
        makeOneMovement(listOfCommand[i]);
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fd05 	bl	800215c <makeOneMovement>
    for (int i=0; i<size; ++i)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	dbef      	blt.n	8002740 <SolveTheCube+0x10>
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <ScanCube>:

void ScanCube(void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8002772:	2301      	movs	r3, #1
 8002774:	71fb      	strb	r3, [r7, #7]
 8002776:	e08a      	b.n	800288e <ScanCube+0x122>
		char signal_r;
		char signal_t = 'T';
 8002778:	2354      	movs	r3, #84	; 0x54
 800277a:	717b      	strb	r3, [r7, #5]
		switch (steps) {
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	3b01      	subs	r3, #1
 8002780:	2b05      	cmp	r3, #5
 8002782:	f200 8081 	bhi.w	8002888 <ScanCube+0x11c>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <ScanCube+0x20>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027cb 	.word	0x080027cb
 8002794:	080027f1 	.word	0x080027f1
 8002798:	08002817 	.word	0x08002817
 800279c:	0800283d 	.word	0x0800283d
 80027a0:	08002863 	.word	0x08002863
			// up
			case 1: {
				movement_scan_up();
 80027a4:	f7ff fb1e 	bl	8001de4 <movement_scan_up>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF); // ackonwledge Camera Board to capture image
 80027a8:	1d79      	adds	r1, r7, #5
 80027aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ae:	2201      	movs	r2, #1
 80027b0:	483b      	ldr	r0, [pc, #236]	; (80028a0 <ScanCube+0x134>)
 80027b2:	f002 fc04 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF); // Camera Board finish capturing image
 80027b6:	1db9      	adds	r1, r7, #6
 80027b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027bc:	2201      	movs	r2, #1
 80027be:	4838      	ldr	r0, [pc, #224]	; (80028a0 <ScanCube+0x134>)
 80027c0:	f002 fc8f 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_up_r();
 80027c4:	f7ff fb43 	bl	8001e4e <movement_scan_up_r>
				break;
 80027c8:	e05e      	b.n	8002888 <ScanCube+0x11c>
			}
			// north
			case 2: {
				movement_scan_north();
 80027ca:	f7ff fb75 	bl	8001eb8 <movement_scan_north>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 80027ce:	1d79      	adds	r1, r7, #5
 80027d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d4:	2201      	movs	r2, #1
 80027d6:	4832      	ldr	r0, [pc, #200]	; (80028a0 <ScanCube+0x134>)
 80027d8:	f002 fbf1 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 80027dc:	1db9      	adds	r1, r7, #6
 80027de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e2:	2201      	movs	r2, #1
 80027e4:	482e      	ldr	r0, [pc, #184]	; (80028a0 <ScanCube+0x134>)
 80027e6:	f002 fc7c 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_north_r();
 80027ea:	f7ff fb80 	bl	8001eee <movement_scan_north_r>
				break;
 80027ee:	e04b      	b.n	8002888 <ScanCube+0x11c>
			}
			// east
			case 3: {
				movement_scan_east();
 80027f0:	f7ff fb98 	bl	8001f24 <movement_scan_east>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 80027f4:	1d79      	adds	r1, r7, #5
 80027f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027fa:	2201      	movs	r2, #1
 80027fc:	4828      	ldr	r0, [pc, #160]	; (80028a0 <ScanCube+0x134>)
 80027fe:	f002 fbde 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8002802:	1db9      	adds	r1, r7, #6
 8002804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002808:	2201      	movs	r2, #1
 800280a:	4825      	ldr	r0, [pc, #148]	; (80028a0 <ScanCube+0x134>)
 800280c:	f002 fc69 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_east_r();
 8002810:	f7ff fba3 	bl	8001f5a <movement_scan_east_r>
				break;
 8002814:	e038      	b.n	8002888 <ScanCube+0x11c>
			}
			// south
			case 4: {
				movement_scan_south();
 8002816:	f7ff fbbb 	bl	8001f90 <movement_scan_south>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 800281a:	1d79      	adds	r1, r7, #5
 800281c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002820:	2201      	movs	r2, #1
 8002822:	481f      	ldr	r0, [pc, #124]	; (80028a0 <ScanCube+0x134>)
 8002824:	f002 fbcb 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8002828:	1db9      	adds	r1, r7, #6
 800282a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282e:	2201      	movs	r2, #1
 8002830:	481b      	ldr	r0, [pc, #108]	; (80028a0 <ScanCube+0x134>)
 8002832:	f002 fc56 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_south_r();
 8002836:	f7ff fbc6 	bl	8001fc6 <movement_scan_south_r>
				break;
 800283a:	e025      	b.n	8002888 <ScanCube+0x11c>
			}
			// west
			case 5: {
				movement_scan_west();
 800283c:	f7ff fbde 	bl	8001ffc <movement_scan_west>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8002840:	1d79      	adds	r1, r7, #5
 8002842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002846:	2201      	movs	r2, #1
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <ScanCube+0x134>)
 800284a:	f002 fbb8 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 800284e:	1db9      	adds	r1, r7, #6
 8002850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002854:	2201      	movs	r2, #1
 8002856:	4812      	ldr	r0, [pc, #72]	; (80028a0 <ScanCube+0x134>)
 8002858:	f002 fc43 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_west_r();
 800285c:	f7ff fbe9 	bl	8002032 <movement_scan_west_r>
				break;
 8002860:	e012      	b.n	8002888 <ScanCube+0x11c>
			}
			// down
			case 6: {
				movement_scan_down();
 8002862:	f7ff fc01 	bl	8002068 <movement_scan_down>
				HAL_UART_Transmit(&huart1, &signal_t, 1, 0xFFFF);
 8002866:	1d79      	adds	r1, r7, #5
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	2201      	movs	r2, #1
 800286e:	480c      	ldr	r0, [pc, #48]	; (80028a0 <ScanCube+0x134>)
 8002870:	f002 fba5 	bl	8004fbe <HAL_UART_Transmit>
				HAL_UART_Receive(&huart1, &signal_r, 1, 0xFFFF);
 8002874:	1db9      	adds	r1, r7, #6
 8002876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800287a:	2201      	movs	r2, #1
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <ScanCube+0x134>)
 800287e:	f002 fc30 	bl	80050e2 <HAL_UART_Receive>
				movement_scan_down_r();
 8002882:	f7ff fbfb 	bl	800207c <movement_scan_down_r>
				break;
 8002886:	bf00      	nop
	for (uint8_t steps = 1; steps <= 6; steps++) {
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	3301      	adds	r3, #1
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b06      	cmp	r3, #6
 8002892:	f67f af71 	bls.w	8002778 <ScanCube+0xc>
			}
		}
	}
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000014c 	.word	0x2000014c

080028a4 <mode>:
 * Mode 1: Solving mode
 * Mode 2: Shuffling mode
 *
 * @param choice choice of mode
 */
void mode(uint8_t choice) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b0ea      	sub	sp, #424	; 0x1a8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4602      	mov	r2, r0
 80028ac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80028b0:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 80028b4:	701a      	strb	r2, [r3, #0]
	switch (choice) {
 80028b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80028ba:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d002      	beq.n	80028ca <mode+0x26>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d04c      	beq.n	8002962 <mode+0xbe>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
			break;
		}
		default:
	}
}
 80028c8:	e08a      	b.n	80029e0 <mode+0x13c>
			stage = '1';
 80028ca:	2331      	movs	r3, #49	; 0x31
 80028cc:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 80028d0:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 80028d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d8:	2201      	movs	r2, #1
 80028da:	4844      	ldr	r0, [pc, #272]	; (80029ec <mode+0x148>)
 80028dc:	f002 fb6f 	bl	8004fbe <HAL_UART_Transmit>
			insert_cube();
 80028e0:	f000 f8b8 	bl	8002a54 <insert_cube>
			stage = '2';
 80028e4:	2332      	movs	r3, #50	; 0x32
 80028e6:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 80028ea:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 80028ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f2:	2201      	movs	r2, #1
 80028f4:	483d      	ldr	r0, [pc, #244]	; (80029ec <mode+0x148>)
 80028f6:	f002 fb62 	bl	8004fbe <HAL_UART_Transmit>
			ScanCube();
 80028fa:	f7ff ff37 	bl	800276c <ScanCube>
			stage = '3';
 80028fe:	2333      	movs	r3, #51	; 0x33
 8002900:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8002904:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8002908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290c:	2201      	movs	r2, #1
 800290e:	4837      	ldr	r0, [pc, #220]	; (80029ec <mode+0x148>)
 8002910:	f002 fb55 	bl	8004fbe <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8002914:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002918:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fc01 	bl	8002128 <ReadInput>
			SolveTheCube(listOfCommand, size);
 8002926:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800292a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fefd 	bl	8002730 <SolveTheCube>
			remove_cube();
 8002936:	f000 f8bd 	bl	8002ab4 <remove_cube>
			stage = '4';
 800293a:	2334      	movs	r3, #52	; 0x34
 800293c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8002940:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8002944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002948:	2201      	movs	r2, #1
 800294a:	4828      	ldr	r0, [pc, #160]	; (80029ec <mode+0x148>)
 800294c:	f002 fb37 	bl	8004fbe <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8002950:	f507 71d3 	add.w	r1, r7, #422	; 0x1a6
 8002954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002958:	2201      	movs	r2, #1
 800295a:	4824      	ldr	r0, [pc, #144]	; (80029ec <mode+0x148>)
 800295c:	f002 fbc1 	bl	80050e2 <HAL_UART_Receive>
			break;
 8002960:	e03e      	b.n	80029e0 <mode+0x13c>
			stage = '1';
 8002962:	2331      	movs	r3, #49	; 0x31
 8002964:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8002968:	f207 119f 	addw	r1, r7, #415	; 0x19f
 800296c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002970:	2201      	movs	r2, #1
 8002972:	481e      	ldr	r0, [pc, #120]	; (80029ec <mode+0x148>)
 8002974:	f002 fb23 	bl	8004fbe <HAL_UART_Transmit>
			insert_cube();
 8002978:	f000 f86c 	bl	8002a54 <insert_cube>
			stage = '2';
 800297c:	2332      	movs	r3, #50	; 0x32
 800297e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 8002982:	f207 119f 	addw	r1, r7, #415	; 0x19f
 8002986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298a:	2201      	movs	r2, #1
 800298c:	4817      	ldr	r0, [pc, #92]	; (80029ec <mode+0x148>)
 800298e:	f002 fb16 	bl	8004fbe <HAL_UART_Transmit>
			ReadInput(receive, &size, listOfCommand);
 8002992:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002996:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fbc2 	bl	8002128 <ReadInput>
			SolveTheCube(listOfCommand, size);
 80029a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff febe 	bl	8002730 <SolveTheCube>
			remove_cube();
 80029b4:	f000 f87e 	bl	8002ab4 <remove_cube>
			stage = '3';
 80029b8:	2333      	movs	r3, #51	; 0x33
 80029ba:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
			HAL_UART_Transmit(&huart1, &stage, 1, 0xFFFF);
 80029be:	f207 119f 	addw	r1, r7, #415	; 0x19f
 80029c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c6:	2201      	movs	r2, #1
 80029c8:	4808      	ldr	r0, [pc, #32]	; (80029ec <mode+0x148>)
 80029ca:	f002 faf8 	bl	8004fbe <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 80029ce:	f507 71cf 	add.w	r1, r7, #414	; 0x19e
 80029d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d6:	2201      	movs	r2, #1
 80029d8:	4804      	ldr	r0, [pc, #16]	; (80029ec <mode+0x148>)
 80029da:	f002 fb82 	bl	80050e2 <HAL_UART_Receive>
			break;
 80029de:	bf00      	nop
}
 80029e0:	bf00      	nop
 80029e2:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000014c 	.word	0x2000014c

080029f0 <servo_init>:

#include "servo.h"

GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void servo_init(void) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++) {
 80029f6:	2301      	movs	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	e010      	b.n	8002a1e <servo_init+0x2e>
		servo_pull(i*2);
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f910 	bl	8002c28 <servo_pull>
		centre_0(i*2-1);
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f860 	bl	8002ad8 <centre_0>
	for (uint8_t i = 1; i <= 4; i++) {
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d9eb      	bls.n	80029fc <servo_init+0xc>
	}
	HAL_Delay(DELAY_TIME_P);
 8002a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a28:	f000 fd32 	bl	8003490 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	71bb      	strb	r3, [r7, #6]
 8002a30:	e008      	b.n	8002a44 <servo_init+0x54>
		servo_push(i*2);
 8002a32:	79bb      	ldrb	r3, [r7, #6]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f92b 	bl	8002c94 <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8002a3e:	79bb      	ldrb	r3, [r7, #6]
 8002a40:	3301      	adds	r3, #1
 8002a42:	71bb      	strb	r3, [r7, #6]
 8002a44:	79bb      	ldrb	r3, [r7, #6]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d9f3      	bls.n	8002a32 <servo_init+0x42>
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <insert_cube>:

void insert_cube(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
	servo_pull(south_back);
 8002a5a:	2006      	movs	r0, #6
 8002a5c:	f000 f8e4 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_sP);
 8002a60:	20af      	movs	r0, #175	; 0xaf
 8002a62:	f000 fd15 	bl	8003490 <HAL_Delay>
	servo_pull(east_back);
 8002a66:	2004      	movs	r0, #4
 8002a68:	f000 f8de 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a70:	f000 fd0e 	bl	8003490 <HAL_Delay>

	char stage;
	HAL_UART_Receive(&huart1, &stage, 1, 0xFFFF);
 8002a74:	1db9      	adds	r1, r7, #6
 8002a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <insert_cube+0x5c>)
 8002a7e:	f002 fb30 	bl	80050e2 <HAL_UART_Receive>
	for (uint8_t i = 1; i <= 4; i++)
 8002a82:	2301      	movs	r3, #1
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	e008      	b.n	8002a9a <insert_cube+0x46>
		servo_push(i*2);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f900 	bl	8002c94 <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	3301      	adds	r3, #1
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d9f3      	bls.n	8002a88 <insert_cube+0x34>
	HAL_Delay(DELAY_TIME_P);
 8002aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aa4:	f000 fcf4 	bl	8003490 <HAL_Delay>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2000014c 	.word	0x2000014c

08002ab4 <remove_cube>:

void remove_cube(void) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	servo_pull(west_back);
 8002ab8:	2008      	movs	r0, #8
 8002aba:	f000 f8b5 	bl	8002c28 <servo_pull>
	servo_pull(south_back);
 8002abe:	2006      	movs	r0, #6
 8002ac0:	f000 f8b2 	bl	8002c28 <servo_pull>
	servo_pull(east_back);
 8002ac4:	2004      	movs	r0, #4
 8002ac6:	f000 f8af 	bl	8002c28 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8002aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ace:	f000 fcdf 	bl	8003490 <HAL_Delay>
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <centre_0>:

void centre_0(servos servo) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <centre_0+0x60>
		uint8_t target = servo/2+1;
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d81b      	bhi.n	8002b38 <centre_0+0x60>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <centre_0+0x30>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b31 	.word	0x08002b31
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <centre_0+0x6c>)
 8002b1a:	225f      	movs	r2, #95	; 0x5f
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002b1e:	e00b      	b.n	8002b38 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <centre_0+0x6c>)
 8002b22:	2258      	movs	r2, #88	; 0x58
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8002b26:	e007      	b.n	8002b38 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <centre_0+0x6c>)
 8002b2a:	225c      	movs	r2, #92	; 0x5c
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002b2e:	e003      	b.n	8002b38 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <centre_0+0x6c>)
 8002b32:	225e      	movs	r2, #94	; 0x5e
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002b36:	bf00      	nop
		}
	}
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40000400 	.word	0x40000400

08002b48 <clockwise_90>:

void clockwise_90(servos servo) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d81b      	bhi.n	8002ba8 <clockwise_90+0x60>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <clockwise_90+0x30>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002ba1 	.word	0x08002ba1
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <clockwise_90+0x6c>)
 8002b8a:	2299      	movs	r2, #153	; 0x99
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002b8e:	e00b      	b.n	8002ba8 <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <clockwise_90+0x6c>)
 8002b92:	2291      	movs	r2, #145	; 0x91
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8002b96:	e007      	b.n	8002ba8 <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <clockwise_90+0x6c>)
 8002b9a:	2296      	movs	r2, #150	; 0x96
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002b9e:	e003      	b.n	8002ba8 <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <clockwise_90+0x6c>)
 8002ba2:	2299      	movs	r2, #153	; 0x99
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002ba6:	bf00      	nop
		}
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d024      	beq.n	8002c18 <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d81b      	bhi.n	8002c18 <anticlockwise_90+0x60>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <anticlockwise_90+0x30>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c01 	.word	0x08002c01
 8002bf0:	08002c09 	.word	0x08002c09
 8002bf4:	08002c11 	.word	0x08002c11
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <anticlockwise_90+0x6c>)
 8002bfa:	2225      	movs	r2, #37	; 0x25
 8002bfc:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002bfe:	e00b      	b.n	8002c18 <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <anticlockwise_90+0x6c>)
 8002c02:	221d      	movs	r2, #29
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8002c06:	e007      	b.n	8002c18 <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <anticlockwise_90+0x6c>)
 8002c0a:	221f      	movs	r2, #31
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002c0e:	e003      	b.n	8002c18 <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <anticlockwise_90+0x6c>)
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002c16:	bf00      	nop
		}
	}
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40000400 	.word	0x40000400

08002c28 <servo_pull>:

void servo_pull(servos servo) {
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d123      	bne.n	8002c86 <servo_pull+0x5e>
		uint8_t target = servo/2;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d81c      	bhi.n	8002c86 <servo_pull+0x5e>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <servo_pull+0x2c>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c6d 	.word	0x08002c6d
 8002c5c:	08002c77 	.word	0x08002c77
 8002c60:	08002c7f 	.word	0x08002c7f
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <servo_pull+0x68>)
 8002c66:	221e      	movs	r2, #30
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002c6a:	e00c      	b.n	8002c86 <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 8002c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c70:	221e      	movs	r2, #30
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002c74:	e007      	b.n	8002c86 <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <servo_pull+0x68>)
 8002c78:	221e      	movs	r2, #30
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002c7c:	e003      	b.n	8002c86 <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <servo_pull+0x68>)
 8002c80:	221e      	movs	r2, #30
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002c84:	bf00      	nop
		}
	}
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40000800 	.word	0x40000800

08002c94 <servo_push>:

void servo_push(servos servo) {
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d123      	bne.n	8002cf2 <servo_push+0x5e>
		uint8_t target = servo/2;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d81c      	bhi.n	8002cf2 <servo_push+0x5e>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <servo_push+0x2c>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002cd9 	.word	0x08002cd9
 8002cc8:	08002ce3 	.word	0x08002ce3
 8002ccc:	08002ceb 	.word	0x08002ceb
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <servo_push+0x68>)
 8002cd2:	2269      	movs	r2, #105	; 0x69
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8002cd6:	e00c      	b.n	8002cf2 <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 8002cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cdc:	226e      	movs	r2, #110	; 0x6e
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002ce0:	e007      	b.n	8002cf2 <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <servo_push+0x68>)
 8002ce4:	2269      	movs	r2, #105	; 0x69
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002ce8:	e003      	b.n	8002cf2 <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <servo_push+0x68>)
 8002cec:	225f      	movs	r2, #95	; 0x5f
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002cf0:	bf00      	nop
		}
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40000800 	.word	0x40000800

08002d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6193      	str	r3, [r2, #24]
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	61d3      	str	r3, [r2, #28]
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_MspInit+0x5c>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_MspInit+0x60>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_MspInit+0x60>)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010000 	.word	0x40010000

08002d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <NMI_Handler+0x4>

08002d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <HardFault_Handler+0x4>

08002d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <MemManage_Handler+0x4>

08002d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <BusFault_Handler+0x4>

08002d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <UsageFault_Handler+0x4>

08002d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002daa:	f000 fb55 	bl	8003458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
	...

08002dc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	f107 0320 	add.w	r3, r7, #32
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	615a      	str	r2, [r3, #20]
 8002dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002dfa:	f240 42af 	movw	r2, #1199	; 0x4af
 8002dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e08:	f240 42af 	movw	r2, #1199	; 0x4af
 8002e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1a:	4823      	ldr	r0, [pc, #140]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e1c:	f001 fa53 	bl	80042c6 <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e26:	f7fd fe08 	bl	8000a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e34:	4619      	mov	r1, r3
 8002e36:	481c      	ldr	r0, [pc, #112]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e38:	f001 fc64 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e42:	f7fd fdfa 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e46:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e48:	f001 fa8c 	bl	8004364 <HAL_TIM_PWM_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e52:	f7fd fdf2 	bl	8000a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	4619      	mov	r1, r3
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e66:	f001 fff1 	bl	8004e4c <HAL_TIMEx_MasterConfigSynchronization>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e70:	f7fd fde3 	bl	8000a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e74:	2360      	movs	r3, #96	; 0x60
 8002e76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8002e78:	231e      	movs	r3, #30
 8002e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2208      	movs	r2, #8
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e8c:	f001 fb7c 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e96:	f7fd fdd0 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e9c:	f000 f970 	bl	8003180 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000074 	.word	0x20000074

08002eac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 0320 	add.w	r3, r7, #32
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	615a      	str	r2, [r3, #20]
 8002eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002edc:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002ede:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <MX_TIM3_Init+0x12c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002ee4:	f240 42af 	movw	r2, #1199	; 0x4af
 8002ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002ef2:	f240 42af 	movw	r2, #1199	; 0x4af
 8002ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f04:	4833      	ldr	r0, [pc, #204]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f06:	f001 f9de 	bl	80042c6 <HAL_TIM_Base_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f10:	f7fd fd93 	bl	8000a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	482c      	ldr	r0, [pc, #176]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f22:	f001 fbef 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f2c:	f7fd fd85 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f30:	4828      	ldr	r0, [pc, #160]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f32:	f001 fa17 	bl	8004364 <HAL_TIM_PWM_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f3c:	f7fd fd7d 	bl	8000a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f48:	f107 0320 	add.w	r3, r7, #32
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4821      	ldr	r0, [pc, #132]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f50:	f001 ff7c 	bl	8004e4c <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f5a:	f7fd fd6e 	bl	8000a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5e:	2360      	movs	r3, #96	; 0x60
 8002f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002f62:	231c      	movs	r3, #28
 8002f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2200      	movs	r2, #0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4817      	ldr	r0, [pc, #92]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f76:	f001 fb07 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f80:	f7fd fd5b 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	2204      	movs	r2, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002f8c:	f001 fafc 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002f96:	f7fd fd50 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002fa2:	f001 faf1 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002fac:	f7fd fd45 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002fb8:	f001 fae6 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002fc2:	f7fd fd3a 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fc6:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <MX_TIM3_Init+0x128>)
 8002fc8:	f000 f8da 	bl	8003180 <HAL_TIM_MspPostInit>

}
 8002fcc:	bf00      	nop
 8002fce:	3738      	adds	r7, #56	; 0x38
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200000bc 	.word	0x200000bc
 8002fd8:	40000400 	.word	0x40000400

08002fdc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff0:	f107 0320 	add.w	r3, r7, #32
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800300c:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <MX_TIM4_Init+0x114>)
 800300e:	4a39      	ldr	r2, [pc, #228]	; (80030f4 <MX_TIM4_Init+0x118>)
 8003010:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003014:	f240 42af 	movw	r2, #1199	; 0x4af
 8003018:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301a:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <MX_TIM4_Init+0x114>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8003020:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003022:	f240 42af 	movw	r2, #1199	; 0x4af
 8003026:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <MX_TIM4_Init+0x114>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003034:	482e      	ldr	r0, [pc, #184]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003036:	f001 f946 	bl	80042c6 <HAL_TIM_Base_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003040:	f7fd fcfb 	bl	8000a3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800304a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304e:	4619      	mov	r1, r3
 8003050:	4827      	ldr	r0, [pc, #156]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003052:	f001 fb57 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800305c:	f7fd fced 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003060:	4823      	ldr	r0, [pc, #140]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003062:	f001 f97f 	bl	8004364 <HAL_TIM_PWM_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800306c:	f7fd fce5 	bl	8000a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003078:	f107 0320 	add.w	r3, r7, #32
 800307c:	4619      	mov	r1, r3
 800307e:	481c      	ldr	r0, [pc, #112]	; (80030f0 <MX_TIM4_Init+0x114>)
 8003080:	f001 fee4 	bl	8004e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800308a:	f7fd fcd6 	bl	8000a3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308e:	2360      	movs	r3, #96	; 0x60
 8003090:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8003092:	231c      	movs	r3, #28
 8003094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4812      	ldr	r0, [pc, #72]	; (80030f0 <MX_TIM4_Init+0x114>)
 80030a6:	f001 fa6f 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80030b0:	f7fd fcc3 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	2208      	movs	r2, #8
 80030b8:	4619      	mov	r1, r3
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_TIM4_Init+0x114>)
 80030bc:	f001 fa64 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80030c6:	f7fd fcb8 	bl	8000a3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	220c      	movs	r2, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	4807      	ldr	r0, [pc, #28]	; (80030f0 <MX_TIM4_Init+0x114>)
 80030d2:	f001 fa59 	bl	8004588 <HAL_TIM_PWM_ConfigChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80030dc:	f7fd fcad 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <MX_TIM4_Init+0x114>)
 80030e2:	f000 f84d 	bl	8003180 <HAL_TIM_MspPostInit>

}
 80030e6:	bf00      	nop
 80030e8:	3738      	adds	r7, #56	; 0x38
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000104 	.word	0x20000104
 80030f4:	40000800 	.word	0x40000800

080030f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d10c      	bne.n	8003124 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003122:	e022      	b.n	800316a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <HAL_TIM_Base_MspInit+0x80>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10c      	bne.n	8003148 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	61d3      	str	r3, [r2, #28]
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
}
 8003146:	e010      	b.n	800316a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0b      	ldr	r2, [pc, #44]	; (800317c <HAL_TIM_Base_MspInit+0x84>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10b      	bne.n	800316a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	61d3      	str	r3, [r2, #28]
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_TIM_Base_MspInit+0x7c>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d118      	bne.n	80031d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a34      	ldr	r2, [pc, #208]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031b8:	2304      	movs	r3, #4
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	482c      	ldr	r0, [pc, #176]	; (800327c <HAL_TIM_MspPostInit+0xfc>)
 80031cc:	f000 fa68 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80031d0:	e04e      	b.n	8003270 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <HAL_TIM_MspPostInit+0x100>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d12b      	bne.n	8003234 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031dc:	4b26      	ldr	r3, [pc, #152]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031e2:	f043 0310 	orr.w	r3, r3, #16
 80031e6:	6193      	str	r3, [r2, #24]
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2302      	movs	r3, #2
 8003200:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	481e      	ldr	r0, [pc, #120]	; (8003284 <HAL_TIM_MspPostInit+0x104>)
 800320a:	f000 fa49 	bl	80036a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_TIM_MspPostInit+0x108>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_TIM_MspPostInit+0x108>)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	6053      	str	r3, [r2, #4]
}
 8003232:	e01d      	b.n	8003270 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_TIM_MspPostInit+0x10c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d118      	bne.n	8003270 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6193      	str	r3, [r2, #24]
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_TIM_MspPostInit+0xf8>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003256:	f44f 7350 	mov.w	r3, #832	; 0x340
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2302      	movs	r3, #2
 8003262:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <HAL_TIM_MspPostInit+0x110>)
 800326c:	f000 fa18 	bl	80036a0 <HAL_GPIO_Init>
}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40010800 	.word	0x40010800
 8003280:	40000400 	.word	0x40000400
 8003284:	40011000 	.word	0x40011000
 8003288:	40010000 	.word	0x40010000
 800328c:	40000800 	.word	0x40000800
 8003290:	40010c00 	.word	0x40010c00

08003294 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <MX_USART1_UART_Init+0x50>)
 800329c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032ba:	220c      	movs	r2, #12
 80032bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_USART1_UART_Init+0x4c>)
 80032cc:	f001 fe2a 	bl	8004f24 <HAL_UART_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032d6:	f7fd fbb0 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000014c 	.word	0x2000014c
 80032e4:	40013800 	.word	0x40013800

080032e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <HAL_UART_MspInit+0x8c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d131      	bne.n	800336c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_UART_MspInit+0x90>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <HAL_UART_MspInit+0x90>)
 800330e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_UART_MspInit+0x90>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_UART_MspInit+0x90>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <HAL_UART_MspInit+0x90>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_UART_MspInit+0x90>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f107 0310 	add.w	r3, r7, #16
 800334a:	4619      	mov	r1, r3
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <HAL_UART_MspInit+0x94>)
 800334e:	f000 f9a7 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <HAL_UART_MspInit+0x94>)
 8003368:	f000 f99a 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013800 	.word	0x40013800
 8003378:	40021000 	.word	0x40021000
 800337c:	40010800 	.word	0x40010800

08003380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003388:	e002      	b.n	8003390 <LoopCopyDataInit>

0800338a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800338c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800338e:	3304      	adds	r3, #4

08003390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003394:	d3f9      	bcc.n	800338a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003398:	4c0a      	ldr	r4, [pc, #40]	; (80033c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800339c:	e001      	b.n	80033a2 <LoopFillZerobss>

0800339e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800339e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a0:	3204      	adds	r2, #4

080033a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a4:	d3fb      	bcc.n	800339e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033a6:	f7ff fd04 	bl	8002db2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033aa:	f002 f8f3 	bl	8005594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ae:	f7fd faaf 	bl	8000910 <main>
  bx lr
 80033b2:	4770      	bx	lr
  ldr r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80033bc:	08005624 	.word	0x08005624
  ldr r2, =_sbss
 80033c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80033c4:	20000194 	.word	0x20000194

080033c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033c8:	e7fe      	b.n	80033c8 <ADC1_2_IRQHandler>
	...

080033cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_Init+0x28>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_Init+0x28>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033dc:	2003      	movs	r0, #3
 80033de:	f000 f92b 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e2:	200f      	movs	r0, #15
 80033e4:	f000 f808 	bl	80033f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e8:	f7ff fc8a 	bl	8002d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40022000 	.word	0x40022000

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x54>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_InitTick+0x58>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f935 	bl	8003686 <HAL_SYSTICK_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00e      	b.n	8003444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0f      	cmp	r3, #15
 800342a:	d80a      	bhi.n	8003442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342c:	2200      	movs	r2, #0
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003434:	f000 f90b 	bl	800364e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <HAL_InitTick+0x5c>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000000 	.word	0x20000000
 8003450:	20000008 	.word	0x20000008
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_IncTick+0x1c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_IncTick+0x20>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a03      	ldr	r2, [pc, #12]	; (8003478 <HAL_IncTick+0x20>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	20000008 	.word	0x20000008
 8003478:	20000190 	.word	0x20000190

0800347c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <HAL_GetTick+0x10>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	20000190 	.word	0x20000190

08003490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff fff0 	bl	800347c <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a8:	d005      	beq.n	80034b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_Delay+0x44>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034b6:	bf00      	nop
 80034b8:	f7ff ffe0 	bl	800347c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d8f7      	bhi.n	80034b8 <HAL_Delay+0x28>
  {
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000008 	.word	0x20000008

080034d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f4:	4013      	ands	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	60d3      	str	r3, [r2, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <__NVIC_GetPriorityGrouping+0x18>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 0307 	and.w	r3, r3, #7
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	; (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	; (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003618:	f7ff ff90 	bl	800353c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff49 	bl	80034d8 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff5e 	bl	8003520 <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff90 	bl	8003590 <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5f 	bl	800353c <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ffb0 	bl	80035f4 <SysTick_Config>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08b      	sub	sp, #44	; 0x2c
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b2:	e179      	b.n	80039a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036b4:	2201      	movs	r2, #1
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f040 8168 	bne.w	80039a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a96      	ldr	r2, [pc, #600]	; (8003930 <HAL_GPIO_Init+0x290>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d05e      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036dc:	4a94      	ldr	r2, [pc, #592]	; (8003930 <HAL_GPIO_Init+0x290>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d875      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036e2:	4a94      	ldr	r2, [pc, #592]	; (8003934 <HAL_GPIO_Init+0x294>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d058      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036e8:	4a92      	ldr	r2, [pc, #584]	; (8003934 <HAL_GPIO_Init+0x294>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d86f      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036ee:	4a92      	ldr	r2, [pc, #584]	; (8003938 <HAL_GPIO_Init+0x298>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d052      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036f4:	4a90      	ldr	r2, [pc, #576]	; (8003938 <HAL_GPIO_Init+0x298>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d869      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036fa:	4a90      	ldr	r2, [pc, #576]	; (800393c <HAL_GPIO_Init+0x29c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d04c      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 8003700:	4a8e      	ldr	r2, [pc, #568]	; (800393c <HAL_GPIO_Init+0x29c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d863      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 8003706:	4a8e      	ldr	r2, [pc, #568]	; (8003940 <HAL_GPIO_Init+0x2a0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d046      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 800370c:	4a8c      	ldr	r2, [pc, #560]	; (8003940 <HAL_GPIO_Init+0x2a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d85d      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 8003712:	2b12      	cmp	r3, #18
 8003714:	d82a      	bhi.n	800376c <HAL_GPIO_Init+0xcc>
 8003716:	2b12      	cmp	r3, #18
 8003718:	d859      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_GPIO_Init+0x80>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	0800379b 	.word	0x0800379b
 8003724:	08003775 	.word	0x08003775
 8003728:	08003787 	.word	0x08003787
 800372c:	080037c9 	.word	0x080037c9
 8003730:	080037cf 	.word	0x080037cf
 8003734:	080037cf 	.word	0x080037cf
 8003738:	080037cf 	.word	0x080037cf
 800373c:	080037cf 	.word	0x080037cf
 8003740:	080037cf 	.word	0x080037cf
 8003744:	080037cf 	.word	0x080037cf
 8003748:	080037cf 	.word	0x080037cf
 800374c:	080037cf 	.word	0x080037cf
 8003750:	080037cf 	.word	0x080037cf
 8003754:	080037cf 	.word	0x080037cf
 8003758:	080037cf 	.word	0x080037cf
 800375c:	080037cf 	.word	0x080037cf
 8003760:	080037cf 	.word	0x080037cf
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003791 	.word	0x08003791
 800376c:	4a75      	ldr	r2, [pc, #468]	; (8003944 <HAL_GPIO_Init+0x2a4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003772:	e02c      	b.n	80037ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	623b      	str	r3, [r7, #32]
          break;
 800377a:	e029      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	3304      	adds	r3, #4
 8003782:	623b      	str	r3, [r7, #32]
          break;
 8003784:	e024      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	3308      	adds	r3, #8
 800378c:	623b      	str	r3, [r7, #32]
          break;
 800378e:	e01f      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	330c      	adds	r3, #12
 8003796:	623b      	str	r3, [r7, #32]
          break;
 8003798:	e01a      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037a2:	2304      	movs	r3, #4
 80037a4:	623b      	str	r3, [r7, #32]
          break;
 80037a6:	e013      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037b0:	2308      	movs	r3, #8
 80037b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	611a      	str	r2, [r3, #16]
          break;
 80037ba:	e009      	b.n	80037d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037bc:	2308      	movs	r3, #8
 80037be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	615a      	str	r2, [r3, #20]
          break;
 80037c6:	e003      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
          break;
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          break;
 80037ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	d801      	bhi.n	80037da <HAL_GPIO_Init+0x13a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <HAL_GPIO_Init+0x13e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d802      	bhi.n	80037ec <HAL_GPIO_Init+0x14c>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	e002      	b.n	80037f2 <HAL_GPIO_Init+0x152>
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	3b08      	subs	r3, #8
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	210f      	movs	r1, #15
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80c1 	beq.w	80039a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003820:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_GPIO_Init+0x2a8>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a48      	ldr	r2, [pc, #288]	; (8003948 <HAL_GPIO_Init+0x2a8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_GPIO_Init+0x2a8>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003838:	4a44      	ldr	r2, [pc, #272]	; (800394c <HAL_GPIO_Init+0x2ac>)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_GPIO_Init+0x2b0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01f      	beq.n	80038a4 <HAL_GPIO_Init+0x204>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <HAL_GPIO_Init+0x2b4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d019      	beq.n	80038a0 <HAL_GPIO_Init+0x200>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <HAL_GPIO_Init+0x2b8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1fc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a39      	ldr	r2, [pc, #228]	; (800395c <HAL_GPIO_Init+0x2bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1f8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_GPIO_Init+0x2c0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a37      	ldr	r2, [pc, #220]	; (8003964 <HAL_GPIO_Init+0x2c4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1f0>
 800388c:	2305      	movs	r3, #5
 800388e:	e00a      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 8003890:	2306      	movs	r3, #6
 8003892:	e008      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 8003894:	2304      	movs	r3, #4
 8003896:	e006      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 8003898:	2303      	movs	r3, #3
 800389a:	e004      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 800389c:	2302      	movs	r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_GPIO_Init+0x206>
 80038a4:	2300      	movs	r3, #0
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	f002 0203 	and.w	r2, r2, #3
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	4093      	lsls	r3, r2
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_GPIO_Init+0x2ac>)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4924      	ldr	r1, [pc, #144]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	4920      	ldr	r1, [pc, #128]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	491a      	ldr	r1, [pc, #104]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	43db      	mvns	r3, r3
 800390e:	4916      	ldr	r1, [pc, #88]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 8003910:	4013      	ands	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d025      	beq.n	800396c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4910      	ldr	r1, [pc, #64]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
 800392c:	e025      	b.n	800397a <HAL_GPIO_Init+0x2da>
 800392e:	bf00      	nop
 8003930:	10320000 	.word	0x10320000
 8003934:	10310000 	.word	0x10310000
 8003938:	10220000 	.word	0x10220000
 800393c:	10210000 	.word	0x10210000
 8003940:	10120000 	.word	0x10120000
 8003944:	10110000 	.word	0x10110000
 8003948:	40021000 	.word	0x40021000
 800394c:	40010000 	.word	0x40010000
 8003950:	40010800 	.word	0x40010800
 8003954:	40010c00 	.word	0x40010c00
 8003958:	40011000 	.word	0x40011000
 800395c:	40011400 	.word	0x40011400
 8003960:	40011800 	.word	0x40011800
 8003964:	40011c00 	.word	0x40011c00
 8003968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_GPIO_Init+0x324>)
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	43db      	mvns	r3, r3
 8003974:	4913      	ldr	r1, [pc, #76]	; (80039c4 <HAL_GPIO_Init+0x324>)
 8003976:	4013      	ands	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_GPIO_Init+0x324>)
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_GPIO_Init+0x324>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
 8003992:	e006      	b.n	80039a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_GPIO_Init+0x324>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	43db      	mvns	r3, r3
 800399c:	4909      	ldr	r1, [pc, #36]	; (80039c4 <HAL_GPIO_Init+0x324>)
 800399e:	4013      	ands	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f47f ae7e 	bne.w	80036b4 <HAL_GPIO_Init+0x14>
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	372c      	adds	r7, #44	; 0x2c
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40010400 	.word	0x40010400

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039e4:	e003      	b.n	80039ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e272      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8087 	beq.w	8003b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d00c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a24:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d112      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5e>
 8003a30:	4b8c      	ldr	r3, [pc, #560]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3e:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x12c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d168      	bne.n	8003b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e24c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x76>
 8003a60:	4b80      	ldr	r3, [pc, #512]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a7f      	ldr	r2, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e02e      	b.n	8003acc <HAL_RCC_OscConfig+0xd4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b7b      	ldr	r3, [pc, #492]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7a      	ldr	r2, [pc, #488]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a77      	ldr	r2, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xd4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xbc>
 8003a9a:	4b72      	ldr	r3, [pc, #456]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a71      	ldr	r2, [pc, #452]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd4>
 8003ab4:	4b6b      	ldr	r3, [pc, #428]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6a      	ldr	r2, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a67      	ldr	r2, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7ff fcd2 	bl	800347c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7ff fcce 	bl	800347c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e200      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b5d      	ldr	r3, [pc, #372]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe4>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7ff fcbe 	bl	800347c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff fcba 	bl	800347c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1ec      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x10c>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b3e:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x18c>
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x176>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1c0      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4939      	ldr	r1, [pc, #228]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e03a      	b.n	8003bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7ff fc73 	bl	800347c <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7ff fc6f 	bl	800347c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1a1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4927      	ldr	r1, [pc, #156]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7ff fc52 	bl	800347c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7ff fc4e 	bl	800347c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e180      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03a      	beq.n	8003c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d019      	beq.n	8003c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_RCC_OscConfig+0x274>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7ff fc32 	bl	800347c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7ff fc2e 	bl	800347c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e160      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f000 fad8 	bl	80041f0 <RCC_Delay>
 8003c40:	e01c      	b.n	8003c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_RCC_OscConfig+0x274>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7ff fc18 	bl	800347c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4e:	e00f      	b.n	8003c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c50:	f7ff fc14 	bl	800347c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d908      	bls.n	8003c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e146      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	42420000 	.word	0x42420000
 8003c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e9      	bne.n	8003c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a6 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8e:	4b8b      	ldr	r3, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10d      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	61d3      	str	r3, [r2, #28]
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b82      	ldr	r3, [pc, #520]	; (8003ec0 <HAL_RCC_OscConfig+0x4c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d118      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc2:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <HAL_RCC_OscConfig+0x4c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7e      	ldr	r2, [pc, #504]	; (8003ec0 <HAL_RCC_OscConfig+0x4c8>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7ff fbd5 	bl	800347c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7ff fbd1 	bl	800347c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b64      	cmp	r3, #100	; 0x64
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e103      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	4b75      	ldr	r3, [pc, #468]	; (8003ec0 <HAL_RCC_OscConfig+0x4c8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x312>
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6213      	str	r3, [r2, #32]
 8003d08:	e02d      	b.n	8003d66 <HAL_RCC_OscConfig+0x36e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x334>
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a69      	ldr	r2, [pc, #420]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6213      	str	r3, [r2, #32]
 8003d1e:	4b67      	ldr	r3, [pc, #412]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a66      	ldr	r2, [pc, #408]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6213      	str	r3, [r2, #32]
 8003d2a:	e01c      	b.n	8003d66 <HAL_RCC_OscConfig+0x36e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x356>
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6213      	str	r3, [r2, #32]
 8003d40:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6213      	str	r3, [r2, #32]
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCC_OscConfig+0x36e>
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4a5a      	ldr	r2, [pc, #360]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6213      	str	r3, [r2, #32]
 8003d5a:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7ff fb85 	bl	800347c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7ff fb81 	bl	800347c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0b1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <HAL_RCC_OscConfig+0x37e>
 8003d98:	e014      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7ff fb6f 	bl	800347c <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7ff fb6b 	bl	800347c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e09b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db8:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ee      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8087 	beq.w	8003eee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de0:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d061      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d146      	bne.n	8003e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7ff fb3f 	bl	800347c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7ff fb3b 	bl	800347c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e06d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d108      	bne.n	8003e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4921      	ldr	r1, [pc, #132]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a19      	ldr	r1, [r3, #32]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	491b      	ldr	r1, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7ff fb0f 	bl	800347c <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7ff fb0b 	bl	800347c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46a>
 8003e80:	e035      	b.n	8003eee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7ff faf8 	bl	800347c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7ff faf4 	bl	800347c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e026      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x498>
 8003eae:	e01e      	b.n	8003eee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e019      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x500>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d0      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 0207 	bic.w	r2, r3, #7
 8003f26:	4965      	ldr	r1, [pc, #404]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d040      	beq.n	800401c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e073      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06b      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4936      	ldr	r1, [pc, #216]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7ff fa46 	bl	800347c <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7ff fa42 	bl	800347c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e053      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d210      	bcs.n	800404c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0207 	bic.w	r2, r3, #7
 8004032:	4922      	ldr	r1, [pc, #136]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e032      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800408a:	f000 f821 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1cc>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f9a4 	bl	80033f8 <HAL_InitTick>

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08005604 	.word	0x08005604
 80040c8:	20000000 	.word	0x20000000
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	b490      	push	{r4, r7}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_RCC_GetSysClockFreq+0xac>)
 80040d8:	1d3c      	adds	r4, r7, #4
 80040da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040e0:	f240 2301 	movw	r3, #513	; 0x201
 80040e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b04      	cmp	r3, #4
 8004108:	d002      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x40>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x46>
 800410e:	e02b      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004112:	623b      	str	r3, [r7, #32]
      break;
 8004114:	e02b      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3328      	adds	r3, #40	; 0x28
 8004120:	443b      	add	r3, r7
 8004122:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004126:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0c5b      	lsrs	r3, r3, #17
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	3328      	adds	r3, #40	; 0x28
 800413e:	443b      	add	r3, r7
 8004140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <HAL_RCC_GetSysClockFreq+0xb4>)
 800414a:	fb03 f202 	mul.w	r2, r3, r2
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	e004      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	623b      	str	r3, [r7, #32]
      break;
 8004166:	e002      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetSysClockFreq+0xb4>)
 800416a:	623b      	str	r3, [r7, #32]
      break;
 800416c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416e:	6a3b      	ldr	r3, [r7, #32]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bc90      	pop	{r4, r7}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	080055f4 	.word	0x080055f4
 8004180:	40021000 	.word	0x40021000
 8004184:	007a1200 	.word	0x007a1200
 8004188:	003d0900 	.word	0x003d0900

0800418c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b02      	ldr	r3, [pc, #8]	; (800419c <HAL_RCC_GetHCLKFreq+0x10>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	20000000 	.word	0x20000000

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a4:	f7ff fff2 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4903      	ldr	r1, [pc, #12]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08005614 	.word	0x08005614

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041cc:	f7ff ffde 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	0adb      	lsrs	r3, r3, #11
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	08005614 	.word	0x08005614

080041f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <RCC_Delay+0x34>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <RCC_Delay+0x38>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a5b      	lsrs	r3, r3, #9
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800420c:	bf00      	nop
  }
  while (Delay --);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	60fa      	str	r2, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f9      	bne.n	800420c <RCC_Delay+0x1c>
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	20000000 	.word	0x20000000
 8004228:	10624dd3 	.word	0x10624dd3

0800422c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_SRAM_Init+0x1c>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d101      	bne.n	800424c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e038      	b.n	80042be <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7fc f887 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3308      	adds	r3, #8
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f001 f8b1 	bl	80053d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	461a      	mov	r2, r3
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	f001 f913 	bl	80054ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6858      	ldr	r0, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	f001 f93e 	bl	8005514 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	f041 0101 	orr.w	r1, r1, #1
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e041      	b.n	800435c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fe ff03 	bl	80030f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f000 fac1 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e041      	b.n	80043fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f839 	bl	8004402 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fa72 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x24>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e022      	b.n	800447e <HAL_TIM_PWM_Start+0x6a>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d109      	bne.n	8004452 <HAL_TIM_PWM_Start+0x3e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e015      	b.n	800447e <HAL_TIM_PWM_Start+0x6a>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start+0x58>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e008      	b.n	800447e <HAL_TIM_PWM_Start+0x6a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e072      	b.n	800456c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_TIM_PWM_Start+0x82>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004494:	e013      	b.n	80044be <HAL_TIM_PWM_Start+0xaa>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0x92>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a4:	e00b      	b.n	80044be <HAL_TIM_PWM_Start+0xaa>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0xa2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b4:	e003      	b.n	80044be <HAL_TIM_PWM_Start+0xaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fc9c 	bl	8004e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a28      	ldr	r2, [pc, #160]	; (8004574 <HAL_TIM_PWM_Start+0x160>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_PWM_Start+0xcc>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a27      	ldr	r2, [pc, #156]	; (8004578 <HAL_TIM_PWM_Start+0x164>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_PWM_Start+0xd0>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_TIM_PWM_Start+0xd2>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_TIM_PWM_Start+0x160>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIM_PWM_Start+0x122>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_TIM_PWM_Start+0x164>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_TIM_PWM_Start+0x122>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d00e      	beq.n	8004536 <HAL_TIM_PWM_Start+0x122>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_TIM_PWM_Start+0x168>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIM_PWM_Start+0x122>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_TIM_PWM_Start+0x16c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIM_PWM_Start+0x122>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <HAL_TIM_PWM_Start+0x170>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d010      	beq.n	800456a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e007      	b.n	800456a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00

08004588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0ac      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	f200 809f 	bhi.w	80046f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080046f1 	.word	0x080046f1
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	080046f1 	.word	0x080046f1
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080046f1 	.word	0x080046f1
 80045d0:	080046f1 	.word	0x080046f1
 80045d4:	080046f1 	.word	0x080046f1
 80045d8:	0800466f 	.word	0x0800466f
 80045dc:	080046f1 	.word	0x080046f1
 80045e0:	080046f1 	.word	0x080046f1
 80045e4:	080046f1 	.word	0x080046f1
 80045e8:	080046af 	.word	0x080046af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f9c4 	bl	8004980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
      break;
 800462a:	e062      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa14 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]
      break;
 800466c:	e041      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fa67 	bl	8004b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0208 	orr.w	r2, r2, #8
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
      break;
 80046ac:	e021      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fabb 	bl	8004c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIM_ConfigClockSource+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e0b3      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x180>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004742:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d03e      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xd0>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475a:	f200 8087 	bhi.w	800486c <HAL_TIM_ConfigClockSource+0x168>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	f000 8085 	beq.w	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d87f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d01a      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xa2>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d87b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d050      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x116>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d877      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d03c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0xf6>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d873      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d058      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x136>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d86f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d064      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d86b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d060      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d867      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x168>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d05a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a4:	e062      	b.n	800486c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f000 fb06 	bl	8004dc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e04e      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f000 faef 	bl	8004dc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f6:	609a      	str	r2, [r3, #8]
      break;
 80047f8:	e03b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fa66 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2150      	movs	r1, #80	; 0x50
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fabd 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004818:	e02b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fa84 	bl	8004d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2160      	movs	r1, #96	; 0x60
 8004832:	4618      	mov	r0, r3
 8004834:	f000 faad 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004838:	e01b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fa46 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa9d 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004858:	e00b      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fa94 	bl	8004d92 <TIM_ITRx_SetConfig>
        break;
 800486a:	e002      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a33      	ldr	r2, [pc, #204]	; (800496c <TIM_Base_SetConfig+0xe0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a32      	ldr	r2, [pc, #200]	; (8004970 <TIM_Base_SetConfig+0xe4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <TIM_Base_SetConfig+0xe8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <TIM_Base_SetConfig+0xec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a2d      	ldr	r2, [pc, #180]	; (800497c <TIM_Base_SetConfig+0xf0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <TIM_Base_SetConfig+0xe0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_Base_SetConfig+0x82>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_Base_SetConfig+0xe4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0x82>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <TIM_Base_SetConfig+0xe8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0x82>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <TIM_Base_SetConfig+0xec>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0x82>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <TIM_Base_SetConfig+0xf0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <TIM_Base_SetConfig+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0xc8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <TIM_Base_SetConfig+0xe4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	615a      	str	r2, [r3, #20]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00

08004980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <TIM_OC1_SetConfig+0xd8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x64>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <TIM_OC1_SetConfig+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <TIM_OC1_SetConfig+0xd8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC1_SetConfig+0x8e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <TIM_OC1_SetConfig+0xdc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40013400 	.word	0x40013400

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0210 	bic.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <TIM_OC2_SetConfig+0xe0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC2_SetConfig+0x68>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10d      	bne.n	8004ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <TIM_OC2_SetConfig+0xe0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC2_SetConfig+0x94>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC2_SetConfig+0xe4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40013400 	.word	0x40013400

08004b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <TIM_OC3_SetConfig+0xe0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC3_SetConfig+0x66>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <TIM_OC3_SetConfig+0xe4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10d      	bne.n	8004bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <TIM_OC3_SetConfig+0xe0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC3_SetConfig+0x92>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <TIM_OC3_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40013400 	.word	0x40013400

08004c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	031b      	lsls	r3, r3, #12
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <TIM_OC4_SetConfig+0xa0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC4_SetConfig+0x68>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <TIM_OC4_SetConfig+0xa4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	019b      	lsls	r3, r3, #6
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40013400 	.word	0x40013400

08004cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 030a 	bic.w	r3, r3, #10
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f023 0210 	bic.w	r2, r3, #16
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	031b      	lsls	r3, r3, #12
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	621a      	str	r2, [r3, #32]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 0307 	orr.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	401a      	ands	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e050      	b.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d00e      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00

08004f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e03f      	b.n	8004fb6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe f9cc 	bl	80032e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f9a7 	bl	80052bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b08a      	sub	sp, #40	; 0x28
 8004fc2:	af02      	add	r7, sp, #8
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d17c      	bne.n	80050d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Transmit+0x2c>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e075      	b.n	80050da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Transmit+0x3e>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e06e      	b.n	80050da <HAL_UART_Transmit+0x11c>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2221      	movs	r2, #33	; 0x21
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005012:	f7fe fa33 	bl	800347c <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502c:	d108      	bne.n	8005040 <HAL_UART_Transmit+0x82>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e003      	b.n	8005048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005050:	e02a      	b.n	80050a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f8e2 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e036      	b.n	80050da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3302      	adds	r3, #2
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e007      	b.n	800509a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3301      	adds	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1cf      	bne.n	8005052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2140      	movs	r1, #64	; 0x40
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f8b2 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e006      	b.n	80050da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b08a      	sub	sp, #40	; 0x28
 80050e6:	af02      	add	r7, sp, #8
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	f040 808c 	bne.w	800521c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Receive+0x2e>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e084      	b.n	800521e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_UART_Receive+0x40>
 800511e:	2302      	movs	r3, #2
 8005120:	e07d      	b.n	800521e <HAL_UART_Receive+0x13c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	; 0x22
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513e:	f7fe f99d 	bl	800347c <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d108      	bne.n	800516c <HAL_UART_Receive+0x8a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e003      	b.n	8005174 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800517c:	e043      	b.n	8005206 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2120      	movs	r1, #32
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f84c 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e042      	b.n	800521e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3302      	adds	r3, #2
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e01f      	b.n	80051f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d007      	beq.n	80051d2 <HAL_UART_Receive+0xf0>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_UART_Receive+0xfe>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e008      	b.n	80051f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1b6      	bne.n	800517e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005236:	e02c      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523e:	d028      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0x30>
 8005246:	f7fe f919 	bl	800347c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d21d      	bcs.n	8005292 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005264:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e00f      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d0c3      	beq.n	8005238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052f6:	f023 030c 	bic.w	r3, r3, #12
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	430b      	orrs	r3, r1
 8005302:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <UART_SetConfig+0x114>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe ff50 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	e002      	b.n	8005332 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fe ff38 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8005330:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <UART_SetConfig+0x118>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	0119      	lsls	r1, r3, #4
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	fbb2 f2f3 	udiv	r2, r2, r3
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <UART_SetConfig+0x118>)
 800536a:	fba3 0302 	umull	r0, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	2064      	movs	r0, #100	; 0x64
 8005372:	fb00 f303 	mul.w	r3, r0, r3
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	3332      	adds	r3, #50	; 0x32
 800537c:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <UART_SetConfig+0x118>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005388:	4419      	add	r1, r3
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009a      	lsls	r2, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <UART_SetConfig+0x118>)
 80053a2:	fba3 0302 	umull	r0, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2064      	movs	r0, #100	; 0x64
 80053aa:	fb00 f303 	mul.w	r3, r0, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	3332      	adds	r3, #50	; 0x32
 80053b4:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <UART_SetConfig+0x118>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	440a      	add	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40013800 	.word	0x40013800
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	f023 0101 	bic.w	r1, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d102      	bne.n	8005408 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e001      	b.n	800540c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005418:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800541e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005424:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800542a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005430:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005436:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800543c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005442:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005448:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <FSMC_NORSRAM_Init+0xd0>)
 8005468:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005470:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005478:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	43db      	mvns	r3, r3
 8005488:	ea02 0103 	and.w	r1, r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4319      	orrs	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	0008fb7f 	.word	0x0008fb7f

080054ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	431a      	orrs	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	051b      	lsls	r3, r3, #20
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	3b02      	subs	r3, #2
 80054f2:	061b      	lsls	r3, r3, #24
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	3201      	adds	r2, #1
 8005500:	4319      	orrs	r1, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005528:	d11d      	bne.n	8005566 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005534:	4013      	ands	r3, r2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	6811      	ldr	r1, [r2, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	6852      	ldr	r2, [r2, #4]
 800553e:	0112      	lsls	r2, r2, #4
 8005540:	4311      	orrs	r1, r2
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	0212      	lsls	r2, r2, #8
 8005548:	4311      	orrs	r1, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	6992      	ldr	r2, [r2, #24]
 800554e:	4311      	orrs	r1, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	68d2      	ldr	r2, [r2, #12]
 8005554:	0412      	lsls	r2, r2, #16
 8005556:	430a      	orrs	r2, r1
 8005558:	ea43 0102 	orr.w	r1, r3, r2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005564:	e005      	b.n	8005572 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800556e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	cff00000 	.word	0xcff00000

08005584 <memset>:
 8005584:	4603      	mov	r3, r0
 8005586:	4402      	add	r2, r0
 8005588:	4293      	cmp	r3, r2
 800558a:	d100      	bne.n	800558e <memset+0xa>
 800558c:	4770      	bx	lr
 800558e:	f803 1b01 	strb.w	r1, [r3], #1
 8005592:	e7f9      	b.n	8005588 <memset+0x4>

08005594 <__libc_init_array>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	2600      	movs	r6, #0
 8005598:	4d0c      	ldr	r5, [pc, #48]	; (80055cc <__libc_init_array+0x38>)
 800559a:	4c0d      	ldr	r4, [pc, #52]	; (80055d0 <__libc_init_array+0x3c>)
 800559c:	1b64      	subs	r4, r4, r5
 800559e:	10a4      	asrs	r4, r4, #2
 80055a0:	42a6      	cmp	r6, r4
 80055a2:	d109      	bne.n	80055b8 <__libc_init_array+0x24>
 80055a4:	f000 f81a 	bl	80055dc <_init>
 80055a8:	2600      	movs	r6, #0
 80055aa:	4d0a      	ldr	r5, [pc, #40]	; (80055d4 <__libc_init_array+0x40>)
 80055ac:	4c0a      	ldr	r4, [pc, #40]	; (80055d8 <__libc_init_array+0x44>)
 80055ae:	1b64      	subs	r4, r4, r5
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	42a6      	cmp	r6, r4
 80055b4:	d105      	bne.n	80055c2 <__libc_init_array+0x2e>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055bc:	4798      	blx	r3
 80055be:	3601      	adds	r6, #1
 80055c0:	e7ee      	b.n	80055a0 <__libc_init_array+0xc>
 80055c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c6:	4798      	blx	r3
 80055c8:	3601      	adds	r6, #1
 80055ca:	e7f2      	b.n	80055b2 <__libc_init_array+0x1e>
 80055cc:	0800561c 	.word	0x0800561c
 80055d0:	0800561c 	.word	0x0800561c
 80055d4:	0800561c 	.word	0x0800561c
 80055d8:	08005620 	.word	0x08005620

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
