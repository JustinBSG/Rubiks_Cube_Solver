
Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080037c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080037c4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8d7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002130  00000000  00000000  0002a94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  0002ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6a  00000000  00000000  0002d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4bc  00000000  00000000  0002e28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e93b  00000000  00000000  00048746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009932d  00000000  00000000  00057081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000360c  00000000  00000000  000f03b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f39bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003778 	.word	0x08003778

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003778 	.word	0x08003778

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f002 fadd 	bl	800287c <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fbf5 	bl	8000ab6 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f001 fcf2 	bl	8001d24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f001 fce5 	bl	8001d24 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000070 	.word	0x20000070
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <MX_GPIO_Init+0x118>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a3f      	ldr	r2, [pc, #252]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a39      	ldr	r2, [pc, #228]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0x118>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0x118>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0x118>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <MX_GPIO_Init+0x11c>)
 800041c:	f001 fe2d 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000426:	f001 fe28 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000434:	2302      	movs	r3, #2
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0318 	add.w	r3, r7, #24
 800043c:	4619      	mov	r1, r3
 800043e:	481b      	ldr	r0, [pc, #108]	; (80004ac <MX_GPIO_Init+0x124>)
 8000440:	f001 fc70 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044c:	2302      	movs	r3, #2
 800044e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4619      	mov	r1, r3
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x128>)
 8000458:	f001 fc64 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x11c>)
 8000476:	f001 fc55 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_GPIO_Init+0x120>)
 8000492:	f001 fc47 	bl	8001d24 <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010800 	.word	0x40010800

080004b4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	e002      	b.n	80004c4 <Delay+0x10>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f9      	bne.n	80004be <Delay+0xa>
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f829 	bl	8000534 <LCD_BackLed_Control>
	LCD_Rst();
 80004e2:	f000 f80f 	bl	8000504 <LCD_Rst>
	LCD_REG_Config();
 80004e6:	f000 f85f 	bl	80005a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004f4:	22f0      	movs	r2, #240	; 0xf0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9e6 	bl	80008ca <LCD_Clear>
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <LCD_Rst>:



void LCD_Rst ( void )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <LCD_Rst+0x28>)
 800050e:	f001 fdb4 	bl	800207a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <LCD_Rst+0x2c>)
 8000514:	f7ff ffce 	bl	80004b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LCD_Rst+0x28>)
 800051e:	f001 fdac 	bl	800207a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <LCD_Rst+0x2c>)
 8000524:	f7ff ffc6 	bl	80004b4 <Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40011800 	.word	0x40011800
 8000530:	0002bffc 	.word	0x0002bffc

08000534 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <LCD_BackLed_Control+0x34>)
 800054c:	f001 fd95 	bl	800207a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000550:	e005      	b.n	800055e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <LCD_BackLed_Control+0x34>)
 800055a:	f001 fd8e 	bl	800207a <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40011400 	.word	0x40011400

0800056c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000576:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	8013      	strh	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LCD_Write_Data+0x1c>)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	8013      	strh	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	60020000 	.word	0x60020000

080005a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80005ac:	20cf      	movs	r0, #207	; 0xcf
 80005ae:	f7ff ffdd 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffe8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80005b8:	2081      	movs	r0, #129	; 0x81
 80005ba:	f7ff ffe5 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80005be:	2030      	movs	r0, #48	; 0x30
 80005c0:	f7ff ffe2 	bl	8000588 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80005c4:	20ed      	movs	r0, #237	; 0xed
 80005c6:	f7ff ffd1 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f7ff ffdc 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff ffd9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80005d6:	2012      	movs	r0, #18
 80005d8:	f7ff ffd6 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80005dc:	2081      	movs	r0, #129	; 0x81
 80005de:	f7ff ffd3 	bl	8000588 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80005e2:	20e8      	movs	r0, #232	; 0xe8
 80005e4:	f7ff ffc2 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80005e8:	2085      	movs	r0, #133	; 0x85
 80005ea:	f7ff ffcd 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005ee:	2010      	movs	r0, #16
 80005f0:	f7ff ffca 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f7ff ffc7 	bl	8000588 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80005fa:	20cb      	movs	r0, #203	; 0xcb
 80005fc:	f7ff ffb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000600:	2039      	movs	r0, #57	; 0x39
 8000602:	f7ff ffc1 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000606:	202c      	movs	r0, #44	; 0x2c
 8000608:	f7ff ffbe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffbb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000612:	2034      	movs	r0, #52	; 0x34
 8000614:	f7ff ffb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ffb5 	bl	8000588 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800061e:	20f7      	movs	r0, #247	; 0xf7
 8000620:	f7ff ffa4 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000624:	2020      	movs	r0, #32
 8000626:	f7ff ffaf 	bl	8000588 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800062a:	20ea      	movs	r0, #234	; 0xea
 800062c:	f7ff ff9e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffa9 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffa6 	bl	8000588 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800063c:	20b1      	movs	r0, #177	; 0xb1
 800063e:	f7ff ff95 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffa0 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000648:	201b      	movs	r0, #27
 800064a:	f7ff ff9d 	bl	8000588 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f7ff ff8c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000654:	200a      	movs	r0, #10
 8000656:	f7ff ff97 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800065a:	20a2      	movs	r0, #162	; 0xa2
 800065c:	f7ff ff94 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000660:	20c0      	movs	r0, #192	; 0xc0
 8000662:	f7ff ff83 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000666:	2035      	movs	r0, #53	; 0x35
 8000668:	f7ff ff8e 	bl	8000588 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800066c:	20c1      	movs	r0, #193	; 0xc1
 800066e:	f7ff ff7d 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000672:	2011      	movs	r0, #17
 8000674:	f7ff ff88 	bl	8000588 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000678:	20c5      	movs	r0, #197	; 0xc5
 800067a:	f7ff ff77 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f7ff ff82 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f7ff ff7f 	bl	8000588 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800068a:	20c7      	movs	r0, #199	; 0xc7
 800068c:	f7ff ff6e 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000690:	20a2      	movs	r0, #162	; 0xa2
 8000692:	f7ff ff79 	bl	8000588 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000696:	20f2      	movs	r0, #242	; 0xf2
 8000698:	f7ff ff68 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff73 	bl	8000588 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80006a2:	2026      	movs	r0, #38	; 0x26
 80006a4:	f7ff ff62 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff6d 	bl	8000588 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80006ae:	20e0      	movs	r0, #224	; 0xe0
 80006b0:	f7ff ff5c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80006b4:	200f      	movs	r0, #15
 80006b6:	f7ff ff67 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80006ba:	2026      	movs	r0, #38	; 0x26
 80006bc:	f7ff ff64 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80006c0:	2024      	movs	r0, #36	; 0x24
 80006c2:	f7ff ff61 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80006c6:	200b      	movs	r0, #11
 80006c8:	f7ff ff5e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff5b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006d2:	2009      	movs	r0, #9
 80006d4:	f7ff ff58 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80006d8:	2054      	movs	r0, #84	; 0x54
 80006da:	f7ff ff55 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80006de:	20a8      	movs	r0, #168	; 0xa8
 80006e0:	f7ff ff52 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80006e4:	2046      	movs	r0, #70	; 0x46
 80006e6:	f7ff ff4f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ff4c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80006f0:	2017      	movs	r0, #23
 80006f2:	f7ff ff49 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80006f6:	2009      	movs	r0, #9
 80006f8:	f7ff ff46 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff ff43 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000702:	2007      	movs	r0, #7
 8000704:	f7ff ff40 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff3d 	bl	8000588 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800070e:	20e1      	movs	r0, #225	; 0xe1
 8000710:	f7ff ff2c 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff37 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800071a:	2019      	movs	r0, #25
 800071c:	f7ff ff34 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff ff31 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff2e 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff ff2b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff28 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000738:	202a      	movs	r0, #42	; 0x2a
 800073a:	f7ff ff25 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800073e:	2047      	movs	r0, #71	; 0x47
 8000740:	f7ff ff22 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000744:	2039      	movs	r0, #57	; 0x39
 8000746:	f7ff ff1f 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff ff1c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff ff19 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000756:	2006      	movs	r0, #6
 8000758:	f7ff ff16 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800075c:	2030      	movs	r0, #48	; 0x30
 800075e:	f7ff ff13 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000762:	2038      	movs	r0, #56	; 0x38
 8000764:	f7ff ff10 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000768:	200f      	movs	r0, #15
 800076a:	f7ff ff0d 	bl	8000588 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fefc 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f7ff ff07 	bl	8000588 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fef6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff01 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fefe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fefb 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000792:	20ef      	movs	r0, #239	; 0xef
 8000794:	f7ff fef8 	bl	8000588 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000798:	202b      	movs	r0, #43	; 0x2b
 800079a:	f7ff fee7 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fef2 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff feef 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff feec 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80007b0:	203f      	movs	r0, #63	; 0x3f
 80007b2:	f7ff fee9 	bl	8000588 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80007b6:	203a      	movs	r0, #58	; 0x3a
 80007b8:	f7ff fed8 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80007bc:	2055      	movs	r0, #85	; 0x55
 80007be:	f7ff fee3 	bl	8000588 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff fed2 	bl	800056c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <LCD_REG_Config+0x230>)
 80007ca:	f7ff fe73 	bl	80004b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80007ce:	2029      	movs	r0, #41	; 0x29
 80007d0:	f7ff fecc 	bl	800056c <LCD_Write_Cmd>
	
	
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	0002bffc 	.word	0x0002bffc

080007dc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80007fa:	202a      	movs	r0, #42	; 0x2a
 80007fc:	f7ff feb6 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b29b      	uxth	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff febe 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb8 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	4413      	add	r3, r2
 800081e:	3b01      	subs	r3, #1
 8000820:	121b      	asrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff feaf 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	4413      	add	r3, r2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3b01      	subs	r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	b29b      	uxth	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fea4 	bl	8000588 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fe93 	bl	800056c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe9b 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe95 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800085e:	88ba      	ldrh	r2, [r7, #4]
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	3b01      	subs	r3, #1
 8000866:	121b      	asrs	r3, r3, #8
 8000868:	b29b      	uxth	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe8c 	bl	8000588 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	883b      	ldrh	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	3b01      	subs	r3, #1
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe81 	bl	8000588 <LCD_Write_Data>
	
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f7ff fe64 	bl	800056c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e006      	b.n	80008b8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe6b 	bl	8000588 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3f4      	bcc.n	80008aa <LCD_FillColor+0x1c>
		
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	4623      	mov	r3, r4
 80008da:	80fb      	strh	r3, [r7, #6]
 80008dc:	4603      	mov	r3, r0
 80008de:	80bb      	strh	r3, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	807b      	strh	r3, [r7, #2]
 80008e4:	4613      	mov	r3, r2
 80008e6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	887a      	ldrh	r2, [r7, #2]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88f8      	ldrh	r0, [r7, #6]
 80008f0:	f7ff ff74 	bl	80007dc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	883a      	ldrh	r2, [r7, #0]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	8b3b      	ldrh	r3, [r7, #24]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f7ff ffc3 	bl	800088e <LCD_FillColor>
	
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f001 f89b 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f887 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f7ff fd33 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000922:	f7ff fc7f 	bl	8000224 <MX_FSMC_Init>
  MX_TIM3_Init();
 8000926:	f000 fe79 	bl	800161c <MX_TIM3_Init>
  MX_TIM4_Init();
 800092a:	f000 ff0f 	bl	800174c <MX_TIM4_Init>
  MX_TIM2_Init();
 800092e:	f000 fdff 	bl	8001530 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000932:	2100      	movs	r1, #0
 8000934:	4839      	ldr	r0, [pc, #228]	; (8000a1c <main+0x10c>)
 8000936:	f002 f895 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800093a:	2108      	movs	r1, #8
 800093c:	4838      	ldr	r0, [pc, #224]	; (8000a20 <main+0x110>)
 800093e:	f002 f891 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000942:	2108      	movs	r1, #8
 8000944:	4835      	ldr	r0, [pc, #212]	; (8000a1c <main+0x10c>)
 8000946:	f002 f88d 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800094a:	210c      	movs	r1, #12
 800094c:	4833      	ldr	r0, [pc, #204]	; (8000a1c <main+0x10c>)
 800094e:	f002 f889 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000952:	2100      	movs	r1, #0
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <main+0x114>)
 8000956:	f002 f885 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800095a:	2104      	movs	r1, #4
 800095c:	4831      	ldr	r0, [pc, #196]	; (8000a24 <main+0x114>)
 800095e:	f002 f881 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000962:	2108      	movs	r1, #8
 8000964:	482f      	ldr	r0, [pc, #188]	; (8000a24 <main+0x114>)
 8000966:	f002 f87d 	bl	8002a64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800096a:	210c      	movs	r1, #12
 800096c:	482d      	ldr	r0, [pc, #180]	; (8000a24 <main+0x114>)
 800096e:	f002 f879 	bl	8002a64 <HAL_TIM_PWM_Start>

  LCD_INIT();
 8000972:	f7ff fdb0 	bl	80004d6 <LCD_INIT>
  servo_init();
 8000976:	f000 fbbb 	bl	80010f0 <servo_init>
  insert_cube();
 800097a:	f000 fbfb 	bl	8001174 <insert_cube>
  uint8_t flag = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET) {
 8000982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000986:	4828      	ldr	r0, [pc, #160]	; (8000a28 <main+0x118>)
 8000988:	f001 fb60 	bl	800204c <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d1f7      	bne.n	8000982 <main+0x72>
		  switch (flag) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b05      	cmp	r3, #5
 8000996:	d8f4      	bhi.n	8000982 <main+0x72>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <main+0x90>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009c9 	.word	0x080009c9
 80009a8:	080009d9 	.word	0x080009d9
 80009ac:	080009e9 	.word	0x080009e9
 80009b0:	080009f9 	.word	0x080009f9
 80009b4:	08000a09 	.word	0x08000a09
		  	  case 0:
		  		  movement_F();
 80009b8:	f000 f882 	bl	8000ac0 <movement_F>
		  		  movement_aF();
 80009bc:	f000 f8a0 	bl	8000b00 <movement_aF>
		  		  flag++;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	3301      	adds	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
		  		  break;
 80009c6:	e027      	b.n	8000a18 <main+0x108>
		  	  case 1:
		  		  movement_R();
 80009c8:	f000 f8ba 	bl	8000b40 <movement_R>
				  movement_aR();
 80009cc:	f000 f8d8 	bl	8000b80 <movement_aR>
				  flag++;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
				  break;
 80009d6:	e01f      	b.n	8000a18 <main+0x108>
		  	  case 2:
		  		  movement_L();
 80009d8:	f000 f8f2 	bl	8000bc0 <movement_L>
				  movement_aL();
 80009dc:	f000 f910 	bl	8000c00 <movement_aL>
				  flag++;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	3301      	adds	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
				  break;
 80009e6:	e017      	b.n	8000a18 <main+0x108>
		  	  case 3:
		  		  movement_B();
 80009e8:	f000 f92a 	bl	8000c40 <movement_B>
				  movement_aB();
 80009ec:	f000 f948 	bl	8000c80 <movement_aB>
				  flag++;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	3301      	adds	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
				  break;
 80009f6:	e00f      	b.n	8000a18 <main+0x108>
		  	  case 4:
		  		  movement_U();
 80009f8:	f000 f962 	bl	8000cc0 <movement_U>
				  movement_aU();
 80009fc:	f000 f9e6 	bl	8000dcc <movement_aU>
				  flag++;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	3301      	adds	r3, #1
 8000a04:	71fb      	strb	r3, [r7, #7]
				  break;
 8000a06:	e007      	b.n	8000a18 <main+0x108>
		  	  case 5:
		  		  movement_D();
 8000a08:	f000 fa66 	bl	8000ed8 <movement_D>
				  movement_aD();
 8000a0c:	f000 faea 	bl	8000fe4 <movement_aD>
				  flag = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
				  break;
 8000a14:	bf00      	nop
 8000a16:	e7b4      	b.n	8000982 <main+0x72>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET) {
 8000a18:	e7b3      	b.n	8000982 <main+0x72>
 8000a1a:	bf00      	nop
 8000a1c:	20000108 	.word	0x20000108
 8000a20:	20000078 	.word	0x20000078
 8000a24:	200000c0 	.word	0x200000c0
 8000a28:	40011000 	.word	0x40011000

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	; 0x40
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe70 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fb19 	bl	80020ac <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a80:	f000 f819 	bl	8000ab6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fd86 	bl	80025b0 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aaa:	f000 f804 	bl	8000ab6 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3740      	adds	r7, #64	; 0x40
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aba:	b672      	cpsid	i
}
 8000abc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abe:	e7fe      	b.n	8000abe <Error_Handler+0x8>

08000ac0 <movement_F>:
 */

#include "movement.h"

// Number of Delay: 4
void movement_F(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	clockwise_90(south_front);
 8000ac4:	2005      	movs	r0, #5
 8000ac6:	f000 fbf7 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ace:	f001 f821 	bl	8001b14 <HAL_Delay>
	servo_pull(south_back);
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f000 fc60 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000adc:	f001 f81a 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	f000 fbb1 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ae6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aea:	f001 f813 	bl	8001b14 <HAL_Delay>
	servo_push(south_back);
 8000aee:	2006      	movs	r0, #6
 8000af0:	f000 fc88 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f001 f80c 	bl	8001b14 <HAL_Delay>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <movement_aF>:

// Number of Delay: 4
void movement_aF(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	anticlockwise_90(south_front);
 8000b04:	2005      	movs	r0, #5
 8000b06:	f000 fc0f 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0e:	f001 f801 	bl	8001b14 <HAL_Delay>
	servo_pull(south_back);
 8000b12:	2006      	movs	r0, #6
 8000b14:	f000 fc40 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f000 fffa 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fb91 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2a:	f000 fff3 	bl	8001b14 <HAL_Delay>
	servo_push(south_back);
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f000 fc68 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 ffec 	bl	8001b14 <HAL_Delay>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <movement_R>:

// Number of Delay: 4
void movement_R(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	clockwise_90(east_front);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 fbb7 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4e:	f000 ffe1 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f000 fc20 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f000 ffda 	bl	8001b14 <HAL_Delay>
	centre_0(east_front);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 fb71 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6a:	f000 ffd3 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000b6e:	2004      	movs	r0, #4
 8000b70:	f000 fc48 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b78:	f000 ffcc 	bl	8001b14 <HAL_Delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <movement_aR>:

// Number of Delay: 4
void movement_aR(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	anticlockwise_90(east_front);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 fbcf 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8e:	f000 ffc1 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 8000b92:	2004      	movs	r0, #4
 8000b94:	f000 fc00 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9c:	f000 ffba 	bl	8001b14 <HAL_Delay>
	centre_0(east_front);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 fb51 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000baa:	f000 ffb3 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f000 fc28 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb8:	f000 ffac 	bl	8001b14 <HAL_Delay>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <movement_L>:

// Number of Delay: 4
void movement_L(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	clockwise_90(west_front);
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f000 fb77 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bce:	f000 ffa1 	bl	8001b14 <HAL_Delay>
	servo_pull(west_back);
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	f000 fbe0 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bdc:	f000 ff9a 	bl	8001b14 <HAL_Delay>
	centre_0(west_front);
 8000be0:	2007      	movs	r0, #7
 8000be2:	f000 fb31 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bea:	f000 ff93 	bl	8001b14 <HAL_Delay>
	servo_push(west_back);
 8000bee:	2008      	movs	r0, #8
 8000bf0:	f000 fc08 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f000 ff8c 	bl	8001b14 <HAL_Delay>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <movement_aL>:

// Number of Delay: 4
void movement_aL(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	anticlockwise_90(west_front);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f000 fb8f 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0e:	f000 ff81 	bl	8001b14 <HAL_Delay>
	servo_pull(west_back);
 8000c12:	2008      	movs	r0, #8
 8000c14:	f000 fbc0 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1c:	f000 ff7a 	bl	8001b14 <HAL_Delay>
	centre_0(west_front);
 8000c20:	2007      	movs	r0, #7
 8000c22:	f000 fb11 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2a:	f000 ff73 	bl	8001b14 <HAL_Delay>
	servo_push(west_back);
 8000c2e:	2008      	movs	r0, #8
 8000c30:	f000 fbe8 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f000 ff6c 	bl	8001b14 <HAL_Delay>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <movement_B>:

// Number of Delay: 4
void movement_B(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	clockwise_90(north_front);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fb37 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4e:	f000 ff61 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 fba0 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5c:	f000 ff5a 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 faf1 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6a:	f000 ff53 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f000 fbc8 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f000 ff4c 	bl	8001b14 <HAL_Delay>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <movement_aB>:

// Number of Delay: 4
void movement_aB(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	anticlockwise_90(north_front);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fb4f 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8e:	f000 ff41 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f000 fb80 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9c:	f000 ff3a 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fad1 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000caa:	f000 ff33 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 fba8 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f000 ff2c 	bl	8001b14 <HAL_Delay>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <movement_U>:

// Number of Delay: 13
void movement_U(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f000 fb67 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000cca:	2008      	movs	r0, #8
 8000ccc:	f000 fb64 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd4:	f000 ff1e 	bl	8001b14 <HAL_Delay>
	clockwise_90(south_front);
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f000 faed 	bl	80012b8 <clockwise_90>
	anticlockwise_90(north_front);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fb22 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f000 ff14 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000cec:	2004      	movs	r0, #4
 8000cee:	f000 fb89 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000cf2:	2008      	movs	r0, #8
 8000cf4:	f000 fb86 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f000 ff0a 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000d00:	2002      	movs	r0, #2
 8000d02:	f000 fb49 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f000 fb46 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d10:	f000 ff00 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fa97 	bl	8001248 <centre_0>
	centre_0(south_front);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 fa94 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d24:	f000 fef6 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f000 fb6b 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000d2e:	2006      	movs	r0, #6
 8000d30:	f000 fb68 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d38:	f000 feec 	bl	8001b14 <HAL_Delay>
	clockwise_90(east_front);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 fabb 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d46:	f000 fee5 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f000 fb24 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f000 fb21 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5a:	f000 fedb 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(south_front);
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f000 fae2 	bl	8001328 <anticlockwise_90>
	clockwise_90(north_front);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 faa7 	bl	80012b8 <clockwise_90>
	centre_0(east_front);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 fa6c 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000d70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d74:	f000 fece 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f000 fb43 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000d7e:	2008      	movs	r0, #8
 8000d80:	f000 fb40 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f000 fec4 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f000 fb03 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000d92:	2006      	movs	r0, #6
 8000d94:	f000 fb00 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d9c:	f000 feba 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fa51 	bl	8001248 <centre_0>
	centre_0(north_front);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fa4e 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f000 feb0 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f000 fb25 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000dba:	2006      	movs	r0, #6
 8000dbc:	f000 fb22 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc4:	f000 fea6 	bl	8001b14 <HAL_Delay>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <movement_aU>:

// Number of Delay: 13
void movement_aU(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000dd0:	2004      	movs	r0, #4
 8000dd2:	f000 fae1 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000dd6:	2008      	movs	r0, #8
 8000dd8:	f000 fade 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de0:	f000 fe98 	bl	8001b14 <HAL_Delay>
	clockwise_90(south_front);
 8000de4:	2005      	movs	r0, #5
 8000de6:	f000 fa67 	bl	80012b8 <clockwise_90>
	anticlockwise_90(north_front);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 fa9c 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f000 fe8e 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000df8:	2004      	movs	r0, #4
 8000dfa:	f000 fb03 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000dfe:	2008      	movs	r0, #8
 8000e00:	f000 fb00 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e08:	f000 fe84 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 fac3 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000e12:	2006      	movs	r0, #6
 8000e14:	f000 fac0 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f000 fe7a 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 fa11 	bl	8001248 <centre_0>
	centre_0(south_front);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f000 fa0e 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e30:	f000 fe70 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000e34:	2002      	movs	r0, #2
 8000e36:	f000 fae5 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f000 fae2 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e44:	f000 fe66 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(east_front);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fa6d 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000e4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e52:	f000 fe5f 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f000 fa9e 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000e5c:	2008      	movs	r0, #8
 8000e5e:	f000 fa9b 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e66:	f000 fe55 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(south_front);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f000 fa5c 	bl	8001328 <anticlockwise_90>
	clockwise_90(north_front);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fa21 	bl	80012b8 <clockwise_90>
	centre_0(east_front);
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f9e6 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 fe48 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000e84:	2004      	movs	r0, #4
 8000e86:	f000 fabd 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000e8a:	2008      	movs	r0, #8
 8000e8c:	f000 faba 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e94:	f000 fe3e 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f000 fa7d 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f000 fa7a 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea8:	f000 fe34 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 8000eac:	2005      	movs	r0, #5
 8000eae:	f000 f9cb 	bl	8001248 <centre_0>
	centre_0(north_front);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 f9c8 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ebc:	f000 fe2a 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f000 fa9f 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000ec6:	2006      	movs	r0, #6
 8000ec8:	f000 fa9c 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed0:	f000 fe20 	bl	8001b14 <HAL_Delay>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <movement_D>:

// Number of Delay: 13
void movement_D(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000edc:	2004      	movs	r0, #4
 8000ede:	f000 fa5b 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000ee2:	2008      	movs	r0, #8
 8000ee4:	f000 fa58 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eec:	f000 fe12 	bl	8001b14 <HAL_Delay>
	clockwise_90(south_front);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f000 f9e1 	bl	80012b8 <clockwise_90>
	anticlockwise_90(north_front);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fa16 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f00:	f000 fe08 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000f04:	2004      	movs	r0, #4
 8000f06:	f000 fa7d 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000f0a:	2008      	movs	r0, #8
 8000f0c:	f000 fa7a 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f000 fdfe 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f000 fa3d 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 fa3a 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f28:	f000 fdf4 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 f98b 	bl	8001248 <centre_0>
	centre_0(south_front);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f000 f988 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3c:	f000 fdea 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f000 fa5f 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000f46:	2006      	movs	r0, #6
 8000f48:	f000 fa5c 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f000 fde0 	bl	8001b14 <HAL_Delay>
	clockwise_90(west_front);
 8000f54:	2007      	movs	r0, #7
 8000f56:	f000 f9af 	bl	80012b8 <clockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8000f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5e:	f000 fdd9 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f000 fa18 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000f68:	2008      	movs	r0, #8
 8000f6a:	f000 fa15 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f72:	f000 fdcf 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(south_front);
 8000f76:	2005      	movs	r0, #5
 8000f78:	f000 f9d6 	bl	8001328 <anticlockwise_90>
	clockwise_90(north_front);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 f99b 	bl	80012b8 <clockwise_90>
	centre_0(west_front);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f000 f960 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8c:	f000 fdc2 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8000f90:	2004      	movs	r0, #4
 8000f92:	f000 fa37 	bl	8001404 <servo_push>
	servo_push(west_back);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f000 fa34 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa0:	f000 fdb8 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f000 f9f7 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 8000faa:	2006      	movs	r0, #6
 8000fac:	f000 f9f4 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb4:	f000 fdae 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 8000fb8:	2005      	movs	r0, #5
 8000fba:	f000 f945 	bl	8001248 <centre_0>
	centre_0(north_front);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f942 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8000fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc8:	f000 fda4 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f000 fa19 	bl	8001404 <servo_push>
	servo_push(south_back);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f000 fa16 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f000 fd9a 	bl	8001b14 <HAL_Delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <movement_aD>:

// Number of Delay: 13
void movement_aD(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	servo_pull(east_back);
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f000 f9d5 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f000 f9d2 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8000ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff8:	f000 fd8c 	bl	8001b14 <HAL_Delay>
	clockwise_90(south_front);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f000 f95b 	bl	80012b8 <clockwise_90>
	anticlockwise_90(north_front);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 f990 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f000 fd82 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 8001010:	2004      	movs	r0, #4
 8001012:	f000 f9f7 	bl	8001404 <servo_push>
	servo_push(west_back);
 8001016:	2008      	movs	r0, #8
 8001018:	f000 f9f4 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 800101c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001020:	f000 fd78 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f9b7 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 800102a:	2006      	movs	r0, #6
 800102c:	f000 f9b4 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 8001030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001034:	f000 fd6e 	bl	8001b14 <HAL_Delay>
	centre_0(north_front);
 8001038:	2001      	movs	r0, #1
 800103a:	f000 f905 	bl	8001248 <centre_0>
	centre_0(south_front);
 800103e:	2005      	movs	r0, #5
 8001040:	f000 f902 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f000 fd64 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 800104c:	2002      	movs	r0, #2
 800104e:	f000 f9d9 	bl	8001404 <servo_push>
	servo_push(south_back);
 8001052:	2006      	movs	r0, #6
 8001054:	f000 f9d6 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f000 fd5a 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(west_front);
 8001060:	2007      	movs	r0, #7
 8001062:	f000 f961 	bl	8001328 <anticlockwise_90>
	HAL_Delay(DELAY_TIME_90);
 8001066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106a:	f000 fd53 	bl	8001b14 <HAL_Delay>
	servo_pull(east_back);
 800106e:	2004      	movs	r0, #4
 8001070:	f000 f992 	bl	8001398 <servo_pull>
	servo_pull(west_back);
 8001074:	2008      	movs	r0, #8
 8001076:	f000 f98f 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 800107a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107e:	f000 fd49 	bl	8001b14 <HAL_Delay>
	anticlockwise_90(south_front);
 8001082:	2005      	movs	r0, #5
 8001084:	f000 f950 	bl	8001328 <anticlockwise_90>
	clockwise_90(north_front);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 f915 	bl	80012b8 <clockwise_90>
	centre_0(west_front);
 800108e:	2007      	movs	r0, #7
 8001090:	f000 f8da 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 8001094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001098:	f000 fd3c 	bl	8001b14 <HAL_Delay>
	servo_push(east_back);
 800109c:	2004      	movs	r0, #4
 800109e:	f000 f9b1 	bl	8001404 <servo_push>
	servo_push(west_back);
 80010a2:	2008      	movs	r0, #8
 80010a4:	f000 f9ae 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80010a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ac:	f000 fd32 	bl	8001b14 <HAL_Delay>
	servo_pull(north_back);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f000 f971 	bl	8001398 <servo_pull>
	servo_pull(south_back);
 80010b6:	2006      	movs	r0, #6
 80010b8:	f000 f96e 	bl	8001398 <servo_pull>
	HAL_Delay(DELAY_TIME_P);
 80010bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c0:	f000 fd28 	bl	8001b14 <HAL_Delay>
	centre_0(south_front);
 80010c4:	2005      	movs	r0, #5
 80010c6:	f000 f8bf 	bl	8001248 <centre_0>
	centre_0(north_front);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 f8bc 	bl	8001248 <centre_0>
	HAL_Delay(DELAY_TIME_90);
 80010d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d4:	f000 fd1e 	bl	8001b14 <HAL_Delay>
	servo_push(north_back);
 80010d8:	2002      	movs	r0, #2
 80010da:	f000 f993 	bl	8001404 <servo_push>
	servo_push(south_back);
 80010de:	2006      	movs	r0, #6
 80010e0:	f000 f990 	bl	8001404 <servo_push>
	HAL_Delay(DELAY_TIME_P);
 80010e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e8:	f000 fd14 	bl	8001b14 <HAL_Delay>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <servo_init>:
#include "servo.h"

GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
extern uint8_t start;

void servo_init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 4; i++)
 80010f6:	2301      	movs	r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e008      	b.n	800110e <servo_init+0x1e>
		servo_pull(i*2);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f948 	bl	8001398 <servo_pull>
	for (uint8_t i = 1; i <= 4; i++)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3301      	adds	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d9f3      	bls.n	80010fc <servo_init+0xc>
	HAL_Delay(DELAY_TIME_P);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f000 fcfc 	bl	8001b14 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 800111c:	2301      	movs	r3, #1
 800111e:	71bb      	strb	r3, [r7, #6]
 8001120:	e00a      	b.n	8001138 <servo_init+0x48>
		centre_0(i*2-1);
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3b01      	subs	r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f88b 	bl	8001248 <centre_0>
	for (uint8_t i = 1; i <= 4; i++)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	3301      	adds	r3, #1
 8001136:	71bb      	strb	r3, [r7, #6]
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b04      	cmp	r3, #4
 800113c:	d9f1      	bls.n	8001122 <servo_init+0x32>
	HAL_Delay(DELAY_TIME_90);
 800113e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001142:	f000 fce7 	bl	8001b14 <HAL_Delay>
	for (uint8_t i = 1; i <= 4; i++)
 8001146:	2301      	movs	r3, #1
 8001148:	717b      	strb	r3, [r7, #5]
 800114a:	e008      	b.n	800115e <servo_init+0x6e>
		servo_push(i*2);
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f956 	bl	8001404 <servo_push>
	for (uint8_t i = 1; i <= 4; i++)
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	3301      	adds	r3, #1
 800115c:	717b      	strb	r3, [r7, #5]
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d9f3      	bls.n	800114c <servo_init+0x5c>
	HAL_Delay(DELAY_TIME_P);
 8001164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001168:	f000 fcd4 	bl	8001b14 <HAL_Delay>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <insert_cube>:

void insert_cube(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	if (start == 0) {
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <insert_cube+0xcc>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d140      	bne.n	8001204 <insert_cube+0x90>
		for (uint8_t i = 1; i <= 4; i++)
 8001182:	2301      	movs	r3, #1
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e008      	b.n	800119a <insert_cube+0x26>
			servo_pull(i*2);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f902 	bl	8001398 <servo_pull>
		for (uint8_t i = 1; i <= 4; i++)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	3301      	adds	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d9f3      	bls.n	8001188 <insert_cube+0x14>
		HAL_Delay(DELAY_TIME_P);
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f000 fcb6 	bl	8001b14 <HAL_Delay>
		for (uint8_t i = 1; i <= 4; i++)
 80011a8:	2301      	movs	r3, #1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	e00a      	b.n	80011c4 <insert_cube+0x50>
				centre_0(i*2-1);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f845 	bl	8001248 <centre_0>
		for (uint8_t i = 1; i <= 4; i++)
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d9f1      	bls.n	80011ae <insert_cube+0x3a>
		HAL_Delay(DELAY_TIME_90);
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f000 fca1 	bl	8001b14 <HAL_Delay>
		for (uint8_t i = 3; i <= 4; i++)
 80011d2:	2303      	movs	r3, #3
 80011d4:	717b      	strb	r3, [r7, #5]
 80011d6:	e008      	b.n	80011ea <insert_cube+0x76>
				servo_push(i*2);
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f910 	bl	8001404 <servo_push>
		for (uint8_t i = 3; i <= 4; i++)
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	3301      	adds	r3, #1
 80011e8:	717b      	strb	r3, [r7, #5]
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d9f3      	bls.n	80011d8 <insert_cube+0x64>
		HAL_Delay(DELAY_TIME_P);
 80011f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f4:	f000 fc8e 	bl	8001b14 <HAL_Delay>
		start++;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <insert_cube+0xcc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <insert_cube+0xcc>)
 8001202:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == RESET) {
 8001204:	2101      	movs	r1, #1
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <insert_cube+0xd0>)
 8001208:	f000 ff20 	bl	800204c <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d112      	bne.n	8001238 <insert_cube+0xc4>
		for (uint8_t i = 1; i <= 4; i++)
 8001212:	2301      	movs	r3, #1
 8001214:	713b      	strb	r3, [r7, #4]
 8001216:	e008      	b.n	800122a <insert_cube+0xb6>
			servo_push(i*2);
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f8f0 	bl	8001404 <servo_push>
		for (uint8_t i = 1; i <= 4; i++)
 8001224:	793b      	ldrb	r3, [r7, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	713b      	strb	r3, [r7, #4]
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	2b04      	cmp	r3, #4
 800122e:	d9f3      	bls.n	8001218 <insert_cube+0xa4>
		HAL_Delay(DELAY_TIME_P);
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f000 fc6e 	bl	8001b14 <HAL_Delay>
	}

}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000074 	.word	0x20000074
 8001244:	40010800 	.word	0x40010800

08001248 <centre_0>:

void centre_0(servos servo) {
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d024      	beq.n	80012a8 <centre_0+0x60>
		uint8_t target = servo/2+1;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3b01      	subs	r3, #1
 800126c:	2b03      	cmp	r3, #3
 800126e:	d81b      	bhi.n	80012a8 <centre_0+0x60>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <centre_0+0x30>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	08001291 	.word	0x08001291
 8001280:	08001299 	.word	0x08001299
 8001284:	080012a1 	.word	0x080012a1
			case 1:
				TIM3->CCR1 = CENTRE_DEGREE_1;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <centre_0+0x6c>)
 800128a:	225f      	movs	r2, #95	; 0x5f
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800128e:	e00b      	b.n	80012a8 <centre_0+0x60>
			case 2:
				TIM3->CCR2 = CENTRE_DEGREE_2;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <centre_0+0x6c>)
 8001292:	2258      	movs	r2, #88	; 0x58
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001296:	e007      	b.n	80012a8 <centre_0+0x60>
			case 3:
				TIM3->CCR3 = CENTRE_DEGREE_3;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <centre_0+0x6c>)
 800129a:	225c      	movs	r2, #92	; 0x5c
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800129e:	e003      	b.n	80012a8 <centre_0+0x60>
			case 4:
				TIM3->CCR4 = CENTRE_DEGREE_4;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <centre_0+0x6c>)
 80012a2:	225e      	movs	r2, #94	; 0x5e
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80012a6:	bf00      	nop
		}
	}
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40000400 	.word	0x40000400

080012b8 <clockwise_90>:

void clockwise_90(servos servo) {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d024      	beq.n	8001318 <clockwise_90+0x60>
		uint8_t target = servo/2+1;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d81b      	bhi.n	8001318 <clockwise_90+0x60>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <clockwise_90+0x30>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	08001301 	.word	0x08001301
 80012f0:	08001309 	.word	0x08001309
 80012f4:	08001311 	.word	0x08001311
			case 1:
				TIM3->CCR1 = RIGHT_90_1;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <clockwise_90+0x6c>)
 80012fa:	2299      	movs	r2, #153	; 0x99
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80012fe:	e00b      	b.n	8001318 <clockwise_90+0x60>
			case 2:
				TIM3->CCR2 = RIGHT_90_2;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <clockwise_90+0x6c>)
 8001302:	2291      	movs	r2, #145	; 0x91
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001306:	e007      	b.n	8001318 <clockwise_90+0x60>
			case 3:
				TIM3->CCR3 = RIGHT_90_3;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <clockwise_90+0x6c>)
 800130a:	2296      	movs	r2, #150	; 0x96
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800130e:	e003      	b.n	8001318 <clockwise_90+0x60>
			case 4:
				TIM3->CCR4 = RIGHT_90_4;
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <clockwise_90+0x6c>)
 8001312:	2299      	movs	r2, #153	; 0x99
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001316:	bf00      	nop
		}
	}
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40000400 	.word	0x40000400

08001328 <anticlockwise_90>:

void anticlockwise_90(servos servo) {
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	if (servo%2 != 0) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d024      	beq.n	8001388 <anticlockwise_90+0x60>
		uint8_t target = servo/2+1;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3b01      	subs	r3, #1
 800134c:	2b03      	cmp	r3, #3
 800134e:	d81b      	bhi.n	8001388 <anticlockwise_90+0x60>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <anticlockwise_90+0x30>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001369 	.word	0x08001369
 800135c:	08001371 	.word	0x08001371
 8001360:	08001379 	.word	0x08001379
 8001364:	08001381 	.word	0x08001381
			case 1:
				TIM3->CCR1 = LEFT_90_1;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <anticlockwise_90+0x6c>)
 800136a:	2225      	movs	r2, #37	; 0x25
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800136e:	e00b      	b.n	8001388 <anticlockwise_90+0x60>
			case 2:
				TIM3->CCR2 = LEFT_90_2;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <anticlockwise_90+0x6c>)
 8001372:	221d      	movs	r2, #29
 8001374:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8001376:	e007      	b.n	8001388 <anticlockwise_90+0x60>
			case 3:
				TIM3->CCR3 = LEFT_90_3;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <anticlockwise_90+0x6c>)
 800137a:	221f      	movs	r2, #31
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800137e:	e003      	b.n	8001388 <anticlockwise_90+0x60>
			case 4:
				TIM3->CCR4 = LEFT_90_4;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <anticlockwise_90+0x6c>)
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001386:	bf00      	nop
		}
	}
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40000400 	.word	0x40000400

08001398 <servo_pull>:

void servo_pull(servos servo) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d123      	bne.n	80013f6 <servo_pull+0x5e>
		uint8_t target = servo/2;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d81c      	bhi.n	80013f6 <servo_pull+0x5e>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <servo_pull+0x2c>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013dd 	.word	0x080013dd
 80013cc:	080013e7 	.word	0x080013e7
 80013d0:	080013ef 	.word	0x080013ef
			case 1:
				TIM4->CCR1 = PULL_DEGREE_1;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <servo_pull+0x68>)
 80013d6:	221e      	movs	r2, #30
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80013da:	e00c      	b.n	80013f6 <servo_pull+0x5e>
			case 2:
				TIM2->CCR3 = PULL_DEGREE_2;
 80013dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e0:	221e      	movs	r2, #30
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80013e4:	e007      	b.n	80013f6 <servo_pull+0x5e>
			case 3:
				TIM4->CCR3 = PULL_DEGREE_3;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <servo_pull+0x68>)
 80013e8:	221e      	movs	r2, #30
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80013ec:	e003      	b.n	80013f6 <servo_pull+0x5e>
			case 4:
				TIM4->CCR4 = PULL_DEGREE_4;
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <servo_pull+0x68>)
 80013f0:	2219      	movs	r2, #25
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80013f4:	bf00      	nop
		}
	}
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40000800 	.word	0x40000800

08001404 <servo_push>:

void servo_push(servos servo) {
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	if (servo%2 == 0) {
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d123      	bne.n	8001462 <servo_push+0x5e>
		uint8_t target = servo/2;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
		switch (target) {
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3b01      	subs	r3, #1
 8001424:	2b03      	cmp	r3, #3
 8001426:	d81c      	bhi.n	8001462 <servo_push+0x5e>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <servo_push+0x2c>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001441 	.word	0x08001441
 8001434:	08001449 	.word	0x08001449
 8001438:	08001453 	.word	0x08001453
 800143c:	0800145b 	.word	0x0800145b
			case 1:
				TIM4->CCR1 = PUSH_DEGREE_1;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <servo_push+0x68>)
 8001442:	2264      	movs	r2, #100	; 0x64
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8001446:	e00c      	b.n	8001462 <servo_push+0x5e>
			case 2:
				TIM2->CCR3 = PUSH_DEGREE_2;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	225a      	movs	r2, #90	; 0x5a
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001450:	e007      	b.n	8001462 <servo_push+0x5e>
			case 3:
				TIM4->CCR3 = PUSH_DEGREE_3;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <servo_push+0x68>)
 8001454:	2264      	movs	r2, #100	; 0x64
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001458:	e003      	b.n	8001462 <servo_push+0x5e>
			case 4:
				TIM4->CCR4 = PUSH_DEGREE_4;
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <servo_push+0x68>)
 800145c:	225a      	movs	r2, #90	; 0x5a
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001460:	bf00      	nop
		}
	}
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40000800 	.word	0x40000800

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_MspInit+0x5c>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_MspInit+0x5c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_MspInit+0x5c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x5c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x5c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_MspInit+0x60>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_MspInit+0x60>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 fadf 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_TIM2_Init+0xe8>)
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_TIM2_Init+0xe8>)
 800156a:	f240 42af 	movw	r2, #1199	; 0x4af
 800156e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_TIM2_Init+0xe8>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_TIM2_Init+0xe8>)
 8001578:	f240 42af 	movw	r2, #1199	; 0x4af
 800157c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_TIM2_Init+0xe8>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_TIM2_Init+0xe8>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <MX_TIM2_Init+0xe8>)
 800158c:	f001 f9c3 	bl	8002916 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001596:	f7ff fa8e 	bl	8000ab6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	4619      	mov	r1, r3
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_TIM2_Init+0xe8>)
 80015a8:	f001 fbd4 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015b2:	f7ff fa80 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <MX_TIM2_Init+0xe8>)
 80015b8:	f001 f9fc 	bl	80029b4 <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015c2:	f7ff fa78 	bl	8000ab6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	4619      	mov	r1, r3
 80015d4:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_TIM2_Init+0xe8>)
 80015d6:	f001 ff61 	bl	800349c <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015e0:	f7ff fa69 	bl	8000ab6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	; 0x60
 80015e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 80015e8:	231e      	movs	r3, #30
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2208      	movs	r2, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM2_Init+0xe8>)
 80015fc:	f001 faec 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001606:	f7ff fa56 	bl	8000ab6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM2_Init+0xe8>)
 800160c:	f000 f970 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3738      	adds	r7, #56	; 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000078 	.word	0x20000078

0800161c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	; 0x38
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <MX_TIM3_Init+0x128>)
 800164e:	4a3e      	ldr	r2, [pc, #248]	; (8001748 <MX_TIM3_Init+0x12c>)
 8001650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200-1;
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <MX_TIM3_Init+0x128>)
 8001654:	f240 42af 	movw	r2, #1199	; 0x4af
 8001658:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <MX_TIM3_Init+0x128>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200-1;
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <MX_TIM3_Init+0x128>)
 8001662:	f240 42af 	movw	r2, #1199	; 0x4af
 8001666:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <MX_TIM3_Init+0x128>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <MX_TIM3_Init+0x128>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001674:	4833      	ldr	r0, [pc, #204]	; (8001744 <MX_TIM3_Init+0x128>)
 8001676:	f001 f94e 	bl	8002916 <HAL_TIM_Base_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001680:	f7ff fa19 	bl	8000ab6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	4619      	mov	r1, r3
 8001690:	482c      	ldr	r0, [pc, #176]	; (8001744 <MX_TIM3_Init+0x128>)
 8001692:	f001 fb5f 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800169c:	f7ff fa0b 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <MX_TIM3_Init+0x128>)
 80016a2:	f001 f987 	bl	80029b4 <HAL_TIM_PWM_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016ac:	f7ff fa03 	bl	8000ab6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4619      	mov	r1, r3
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <MX_TIM3_Init+0x128>)
 80016c0:	f001 feec 	bl	800349c <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016ca:	f7ff f9f4 	bl	8000ab6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ce:	2360      	movs	r3, #96	; 0x60
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 80016d2:	231c      	movs	r3, #28
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4817      	ldr	r0, [pc, #92]	; (8001744 <MX_TIM3_Init+0x128>)
 80016e6:	f001 fa77 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016f0:	f7ff f9e1 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2204      	movs	r2, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <MX_TIM3_Init+0x128>)
 80016fc:	f001 fa6c 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001706:	f7ff f9d6 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2208      	movs	r2, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM3_Init+0x128>)
 8001712:	f001 fa61 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800171c:	f7ff f9cb 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	220c      	movs	r2, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_TIM3_Init+0x128>)
 8001728:	f001 fa56 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001732:	f7ff f9c0 	bl	8000ab6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <MX_TIM3_Init+0x128>)
 8001738:	f000 f8da 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	; 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000c0 	.word	0x200000c0
 8001748:	40000400 	.word	0x40000400

0800174c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <MX_TIM4_Init+0x114>)
 800177e:	4a39      	ldr	r2, [pc, #228]	; (8001864 <MX_TIM4_Init+0x118>)
 8001780:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <MX_TIM4_Init+0x114>)
 8001784:	f240 42af 	movw	r2, #1199	; 0x4af
 8001788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b35      	ldr	r3, [pc, #212]	; (8001860 <MX_TIM4_Init+0x114>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1200-1;
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <MX_TIM4_Init+0x114>)
 8001792:	f240 42af 	movw	r2, #1199	; 0x4af
 8001796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <MX_TIM4_Init+0x114>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <MX_TIM4_Init+0x114>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017a4:	482e      	ldr	r0, [pc, #184]	; (8001860 <MX_TIM4_Init+0x114>)
 80017a6:	f001 f8b6 	bl	8002916 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017b0:	f7ff f981 	bl	8000ab6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	4619      	mov	r1, r3
 80017c0:	4827      	ldr	r0, [pc, #156]	; (8001860 <MX_TIM4_Init+0x114>)
 80017c2:	f001 fac7 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017cc:	f7ff f973 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_TIM4_Init+0x114>)
 80017d2:	f001 f8ef 	bl	80029b4 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017dc:	f7ff f96b 	bl	8000ab6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <MX_TIM4_Init+0x114>)
 80017f0:	f001 fe54 	bl	800349c <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017fa:	f7ff f95c 	bl	8000ab6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fe:	2360      	movs	r3, #96	; 0x60
 8001800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8001802:	231c      	movs	r3, #28
 8001804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <MX_TIM4_Init+0x114>)
 8001816:	f001 f9df 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001820:	f7ff f949 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2208      	movs	r2, #8
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM4_Init+0x114>)
 800182c:	f001 f9d4 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001836:	f7ff f93e 	bl	8000ab6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	220c      	movs	r2, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM4_Init+0x114>)
 8001842:	f001 f9c9 	bl	8002bd8 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800184c:	f7ff f933 	bl	8000ab6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM4_Init+0x114>)
 8001852:	f000 f84d 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	3738      	adds	r7, #56	; 0x38
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000108 	.word	0x20000108
 8001864:	40000800 	.word	0x40000800

08001868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d10c      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001892:	e022      	b.n	80018da <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_TIM_Base_MspInit+0x80>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
}
 80018b6:	e010      	b.n	80018da <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_TIM_Base_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10b      	bne.n	80018da <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_TIM_Base_MspInit+0x7c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40000800 	.word	0x40000800

080018f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d118      	bne.n	8001942 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001928:	2304      	movs	r3, #4
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	482c      	ldr	r0, [pc, #176]	; (80019ec <HAL_TIM_MspPostInit+0xfc>)
 800193c:	f000 f9f2 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001940:	e04e      	b.n	80019e0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <HAL_TIM_MspPostInit+0x100>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d12b      	bne.n	80019a4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001964:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <HAL_TIM_MspPostInit+0x104>)
 800197a:	f000 f9d3 	bl	8001d24 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_TIM_MspPostInit+0x108>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_TIM_MspPostInit+0x108>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	6053      	str	r3, [r2, #4]
}
 80019a2:	e01d      	b.n	80019e0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_TIM_MspPostInit+0x10c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d118      	bne.n	80019e0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_TIM_MspPostInit+0xf8>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80019c6:	f44f 7350 	mov.w	r3, #832	; 0x340
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_TIM_MspPostInit+0x110>)
 80019dc:	f000 f9a2 	bl	8001d24 <HAL_GPIO_Init>
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40000400 	.word	0x40000400
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	40000800 	.word	0x40000800
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2a:	f7ff fd7a 	bl	8001522 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f001 fe7f 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7fe ff6d 	bl	8000910 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a40:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001a44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a48:	20000154 	.word	0x20000154

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f92b 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd00 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f935 	bl	8001d0a <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab8:	f000 f90b 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_IncTick+0x20>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000150 	.word	0x20000150

08001b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000150 	.word	0x20000150

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffe0 	bl	8001b00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff49 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff5e 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e179      	b.n	800202c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8168 	bne.w	8002026 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x290>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a94      	ldr	r2, [pc, #592]	; (8001fb4 <HAL_GPIO_Init+0x290>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x294>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a92      	ldr	r2, [pc, #584]	; (8001fb8 <HAL_GPIO_Init+0x294>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a8e      	ldr	r2, [pc, #568]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a8e      	ldr	r2, [pc, #568]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80c1 	beq.w	8002026 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a44      	ldr	r2, [pc, #272]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01f      	beq.n	8001f28 <HAL_GPIO_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_GPIO_Init+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1fc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1f8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1f4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f10:	2305      	movs	r3, #5
 8001f12:	e00a      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f14:	2306      	movs	r3, #6
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x206>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4924      	ldr	r1, [pc, #144]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4920      	ldr	r1, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4916      	ldr	r1, [pc, #88]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d025      	beq.n	8001ff0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4910      	ldr	r1, [pc, #64]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e025      	b.n	8001ffe <HAL_GPIO_Init+0x2da>
 8001fb2:	bf00      	nop
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10310000 	.word	0x10310000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	10210000 	.word	0x10210000
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	40011800 	.word	0x40011800
 8001fe8:	40011c00 	.word	0x40011c00
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4913      	ldr	r1, [pc, #76]	; (8002048 <HAL_GPIO_Init+0x324>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_GPIO_Init+0x324>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	60cb      	str	r3, [r1, #12]
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x324>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x324>)
 8002022:	4013      	ands	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae7e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e001      	b.n	800206e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e272      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d8:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d112      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x12c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d168      	bne.n	80021d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e24c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x76>
 8002114:	4b80      	ldr	r3, [pc, #512]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7f      	ldr	r2, [pc, #508]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e02e      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b78      	ldr	r3, [pc, #480]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a77      	ldr	r2, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0xbc>
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a71      	ldr	r2, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a67      	ldr	r2, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fcba 	bl	8001b00 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff fcb6 	bl	8001b00 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e200      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xe4>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fca6 	bl	8001b00 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff fca2 	bl	8001b00 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1ec      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x10c>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1c0      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4939      	ldr	r1, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fc5b 	bl	8001b00 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fc57 	bl	8001b00 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1a1      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4927      	ldr	r1, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0x270>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fc3a 	bl	8001b00 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7ff fc36 	bl	8001b00 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e180      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03a      	beq.n	8002330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fc1a 	bl	8001b00 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7ff fc16 	bl	8001b00 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e160      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 faa6 	bl	8002840 <RCC_Delay>
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fc00 	bl	8001b00 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fbfc 	bl	8001b00 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d908      	bls.n	8002324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e146      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	42420000 	.word	0x42420000
 8002320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e9      	bne.n	8002304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a6 	beq.w	800248a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b82      	ldr	r3, [pc, #520]	; (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7e      	ldr	r2, [pc, #504]	; (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7ff fbbd 	bl	8001b00 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7ff fbb9 	bl	8001b00 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e103      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023b0:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e02d      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x334>
 80023c6:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a66      	ldr	r2, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x356>
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a60      	ldr	r2, [pc, #384]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a5d      	ldr	r2, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a57      	ldr	r2, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff fb6d 	bl	8001b00 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fb69 	bl	8001b00 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0b1      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x37e>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff fb57 	bl	8001b00 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fb53 	bl	8001b00 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e09b      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d061      	beq.n	8002564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d146      	bne.n	8002536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff fb27 	bl	8001b00 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff fb23 	bl	8001b00 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e06d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4921      	ldr	r1, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a19      	ldr	r1, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	430b      	orrs	r3, r1
 8002502:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x4cc>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff faf7 	bl	8001b00 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff faf3 	bl	8001b00 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
 8002534:	e035      	b.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fae0 	bl	8001b00 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff fadc 	bl	8001b00 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e026      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x498>
 8002562:	e01e      	b.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e019      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x500>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4936      	ldr	r1, [pc, #216]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff fa2e 	bl	8001b00 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff fa2a 	bl	8001b00 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e053      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff f98c 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	080037a0 	.word	0x080037a0
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b490      	push	{r4, r7}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_RCC_GetSysClockFreq+0xac>)
 800278c:	1d3c      	adds	r4, r7, #4
 800278e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002794:	f240 2301 	movw	r3, #513	; 0x201
 8002798:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x40>
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x46>
 80027c2:	e02b      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c6:	623b      	str	r3, [r7, #32]
      break;
 80027c8:	e02b      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	0c9b      	lsrs	r3, r3, #18
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3328      	adds	r3, #40	; 0x28
 80027d4:	443b      	add	r3, r7
 80027d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d012      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0c5b      	lsrs	r3, r3, #17
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	3328      	adds	r3, #40	; 0x28
 80027f2:	443b      	add	r3, r7
 80027f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fe:	fb03 f202 	mul.w	r2, r3, r2
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e004      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	623b      	str	r3, [r7, #32]
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6a3b      	ldr	r3, [r7, #32]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc90      	pop	{r4, r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	08003790 	.word	0x08003790
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	003d0900 	.word	0x003d0900

08002840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <RCC_Delay+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <RCC_Delay+0x38>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800285c:	bf00      	nop
  }
  while (Delay --);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <RCC_Delay+0x1c>
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000000 	.word	0x20000000
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_SRAM_Init+0x1c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002896:	d101      	bne.n	800289c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e038      	b.n	800290e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7fd fd5f 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3308      	adds	r3, #8
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f000 fe57 	bl	8003574 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	f000 feb9 	bl	8003648 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6858      	ldr	r0, [r3, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f000 fee4 	bl	80036b0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	f041 0101 	orr.w	r1, r1, #1
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e041      	b.n	80029ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe ff93 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f000 fac1 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f839 	bl	8002a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fa72 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x24>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e022      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e015      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e008      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e072      	b.n	8002bbc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x82>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	e013      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x92>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xa2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	e003      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fc9c 	bl	8003454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_TIM_PWM_Start+0x160>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_TIM_PWM_Start+0xcc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_TIM_PWM_Start+0x164>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_PWM_Start+0xd0>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_PWM_Start+0xd2>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_TIM_PWM_Start+0x160>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x122>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_TIM_PWM_Start+0x164>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x122>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x122>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_TIM_PWM_Start+0x168>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x122>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_TIM_PWM_Start+0x16c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x122>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIM_PWM_Start+0x170>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d010      	beq.n	8002bba <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	e007      	b.n	8002bba <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40013400 	.word	0x40013400
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00

08002bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0ac      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	f200 809f 	bhi.w	8002d40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c3d 	.word	0x08002c3d
 8002c0c:	08002d41 	.word	0x08002d41
 8002c10:	08002d41 	.word	0x08002d41
 8002c14:	08002d41 	.word	0x08002d41
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002d41 	.word	0x08002d41
 8002c20:	08002d41 	.word	0x08002d41
 8002c24:	08002d41 	.word	0x08002d41
 8002c28:	08002cbf 	.word	0x08002cbf
 8002c2c:	08002d41 	.word	0x08002d41
 8002c30:	08002d41 	.word	0x08002d41
 8002c34:	08002d41 	.word	0x08002d41
 8002c38:	08002cff 	.word	0x08002cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f9c4 	bl	8002fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0208 	orr.w	r2, r2, #8
 8002c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6999      	ldr	r1, [r3, #24]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
      break;
 8002c7a:	e062      	b.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa14 	bl	80030b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	021a      	lsls	r2, r3, #8
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	619a      	str	r2, [r3, #24]
      break;
 8002cbc:	e041      	b.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fa67 	bl	8003198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0208 	orr.w	r2, r2, #8
 8002cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0204 	bic.w	r2, r2, #4
 8002ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69d9      	ldr	r1, [r3, #28]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
      break;
 8002cfc:	e021      	b.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fabb 	bl	8003280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	021a      	lsls	r2, r3, #8
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	61da      	str	r2, [r3, #28]
      break;
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_ConfigClockSource+0x18>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0b3      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x180>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d03e      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0xd0>
 8002da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002daa:	f200 8087 	bhi.w	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	f000 8085 	beq.w	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d87f      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d01a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0xa2>
 8002dc0:	2b70      	cmp	r3, #112	; 0x70
 8002dc2:	d87b      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dc4:	2b60      	cmp	r3, #96	; 0x60
 8002dc6:	d050      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x116>
 8002dc8:	2b60      	cmp	r3, #96	; 0x60
 8002dca:	d877      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dcc:	2b50      	cmp	r3, #80	; 0x50
 8002dce:	d03c      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xf6>
 8002dd0:	2b50      	cmp	r3, #80	; 0x50
 8002dd2:	d873      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d058      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x136>
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d86f      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d064      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x156>
 8002de0:	2b30      	cmp	r3, #48	; 0x30
 8002de2:	d86b      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d060      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x156>
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d867      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05c      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x156>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d05a      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002df4:	e062      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f000 fb06 	bl	8003416 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
      break;
 8002e22:	e04e      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f000 faef 	bl	8003416 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e46:	609a      	str	r2, [r3, #8]
      break;
 8002e48:	e03b      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 fa66 	bl	8003328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2150      	movs	r1, #80	; 0x50
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fabd 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8002e68:	e02b      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 fa84 	bl	8003384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2160      	movs	r1, #96	; 0x60
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 faad 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8002e88:	e01b      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 fa46 	bl	8003328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fa9d 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e00b      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f000 fa94 	bl	80033e2 <TIM_ITRx_SetConfig>
        break;
 8002eba:	e002      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ec0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a33      	ldr	r2, [pc, #204]	; (8002fbc <TIM_Base_SetConfig+0xe0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <TIM_Base_SetConfig+0xe8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <TIM_Base_SetConfig+0xec>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <TIM_Base_SetConfig+0xf0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <TIM_Base_SetConfig+0xe0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x82>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x82>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x82>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <TIM_Base_SetConfig+0xe8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x82>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <TIM_Base_SetConfig+0xec>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x82>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <TIM_Base_SetConfig+0xf0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <TIM_Base_SetConfig+0xe0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0xc8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40013400 	.word	0x40013400
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00

08002fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0302 	bic.w	r3, r3, #2
 8003018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <TIM_OC1_SetConfig+0xd8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_OC1_SetConfig+0x64>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <TIM_OC1_SetConfig+0xdc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10c      	bne.n	800304e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0308 	bic.w	r3, r3, #8
 800303a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <TIM_OC1_SetConfig+0xd8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_OC1_SetConfig+0x8e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a14      	ldr	r2, [pc, #80]	; (80030ac <TIM_OC1_SetConfig+0xdc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d111      	bne.n	8003082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800306c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	621a      	str	r2, [r3, #32]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40013400 	.word	0x40013400

080030b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0210 	bic.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0320 	bic.w	r3, r3, #32
 80030fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a21      	ldr	r2, [pc, #132]	; (8003190 <TIM_OC2_SetConfig+0xe0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_OC2_SetConfig+0x68>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a20      	ldr	r2, [pc, #128]	; (8003194 <TIM_OC2_SetConfig+0xe4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10d      	bne.n	8003134 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <TIM_OC2_SetConfig+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_OC2_SetConfig+0x94>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <TIM_OC2_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d113      	bne.n	800316c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400

08003198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <TIM_OC3_SetConfig+0xe0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_OC3_SetConfig+0x66>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <TIM_OC3_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10d      	bne.n	800321a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <TIM_OC3_SetConfig+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC3_SetConfig+0x92>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <TIM_OC3_SetConfig+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40013400 	.word	0x40013400

08003280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <TIM_OC4_SetConfig+0xa0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC4_SetConfig+0x68>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <TIM_OC4_SetConfig+0xa4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d109      	bne.n	80032fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40013400 	.word	0x40013400

08003328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0201 	bic.w	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 030a 	bic.w	r3, r3, #10
 8003364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 0210 	bic.w	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	031b      	lsls	r3, r3, #12
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	621a      	str	r2, [r3, #32]
}
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f043 0307 	orr.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003416:	b480      	push	{r7}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	021a      	lsls	r2, r3, #8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	431a      	orrs	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4313      	orrs	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2201      	movs	r2, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e050      	b.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d00e      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a15      	ldr	r2, [pc, #84]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4313      	orrs	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40013400 	.word	0x40013400
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00

08003574 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f023 0101 	bic.w	r1, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d102      	bne.n	80035a4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800359e:	2340      	movs	r3, #64	; 0x40
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e001      	b.n	80035a8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80035b4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80035ba:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80035c0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80035c6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80035cc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80035d2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80035d8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80035de:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80035e4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <FSMC_NORSRAM_Init+0xd0>)
 8003604:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003614:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	ea02 0103 	and.w	r1, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4319      	orrs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	0008fb7f 	.word	0x0008fb7f

08003648 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	431a      	orrs	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	431a      	orrs	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	431a      	orrs	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	3b01      	subs	r3, #1
 8003684:	051b      	lsls	r3, r3, #20
 8003686:	431a      	orrs	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	3b02      	subs	r3, #2
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	431a      	orrs	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	3201      	adds	r2, #1
 800369c:	4319      	orrs	r1, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c4:	d11d      	bne.n	8003702 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	6852      	ldr	r2, [r2, #4]
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	4311      	orrs	r1, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	0212      	lsls	r2, r2, #8
 80036e4:	4311      	orrs	r1, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	6992      	ldr	r2, [r2, #24]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	68d2      	ldr	r2, [r2, #12]
 80036f0:	0412      	lsls	r2, r2, #16
 80036f2:	430a      	orrs	r2, r1
 80036f4:	ea43 0102 	orr.w	r1, r3, r2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003700:	e005      	b.n	800370e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	cff00000 	.word	0xcff00000

08003720 <memset>:
 8003720:	4603      	mov	r3, r0
 8003722:	4402      	add	r2, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	2600      	movs	r6, #0
 8003734:	4d0c      	ldr	r5, [pc, #48]	; (8003768 <__libc_init_array+0x38>)
 8003736:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	f000 f81a 	bl	8003778 <_init>
 8003744:	2600      	movs	r6, #0
 8003746:	4d0a      	ldr	r5, [pc, #40]	; (8003770 <__libc_init_array+0x40>)
 8003748:	4c0a      	ldr	r4, [pc, #40]	; (8003774 <__libc_init_array+0x44>)
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	080037b0 	.word	0x080037b0
 800376c:	080037b0 	.word	0x080037b0
 8003770:	080037b0 	.word	0x080037b0
 8003774:	080037b4 	.word	0x080037b4

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr
