
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08003b5c  08003b5c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b5c  08003b5c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200000a8  08003c0c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003c0c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009223  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e2  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000764  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184b9  00000000  00000000  0002cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de93  00000000  00000000  0004514d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a805  00000000  00000000  00052fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002620  00000000  00000000  000cd7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000cfe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	00000000 	.word	0x00000000
 8000204:	08003520 	.word	0x08003520

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000ac 	.word	0x200000ac
 8000220:	08003520 	.word	0x08003520

08000224 <writeDataIntoAllFaces>:
#include "main.h"
#include "lcd.h"

extern uint8_t Ov7725_vsync;

void writeDataIntoAllFaces(char* AllFaces, char* OneFace, int num) {
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	for (int i=0; i<9; ++i) {
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e010      	b.n	8000258 <writeDataIntoAllFaces+0x34>
		AllFaces[num*9+i] = OneFace[i];
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	18d1      	adds	r1, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4613      	mov	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	441a      	add	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	4413      	add	r3, r2
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4413      	add	r3, r2
 800024e:	780a      	ldrb	r2, [r1, #0]
 8000250:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<9; ++i) {
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	3301      	adds	r3, #1
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2b08      	cmp	r3, #8
 800025c:	ddeb      	ble.n	8000236 <writeDataIntoAllFaces+0x12>
	}
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	371c      	adds	r7, #28
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr

0800026a <convertColor2RGB>:

void printArray(char* Array) {
	LCD_DrawString(10, 260, Array);
}

uint16_t convertColor2RGB(char Color) { // need change
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	4603      	mov	r3, r0
 8000272:	71fb      	strb	r3, [r7, #7]
	if (Color == 'W') {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b57      	cmp	r3, #87	; 0x57
 8000278:	d102      	bne.n	8000280 <convertColor2RGB+0x16>
		return WHITE;
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	e01e      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'O') {
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b4f      	cmp	r3, #79	; 0x4f
 8000284:	d102      	bne.n	800028c <convertColor2RGB+0x22>
		return ORANGE;
 8000286:	f64f 4360 	movw	r3, #64608	; 0xfc60
 800028a:	e018      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'G') {
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b47      	cmp	r3, #71	; 0x47
 8000290:	d102      	bne.n	8000298 <convertColor2RGB+0x2e>
		return GREEN;
 8000292:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000296:	e012      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'Y') {
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b59      	cmp	r3, #89	; 0x59
 800029c:	d102      	bne.n	80002a4 <convertColor2RGB+0x3a>
		return YELLOW;
 800029e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002a2:	e00c      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'B') {
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b42      	cmp	r3, #66	; 0x42
 80002a8:	d101      	bne.n	80002ae <convertColor2RGB+0x44>
		return BLUE;
 80002aa:	231f      	movs	r3, #31
 80002ac:	e007      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'R') {
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b52      	cmp	r3, #82	; 0x52
 80002b2:	d102      	bne.n	80002ba <convertColor2RGB+0x50>
		return RED;
 80002b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80002b8:	e001      	b.n	80002be <convertColor2RGB+0x54>
	}
	return CYAN; // a color to indicate wrong color
 80002ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <stringCompare>:

int stringCompare(char* target, char* src, int size) {
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	for (int i=0; i<size; ++i) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00e      	b.n	80002f8 <stringCompare+0x30>
		if (target[i] != src[i]) {
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	440b      	add	r3, r1
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d001      	beq.n	80002f2 <stringCompare+0x2a>
			return 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e007      	b.n	8000302 <stringCompare+0x3a>
	for (int i=0; i<size; ++i) {
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbec      	blt.n	80002da <stringCompare+0x12>
		}
	}
	return 0;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	371c      	adds	r7, #28
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <printFace>:
////		}
////	}
//	return;
//}

void printFace(char* SquareOfOneFace) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af02      	add	r7, sp, #8
 8000312:	6078      	str	r0, [r7, #4]
	LCD_Clear(10, 10, 220, 220, BLACK);
 8000314:	2300      	movs	r3, #0
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	23dc      	movs	r3, #220	; 0xdc
 800031a:	22dc      	movs	r2, #220	; 0xdc
 800031c:	210a      	movs	r1, #10
 800031e:	200a      	movs	r0, #10
 8000320:	f001 f871 	bl	8001406 <LCD_Clear>
	for (int row=0; row<3; ++row) {
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	e031      	b.n	800038e <printFace+0x82>
		for (int col=0; col<3; ++col) {
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
 800032e:	e028      	b.n	8000382 <printFace+0x76>
			int num = row*3+col;
 8000330:	69fa      	ldr	r2, [r7, #28]
 8000332:	4613      	mov	r3, r2
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	4413      	add	r3, r2
 8000338:	69ba      	ldr	r2, [r7, #24]
 800033a:	4413      	add	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
			uint16_t RGB = convertColor2RGB(SquareOfOneFace[num]);
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff8f 	bl	800026a <convertColor2RGB>
 800034c:	4603      	mov	r3, r0
 800034e:	827b      	strh	r3, [r7, #18]
			int x = (SQUARE_SIZE+10)*col+FIRST_ROW_COL;
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	2246      	movs	r2, #70	; 0x46
 8000354:	fb02 f303 	mul.w	r3, r2, r3
 8000358:	3314      	adds	r3, #20
 800035a:	60fb      	str	r3, [r7, #12]
			int y = (SQUARE_SIZE+10)*row+FIRST_ROW_COL;
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	2246      	movs	r2, #70	; 0x46
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	3314      	adds	r3, #20
 8000366:	60bb      	str	r3, [r7, #8]
			LCD_Clear(x, y, SQUARE_SIZE, SQUARE_SIZE, RGB);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	b298      	uxth	r0, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	b299      	uxth	r1, r3
 8000370:	8a7b      	ldrh	r3, [r7, #18]
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	233c      	movs	r3, #60	; 0x3c
 8000376:	223c      	movs	r2, #60	; 0x3c
 8000378:	f001 f845 	bl	8001406 <LCD_Clear>
		for (int col=0; col<3; ++col) {
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	3301      	adds	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	2b02      	cmp	r3, #2
 8000386:	ddd3      	ble.n	8000330 <printFace+0x24>
	for (int row=0; row<3; ++row) {
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	2b02      	cmp	r3, #2
 8000392:	ddca      	ble.n	800032a <printFace+0x1e>
		}
	}
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	3720      	adds	r7, #32
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 80003aa:	2300      	movs	r3, #0
 80003ac:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	2012      	movs	r0, #18
 80003b2:	f000 fbd1 	bl	8000b58 <SCCB_WriteByte>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <Ov7725_Init+0x20>
	{
		return ERROR ;
 80003bc:	2300      	movs	r3, #0
 80003be:	e030      	b.n	8000422 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 80003c0:	1d7b      	adds	r3, r7, #5
 80003c2:	220b      	movs	r2, #11
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fbf5 	bl	8000bb6 <SCCB_ReadByte>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d101      	bne.n	80003d6 <Ov7725_Init+0x36>
	{
		return ERROR;
 80003d2:	2300      	movs	r3, #0
 80003d4:	e025      	b.n	8000422 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	2b21      	cmp	r3, #33	; 0x21
 80003da:	d11f      	bne.n	800041c <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 80003dc:	2300      	movs	r3, #0
 80003de:	80fb      	strh	r3, [r7, #6]
 80003e0:	e015      	b.n	800040e <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 80003e2:	88fb      	ldrh	r3, [r7, #6]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <Ov7725_Init+0x8c>)
 80003e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	88fb      	ldrh	r3, [r7, #6]
 80003ee:	490f      	ldr	r1, [pc, #60]	; (800042c <Ov7725_Init+0x8c>)
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	440b      	add	r3, r1
 80003f4:	785b      	ldrb	r3, [r3, #1]
 80003f6:	4619      	mov	r1, r3
 80003f8:	4610      	mov	r0, r2
 80003fa:	f000 fbad 	bl	8000b58 <SCCB_WriteByte>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000404:	2300      	movs	r3, #0
 8000406:	e00c      	b.n	8000422 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000408:	88fb      	ldrh	r3, [r7, #6]
 800040a:	3301      	adds	r3, #1
 800040c:	80fb      	strh	r3, [r7, #6]
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <Ov7725_Init+0x90>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	88fa      	ldrh	r2, [r7, #6]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3e3      	bcc.n	80003e2 <Ov7725_Init+0x42>
 800041a:	e001      	b.n	8000420 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 800041c:	2300      	movs	r3, #0
 800041e:	e000      	b.n	8000422 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000420:	2301      	movs	r3, #1
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	2000009a 	.word	0x2000009a

08000434 <initArray>:
		}
	}
	HAL_Delay(1000);
}

void initArray(int* Array, int size) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	for (int i=0; i<size; ++i) {
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e008      	b.n	8000456 <initArray+0x22>
		Array[i] = 0;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<size; ++i) {
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	429a      	cmp	r2, r3
 800045c:	dbf2      	blt.n	8000444 <initArray+0x10>
	}
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <detect>:

int detect(uint16_t i, uint16_t j) {
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	4603      	mov	r3, r0
 8000472:	460a      	mov	r2, r1
 8000474:	80fb      	strh	r3, [r7, #6]
 8000476:	4613      	mov	r3, r2
 8000478:	80bb      	strh	r3, [r7, #4]
	if ((abs(FACE_ONE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_ONE_Y - j)<=SAMPLE_SIZE/2)) {
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000480:	f113 0f04 	cmn.w	r3, #4
 8000484:	db11      	blt.n	80004aa <detect+0x40>
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800048c:	2b04      	cmp	r3, #4
 800048e:	dc0c      	bgt.n	80004aa <detect+0x40>
 8000490:	88bb      	ldrh	r3, [r7, #4]
 8000492:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8000496:	f113 0f04 	cmn.w	r3, #4
 800049a:	db06      	blt.n	80004aa <detect+0x40>
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	dc01      	bgt.n	80004aa <detect+0x40>
		return 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e0c0      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_TWO_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_TWO_Y - j)<=SAMPLE_SIZE/2)) {
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 80004b0:	f113 0f04 	cmn.w	r3, #4
 80004b4:	db11      	blt.n	80004da <detect+0x70>
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 80004bc:	2b04      	cmp	r3, #4
 80004be:	dc0c      	bgt.n	80004da <detect+0x70>
 80004c0:	88bb      	ldrh	r3, [r7, #4]
 80004c2:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 80004c6:	f113 0f04 	cmn.w	r3, #4
 80004ca:	db06      	blt.n	80004da <detect+0x70>
 80004cc:	88bb      	ldrh	r3, [r7, #4]
 80004ce:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	dc01      	bgt.n	80004da <detect+0x70>
		return 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e0a8      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_THREE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_THREE_Y - j)<=SAMPLE_SIZE/2)) {
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 80004e0:	f113 0f04 	cmn.w	r3, #4
 80004e4:	db11      	blt.n	800050a <detect+0xa0>
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	dc0c      	bgt.n	800050a <detect+0xa0>
 80004f0:	88bb      	ldrh	r3, [r7, #4]
 80004f2:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80004f6:	f113 0f04 	cmn.w	r3, #4
 80004fa:	db06      	blt.n	800050a <detect+0xa0>
 80004fc:	88bb      	ldrh	r3, [r7, #4]
 80004fe:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000502:	2b04      	cmp	r3, #4
 8000504:	dc01      	bgt.n	800050a <detect+0xa0>
		return 2;
 8000506:	2302      	movs	r3, #2
 8000508:	e090      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_FOUR_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_FOUR_Y - j)<=SAMPLE_SIZE/2)) {
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 8000510:	f113 0f04 	cmn.w	r3, #4
 8000514:	db11      	blt.n	800053a <detect+0xd0>
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 800051c:	2b04      	cmp	r3, #4
 800051e:	dc0c      	bgt.n	800053a <detect+0xd0>
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 8000526:	f113 0f04 	cmn.w	r3, #4
 800052a:	db06      	blt.n	800053a <detect+0xd0>
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 8000532:	2b04      	cmp	r3, #4
 8000534:	dc01      	bgt.n	800053a <detect+0xd0>
		return 3;
 8000536:	2303      	movs	r3, #3
 8000538:	e078      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_FIVE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_FIVE_Y - j)<=SAMPLE_SIZE/2)) {
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000540:	f113 0f04 	cmn.w	r3, #4
 8000544:	db11      	blt.n	800056a <detect+0x100>
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800054c:	2b04      	cmp	r3, #4
 800054e:	dc0c      	bgt.n	800056a <detect+0x100>
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000556:	f113 0f04 	cmn.w	r3, #4
 800055a:	db06      	blt.n	800056a <detect+0x100>
 800055c:	88bb      	ldrh	r3, [r7, #4]
 800055e:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000562:	2b04      	cmp	r3, #4
 8000564:	dc01      	bgt.n	800056a <detect+0x100>
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e060      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_SIX_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_SIX_Y - j)<=SAMPLE_SIZE/2)) {
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000570:	f113 0f04 	cmn.w	r3, #4
 8000574:	db11      	blt.n	800059a <detect+0x130>
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 800057c:	2b04      	cmp	r3, #4
 800057e:	dc0c      	bgt.n	800059a <detect+0x130>
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 8000586:	f113 0f04 	cmn.w	r3, #4
 800058a:	db06      	blt.n	800059a <detect+0x130>
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 8000592:	2b04      	cmp	r3, #4
 8000594:	dc01      	bgt.n	800059a <detect+0x130>
		return 5;
 8000596:	2305      	movs	r3, #5
 8000598:	e048      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_SEVEN_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_SEVEN_Y - j)<=SAMPLE_SIZE/2)) {
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f1c3 03c0 	rsb	r3, r3, #192	; 0xc0
 80005a0:	f113 0f04 	cmn.w	r3, #4
 80005a4:	db11      	blt.n	80005ca <detect+0x160>
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f1c3 03c0 	rsb	r3, r3, #192	; 0xc0
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	dc0c      	bgt.n	80005ca <detect+0x160>
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80005b6:	f113 0f04 	cmn.w	r3, #4
 80005ba:	db06      	blt.n	80005ca <detect+0x160>
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	dc01      	bgt.n	80005ca <detect+0x160>
		return 6;
 80005c6:	2306      	movs	r3, #6
 80005c8:	e030      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_EIGHT_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_EIGHT_Y - j)<=SAMPLE_SIZE/2)) {
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 80005d0:	f113 0f04 	cmn.w	r3, #4
 80005d4:	db11      	blt.n	80005fa <detect+0x190>
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 80005dc:	2b04      	cmp	r3, #4
 80005de:	dc0c      	bgt.n	80005fa <detect+0x190>
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80005e6:	f113 0f04 	cmn.w	r3, #4
 80005ea:	db06      	blt.n	80005fa <detect+0x190>
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	dc01      	bgt.n	80005fa <detect+0x190>
		return 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	e018      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_NINE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_NINE_Y - j)<=SAMPLE_SIZE/2)) {
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000600:	f113 0f04 	cmn.w	r3, #4
 8000604:	db11      	blt.n	800062a <detect+0x1c0>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800060c:	2b04      	cmp	r3, #4
 800060e:	dc0c      	bgt.n	800062a <detect+0x1c0>
 8000610:	88bb      	ldrh	r3, [r7, #4]
 8000612:	f1c3 03d3 	rsb	r3, r3, #211	; 0xd3
 8000616:	f113 0f04 	cmn.w	r3, #4
 800061a:	db06      	blt.n	800062a <detect+0x1c0>
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	f1c3 03d3 	rsb	r3, r3, #211	; 0xd3
 8000622:	2b04      	cmp	r3, #4
 8000624:	dc01      	bgt.n	800062a <detect+0x1c0>
		return 8;
 8000626:	2308      	movs	r3, #8
 8000628:	e000      	b.n	800062c <detect+0x1c2>
	}
	return 9;
 800062a:	2309      	movs	r3, #9
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <int2RGB>:

void int2RGB(uint16_t RGB, int* R, int* G, int* B) {
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4603      	mov	r3, r0
 8000644:	81fb      	strh	r3, [r7, #14]
	*R = (RGB & 31 << 11) >> 11;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	0adb      	lsrs	r3, r3, #11
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	601a      	str	r2, [r3, #0]
	*G = (RGB & 63 << 5) >> 5;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	115b      	asrs	r3, r3, #5
 8000656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
	*B = RGB & 31;
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <sumRGB>:
			printRGB(R[num], G[num], B[num], row, col);
		}
	}
}

void sumRGB(int Camera_Data, int* R_Sum, int* G_Sum, int* B_Sum) {
 8000672:	b580      	push	{r7, lr}
 8000674:	b088      	sub	sp, #32
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	603b      	str	r3, [r7, #0]
	int R, G, B;
	int2RGB(Camera_Data, &R, &G, &B);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b298      	uxth	r0, r3
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	f107 0218 	add.w	r2, r7, #24
 800068c:	f107 011c 	add.w	r1, r7, #28
 8000690:	f7ff ffd1 	bl	8000636 <int2RGB>
	*R_Sum += R;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	441a      	add	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	601a      	str	r2, [r3, #0]
	*G_Sum += G;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	441a      	add	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
	*B_Sum += B;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	441a      	add	r2, r3
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <averageRGB>:

void averageRGB(int sum, int size, int* average) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	*average = sum/size;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <detect_sum>:
// detect which square and sum the RGB value
void detect_sum(uint16_t i, uint16_t j, uint16_t Camera_Data, int* R, int* G, int* B) {
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b087      	sub	sp, #28
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4603      	mov	r3, r0
 80006ec:	81fb      	strh	r3, [r7, #14]
 80006ee:	460b      	mov	r3, r1
 80006f0:	81bb      	strh	r3, [r7, #12]
 80006f2:	4613      	mov	r3, r2
 80006f4:	817b      	strh	r3, [r7, #10]
	int num = detect(i, j);
 80006f6:	89ba      	ldrh	r2, [r7, #12]
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff feb4 	bl	800046a <detect>
 8000702:	6178      	str	r0, [r7, #20]
	if (num != 9) {
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2b09      	cmp	r3, #9
 8000708:	d00f      	beq.n	800072a <detect_sum+0x48>
		sumRGB(Camera_Data, &(R[num]), &(G[num]), &(B[num]));
 800070a:	8978      	ldrh	r0, [r7, #10]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	18d1      	adds	r1, r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071a:	18d4      	adds	r4, r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000722:	4413      	add	r3, r2
 8000724:	4622      	mov	r2, r4
 8000726:	f7ff ffa4 	bl	8000672 <sumRGB>
	}
}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd90      	pop	{r4, r7, pc}

08000732 <writeColorIntoArray>:
// write the color into the return array
void writeColorIntoArray(int* R, int* G, int* B, char* SquareOfOneFace) {
 8000732:	b480      	push	{r7}
 8000734:	b087      	sub	sp, #28
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	603b      	str	r3, [r7, #0]
	// content the same with printColor()
	for (int num=0; num<9; num++) {
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e034      	b.n	80007b0 <writeColorIntoArray+0x7e>
//						SquareOfOneFace[num] = 'O';
//					}
//				}
//			}
//		}
		if (B <= 10) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0a      	cmp	r3, #10
 800074a:	d817      	bhi.n	800077c <writeColorIntoArray+0x4a>
			if (R < 5){
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d805      	bhi.n	800075e <writeColorIntoArray+0x2c>
				SquareOfOneFace[num] = 'G';
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	2247      	movs	r2, #71	; 0x47
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e025      	b.n	80007aa <writeColorIntoArray+0x78>
			} else {
				if (G < 10) {
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b09      	cmp	r3, #9
 8000762:	d805      	bhi.n	8000770 <writeColorIntoArray+0x3e>
					SquareOfOneFace[num] = 'R';
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	2252      	movs	r2, #82	; 0x52
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e01c      	b.n	80007aa <writeColorIntoArray+0x78>
				} else {
					SquareOfOneFace[num] = 'O';
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	224f      	movs	r2, #79	; 0x4f
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e016      	b.n	80007aa <writeColorIntoArray+0x78>
				}
			}
		} else {
			if (R < 5) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b04      	cmp	r3, #4
 8000780:	d805      	bhi.n	800078e <writeColorIntoArray+0x5c>
				SquareOfOneFace[num] = 'B';
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	4413      	add	r3, r2
 8000788:	2242      	movs	r2, #66	; 0x42
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e00d      	b.n	80007aa <writeColorIntoArray+0x78>
			} else {
				if (B > 20) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b14      	cmp	r3, #20
 8000792:	d905      	bls.n	80007a0 <writeColorIntoArray+0x6e>
					SquareOfOneFace[num] = 'W';
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	2257      	movs	r2, #87	; 0x57
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e004      	b.n	80007aa <writeColorIntoArray+0x78>
				} else {
					SquareOfOneFace[num] = 'Y';
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	2259      	movs	r2, #89	; 0x59
 80007a8:	701a      	strb	r2, [r3, #0]
	for (int num=0; num<9; num++) {
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	ddc7      	ble.n	8000746 <writeColorIntoArray+0x14>
				}
			}
		}
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	371c      	adds	r7, #28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <ReadSquare>:

// main system will make use of this function to scan one face
void ReadSquare(char* SquareOfOneFace) {
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b0a3      	sub	sp, #140	; 0x8c
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t Camera_Data;
	int R[9];
	int G[9];
	int B[9];
	initArray(R, 9);
 80007cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d0:	2109      	movs	r1, #9
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe2e 	bl	8000434 <initArray>
	initArray(G, 9);
 80007d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007dc:	2109      	movs	r1, #9
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe28 	bl	8000434 <initArray>
	initArray(B, 9);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2109      	movs	r1, #9
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fe22 	bl	8000434 <initArray>

	// LCD_Cam_Gram();

	for(i = 0; i < 240; i++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80007f6:	e043      	b.n	8000880 <ReadSquare+0xbc>
	{
		for(j = 0; j < 320; j++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80007fe:	e035      	b.n	800086c <ReadSquare+0xa8>
		{
			READ_FIFO_PIXEL(Camera_Data);
 8000800:	2300      	movs	r3, #0
 8000802:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <ReadSquare+0x160>)
 8000808:	2220      	movs	r2, #32
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b46      	ldr	r3, [pc, #280]	; (8000928 <ReadSquare+0x164>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	b29b      	uxth	r3, r3
 8000812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000816:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800081a:	4b42      	ldr	r3, [pc, #264]	; (8000924 <ReadSquare+0x160>)
 800081c:	2220      	movs	r2, #32
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	4b40      	ldr	r3, [pc, #256]	; (8000924 <ReadSquare+0x160>)
 8000822:	2220      	movs	r2, #32
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <ReadSquare+0x164>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	b2db      	uxtb	r3, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000834:	4313      	orrs	r3, r2
 8000836:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <ReadSquare+0x160>)
 800083c:	2220      	movs	r2, #32
 800083e:	611a      	str	r2, [r3, #16]
			detect_sum(i, j, Camera_Data, R, G, B);
 8000840:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000844:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8000848:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 800084c:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4623      	mov	r3, r4
 800085e:	f7ff ff40 	bl	80006e2 <detect_sum>
		for(j = 0; j < 320; j++)
 8000862:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000866:	3301      	adds	r3, #1
 8000868:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800086c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000870:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000874:	d3c4      	bcc.n	8000800 <ReadSquare+0x3c>
	for(i = 0; i < 240; i++)
 8000876:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800087a:	3301      	adds	r3, #1
 800087c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8000880:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000884:	2bef      	cmp	r3, #239	; 0xef
 8000886:	d9b7      	bls.n	80007f8 <ReadSquare+0x34>
		}
	}
	for (i=0; i<9; ++i) {
 8000888:	2300      	movs	r3, #0
 800088a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800088e:	e037      	b.n	8000900 <ReadSquare+0x13c>
		averageRGB(R[i], SAMPLE_SIZE*SAMPLE_SIZE, &(R[i]));
 8000890:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	3380      	adds	r3, #128	; 0x80
 8000898:	443b      	add	r3, r7
 800089a:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 800089e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	2151      	movs	r1, #81	; 0x51
 80008ae:	f7ff ff07 	bl	80006c0 <averageRGB>
		averageRGB(G[i], SAMPLE_SIZE*SAMPLE_SIZE, &(G[i]));
 80008b2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	3380      	adds	r3, #128	; 0x80
 80008ba:	443b      	add	r3, r7
 80008bc:	f853 0c50 	ldr.w	r0, [r3, #-80]
 80008c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	2151      	movs	r1, #81	; 0x51
 80008d0:	f7ff fef6 	bl	80006c0 <averageRGB>
		averageRGB(B[i], SAMPLE_SIZE*SAMPLE_SIZE, &(B[i]));
 80008d4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	3380      	adds	r3, #128	; 0x80
 80008dc:	443b      	add	r3, r7
 80008de:	f853 0c74 	ldr.w	r0, [r3, #-116]
 80008e2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	461a      	mov	r2, r3
 80008f0:	2151      	movs	r1, #81	; 0x51
 80008f2:	f7ff fee5 	bl	80006c0 <averageRGB>
	for (i=0; i<9; ++i) {
 80008f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8000900:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000904:	2b08      	cmp	r3, #8
 8000906:	d9c3      	bls.n	8000890 <ReadSquare+0xcc>
	}
	// printColorRGB(R, G, B);
	writeColorIntoArray(R, G, B, SquareOfOneFace);
 8000908:	f107 020c 	add.w	r2, r7, #12
 800090c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000910:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f7ff ff0c 	bl	8000732 <writeColorIntoArray>
	// printArray(SquareOfOneFace);
	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	// HAL_Delay(1000);
}
 800091a:	bf00      	nop
 800091c:	3784      	adds	r7, #132	; 0x84
 800091e:	46bd      	mov	sp, r7
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	bf00      	nop
 8000924:	40011000 	.word	0x40011000
 8000928:	40010c00 	.word	0x40010c00

0800092c <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000932:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000936:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000938:	e002      	b.n	8000940 <SCCB_delay+0x14>
   { 
     i--; 
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	3b01      	subs	r3, #1
 800093e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f9      	bne.n	800093a <SCCB_delay+0xe>
   } 
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	SDA_H;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <SCCB_Start+0x54>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	611a      	str	r2, [r3, #16]
	SCL_H;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <SCCB_Start+0x54>)
 8000960:	2240      	movs	r2, #64	; 0x40
 8000962:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000964:	f7ff ffe2 	bl	800092c <SCCB_delay>
	if(!SDA_read)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	480f      	ldr	r0, [pc, #60]	; (80009a8 <SCCB_Start+0x54>)
 800096c:	f001 fd1c 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <SCCB_Start+0x26>
	return DISABLE;	
 8000976:	2300      	movs	r3, #0
 8000978:	e013      	b.n	80009a2 <SCCB_Start+0x4e>
	SDA_L;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <SCCB_Start+0x54>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000980:	f7ff ffd4 	bl	800092c <SCCB_delay>
	if(SDA_read) 
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <SCCB_Start+0x54>)
 8000988:	f001 fd0e 	bl	80023a8 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SCCB_Start+0x42>
	return DISABLE;	
 8000992:	2300      	movs	r3, #0
 8000994:	e005      	b.n	80009a2 <SCCB_Start+0x4e>
	SDA_L;
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SCCB_Start+0x54>)
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800099c:	f7ff ffc6 	bl	800092c <SCCB_delay>
	return ENABLE;
 80009a0:	2301      	movs	r3, #1
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40011000 	.word	0x40011000

080009ac <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	SCL_L;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SCCB_Stop+0x30>)
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009b6:	f7ff ffb9 	bl	800092c <SCCB_delay>
	SDA_L;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <SCCB_Stop+0x30>)
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009c0:	f7ff ffb4 	bl	800092c <SCCB_delay>
	SCL_H;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SCCB_Stop+0x30>)
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80009ca:	f7ff ffaf 	bl	800092c <SCCB_delay>
	SDA_H;
 80009ce:	4b03      	ldr	r3, [pc, #12]	; (80009dc <SCCB_Stop+0x30>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80009d4:	f7ff ffaa 	bl	800092c <SCCB_delay>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40011000 	.word	0x40011000

080009e0 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	SCL_L;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SCCB_Ack+0x30>)
 80009e6:	2240      	movs	r2, #64	; 0x40
 80009e8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009ea:	f7ff ff9f 	bl	800092c <SCCB_delay>
	SDA_L;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <SCCB_Ack+0x30>)
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009f4:	f7ff ff9a 	bl	800092c <SCCB_delay>
	SCL_H;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SCCB_Ack+0x30>)
 80009fa:	2240      	movs	r2, #64	; 0x40
 80009fc:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80009fe:	f7ff ff95 	bl	800092c <SCCB_delay>
	SCL_L;
 8000a02:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <SCCB_Ack+0x30>)
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a08:	f7ff ff90 	bl	800092c <SCCB_delay>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40011000 	.word	0x40011000

08000a14 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	SCL_L;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <SCCB_NoAck+0x30>)
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a1e:	f7ff ff85 	bl	800092c <SCCB_delay>
	SDA_H;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <SCCB_NoAck+0x30>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a28:	f7ff ff80 	bl	800092c <SCCB_delay>
	SCL_H;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SCCB_NoAck+0x30>)
 8000a2e:	2240      	movs	r2, #64	; 0x40
 8000a30:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a32:	f7ff ff7b 	bl	800092c <SCCB_delay>
	SCL_L;
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <SCCB_NoAck+0x30>)
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a3c:	f7ff ff76 	bl	800092c <SCCB_delay>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40011000 	.word	0x40011000

08000a48 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	SCL_L;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a4e:	2240      	movs	r2, #64	; 0x40
 8000a50:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a52:	f7ff ff6b 	bl	800092c <SCCB_delay>
	SDA_H;			
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a5c:	f7ff ff66 	bl	800092c <SCCB_delay>
	SCL_H;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a62:	2240      	movs	r2, #64	; 0x40
 8000a64:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a66:	f7ff ff61 	bl	800092c <SCCB_delay>
	if(SDA_read)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a6e:	f001 fc9b 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e003      	b.n	8000a8a <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <SCCB_WaitAck+0x48>)
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40011000 	.word	0x40011000

08000a94 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000aa2:	e019      	b.n	8000ad8 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <SCCB_SendByte+0x5c>)
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000aaa:	f7ff ff3f 	bl	800092c <SCCB_delay>
      if(SendByte&0x80)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	da03      	bge.n	8000abe <SCCB_SendByte+0x2a>
        SDA_H;  
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <SCCB_SendByte+0x5c>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	e002      	b.n	8000ac4 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <SCCB_SendByte+0x5c>)
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000aca:	f7ff ff2f 	bl	800092c <SCCB_delay>
		SCL_H;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SCCB_SendByte+0x5c>)
 8000ad0:	2240      	movs	r2, #64	; 0x40
 8000ad2:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000ad4:	f7ff ff2a 	bl	800092c <SCCB_delay>
    while(i--)
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	73fa      	strb	r2, [r7, #15]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1e0      	bne.n	8000aa4 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <SCCB_SendByte+0x5c>)
 8000ae4:	2240      	movs	r2, #64	; 0x40
 8000ae6:	615a      	str	r2, [r3, #20]
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40011000 	.word	0x40011000

08000af4 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000afa:	2308      	movs	r3, #8
 8000afc:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <SCCB_ReceiveByte+0x60>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	611a      	str	r2, [r3, #16]
    while(i--)
 8000b08:	e017      	b.n	8000b3a <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SCCB_ReceiveByte+0x60>)
 8000b12:	2240      	movs	r2, #64	; 0x40
 8000b14:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000b16:	f7ff ff09 	bl	800092c <SCCB_delay>
	  SCL_H;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <SCCB_ReceiveByte+0x60>)
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000b20:	f7ff ff04 	bl	800092c <SCCB_delay>
      if(SDA_read)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <SCCB_ReceiveByte+0x60>)
 8000b28:	f001 fc3e 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	71fa      	strb	r2, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e2      	bne.n	8000b0a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <SCCB_ReceiveByte+0x60>)
 8000b46:	2240      	movs	r2, #64	; 0x40
 8000b48:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40011000 	.word	0x40011000

08000b58 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	80fb      	strh	r3, [r7, #6]
 8000b64:	4613      	mov	r3, r2
 8000b66:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000b68:	f7ff fef4 	bl	8000954 <SCCB_Start>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e01b      	b.n	8000bae <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000b76:	2042      	movs	r0, #66	; 0x42
 8000b78:	f7ff ff8c 	bl	8000a94 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000b7c:	f7ff ff64 	bl	8000a48 <SCCB_WaitAck>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000b86:	f7ff ff11 	bl	80009ac <SCCB_Stop>
		return DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e00f      	b.n	8000bae <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff7e 	bl	8000a94 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000b98:	f7ff ff56 	bl	8000a48 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff78 	bl	8000a94 <SCCB_SendByte>
    SCCB_WaitAck();   
 8000ba4:	f7ff ff50 	bl	8000a48 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000ba8:	f7ff ff00 	bl	80009ac <SCCB_Stop>
    return ENABLE;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	807b      	strh	r3, [r7, #2]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000bc6:	f7ff fec5 	bl	8000954 <SCCB_Start>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e040      	b.n	8000c56 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000bd4:	2042      	movs	r0, #66	; 0x42
 8000bd6:	f7ff ff5d 	bl	8000a94 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000bda:	f7ff ff35 	bl	8000a48 <SCCB_WaitAck>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d103      	bne.n	8000bec <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000be4:	f7ff fee2 	bl	80009ac <SCCB_Stop>
		return DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e034      	b.n	8000c56 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff50 	bl	8000a94 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000bf4:	f7ff ff28 	bl	8000a48 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000bf8:	f7ff fed8 	bl	80009ac <SCCB_Stop>
	
    if(!SCCB_Start())
 8000bfc:	f7ff feaa 	bl	8000954 <SCCB_Start>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e025      	b.n	8000c56 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000c0a:	2043      	movs	r0, #67	; 0x43
 8000c0c:	f7ff ff42 	bl	8000a94 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000c10:	f7ff ff1a 	bl	8000a48 <SCCB_WaitAck>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d117      	bne.n	8000c4a <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000c1a:	f7ff fec7 	bl	80009ac <SCCB_Stop>
		return DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e019      	b.n	8000c56 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000c22:	f7ff ff67 	bl	8000af4 <SCCB_ReceiveByte>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d102      	bne.n	8000c3a <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000c34:	f7ff feee 	bl	8000a14 <SCCB_NoAck>
 8000c38:	e001      	b.n	8000c3e <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000c3a:	f7ff fed1 	bl	80009e0 <SCCB_Ack>
	  }
      pBuffer++;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
      length--;
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	807b      	strh	r3, [r7, #2]
    while(length)
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1e8      	bne.n	8000c22 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000c50:	f7ff feac 	bl	80009ac <SCCB_Stop>
    return ENABLE;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c7a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c7e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c82:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <MX_FSMC_Init+0xc0>)
 8000c84:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000cde:	23ff      	movs	r3, #255	; 0xff
 8000ce0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cea:	2311      	movs	r3, #17
 8000cec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_FSMC_Init+0xbc>)
 8000cfa:	f001 ffc7 	bl	8002c8c <HAL_SRAM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000d04:	f000 fc87 	bl	8001616 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_FSMC_Init+0xc4>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <MX_FSMC_Init+0xc4>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	61d3      	str	r3, [r2, #28]

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	a0000104 	.word	0xa0000104
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_FSMC_MspInit+0x78>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d129      	bne.n	8000d98 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_FSMC_MspInit+0x78>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_FSMC_MspInit+0x7c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_FSMC_MspInit+0x7c>)
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_FSMC_MspInit+0x7c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d62:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d66:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <HAL_FSMC_MspInit+0x80>)
 8000d78:	f001 f97e 	bl	8002078 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d7c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000d80:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_FSMC_MspInit+0x84>)
 8000d92:	f001 f971 	bl	8002078 <HAL_GPIO_Init>
 8000d96:	e000      	b.n	8000d9a <HAL_FSMC_MspInit+0x72>
    return;
 8000d98:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000108 	.word	0x20000108
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40011800 	.word	0x40011800
 8000dac:	40011400 	.word	0x40011400

08000db0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000db8:	f7ff ffb6 	bl	8000d28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd8:	4b7d      	ldr	r3, [pc, #500]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a7c      	ldr	r2, [pc, #496]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b7a      	ldr	r3, [pc, #488]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a76      	ldr	r2, [pc, #472]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b74      	ldr	r3, [pc, #464]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b71      	ldr	r3, [pc, #452]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a70      	ldr	r2, [pc, #448]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b6e      	ldr	r3, [pc, #440]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a6a      	ldr	r2, [pc, #424]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b68      	ldr	r3, [pc, #416]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b62      	ldr	r3, [pc, #392]	; (8000fd0 <MX_GPIO_Init+0x20c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2107      	movs	r1, #7
 8000e54:	485f      	ldr	r0, [pc, #380]	; (8000fd4 <MX_GPIO_Init+0x210>)
 8000e56:	f001 fabe 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210c      	movs	r1, #12
 8000e5e:	485e      	ldr	r0, [pc, #376]	; (8000fd8 <MX_GPIO_Init+0x214>)
 8000e60:	f001 fab9 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	21f0      	movs	r1, #240	; 0xf0
 8000e68:	485c      	ldr	r0, [pc, #368]	; (8000fdc <MX_GPIO_Init+0x218>)
 8000e6a:	f001 fab4 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2123      	movs	r1, #35	; 0x23
 8000e72:	485b      	ldr	r0, [pc, #364]	; (8000fe0 <MX_GPIO_Init+0x21c>)
 8000e74:	f001 faaf 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f243 0108 	movw	r1, #12296	; 0x3008
 8000e7e:	4859      	ldr	r0, [pc, #356]	; (8000fe4 <MX_GPIO_Init+0x220>)
 8000e80:	f001 faa9 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	484e      	ldr	r0, [pc, #312]	; (8000fd4 <MX_GPIO_Init+0x210>)
 8000e9c:	f001 f8ec 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4848      	ldr	r0, [pc, #288]	; (8000fd4 <MX_GPIO_Init+0x210>)
 8000eb4:	f001 f8e0 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <MX_GPIO_Init+0x224>)
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <MX_GPIO_Init+0x210>)
 8000ecc:	f001 f8d4 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <MX_GPIO_Init+0x228>)
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	483e      	ldr	r0, [pc, #248]	; (8000fdc <MX_GPIO_Init+0x218>)
 8000ee4:	f001 f8c8 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4837      	ldr	r0, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0x214>)
 8000efc:	f001 f8bc 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f00:	230c      	movs	r3, #12
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4830      	ldr	r0, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0x214>)
 8000f18:	f001 f8ae 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f1c:	2330      	movs	r3, #48	; 0x30
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4619      	mov	r1, r3
 8000f32:	482a      	ldr	r0, [pc, #168]	; (8000fdc <MX_GPIO_Init+0x218>)
 8000f34:	f001 f8a0 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000f38:	2323      	movs	r3, #35	; 0x23
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <MX_GPIO_Init+0x21c>)
 8000f50:	f001 f892 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000f54:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f58:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <MX_GPIO_Init+0x21c>)
 8000f6a:	f001 f885 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8000f6e:	f243 0308 	movw	r3, #12296	; 0x3008
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <MX_GPIO_Init+0x220>)
 8000f88:	f001 f876 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f8c:	23c0      	movs	r3, #192	; 0xc0
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f90:	2311      	movs	r3, #17
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <MX_GPIO_Init+0x218>)
 8000fa4:	f001 f868 	bl	8002078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2009      	movs	r0, #9
 8000fae:	f001 f82c 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fb2:	2009      	movs	r0, #9
 8000fb4:	f001 f845 	bl	8002042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 f824 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f001 f83d 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40011800 	.word	0x40011800
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	10210000 	.word	0x10210000

08000ff0 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	e002      	b.n	8001000 <Delay+0x10>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f9      	bne.n	8000ffa <Delay+0xa>
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f829 	bl	8001070 <LCD_BackLed_Control>
	LCD_Rst();
 800101e:	f000 f80f 	bl	8001040 <LCD_Rst>
	LCD_REG_Config();
 8001022:	f000 f85f 	bl	80010e4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001030:	22f0      	movs	r2, #240	; 0xf0
 8001032:	2100      	movs	r1, #0
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f9e6 	bl	8001406 <LCD_Clear>
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2102      	movs	r1, #2
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <LCD_Rst+0x28>)
 800104a:	f001 f9c4 	bl	80023d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <LCD_Rst+0x2c>)
 8001050:	f7ff ffce 	bl	8000ff0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <LCD_Rst+0x28>)
 800105a:	f001 f9bc 	bl	80023d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <LCD_Rst+0x2c>)
 8001060:	f7ff ffc6 	bl	8000ff0 <Delay>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011800 	.word	0x40011800
 800106c:	0002bffc 	.word	0x0002bffc

08001070 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <LCD_BackLed_Control+0x34>)
 8001088:	f001 f9a5 	bl	80023d6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800108c:	e005      	b.n	800109a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <LCD_BackLed_Control+0x34>)
 8001096:	f001 f99e 	bl	80023d6 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40011400 	.word	0x40011400

080010a8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80010b2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	8013      	strh	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <LCD_Write_Data+0x1c>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	8013      	strh	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	60020000 	.word	0x60020000

080010e4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80010e8:	20cf      	movs	r0, #207	; 0xcf
 80010ea:	f7ff ffdd 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffe8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80010f4:	2081      	movs	r0, #129	; 0x81
 80010f6:	f7ff ffe5 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80010fa:	2030      	movs	r0, #48	; 0x30
 80010fc:	f7ff ffe2 	bl	80010c4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001100:	20ed      	movs	r0, #237	; 0xed
 8001102:	f7ff ffd1 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f7ff ffdc 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff ffd9 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001112:	2012      	movs	r0, #18
 8001114:	f7ff ffd6 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001118:	2081      	movs	r0, #129	; 0x81
 800111a:	f7ff ffd3 	bl	80010c4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800111e:	20e8      	movs	r0, #232	; 0xe8
 8001120:	f7ff ffc2 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001124:	2085      	movs	r0, #133	; 0x85
 8001126:	f7ff ffcd 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff ffca 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f7ff ffc7 	bl	80010c4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001136:	20cb      	movs	r0, #203	; 0xcb
 8001138:	f7ff ffb6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800113c:	2039      	movs	r0, #57	; 0x39
 800113e:	f7ff ffc1 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001142:	202c      	movs	r0, #44	; 0x2c
 8001144:	f7ff ffbe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ffbb 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800114e:	2034      	movs	r0, #52	; 0x34
 8001150:	f7ff ffb8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff ffb5 	bl	80010c4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800115a:	20f7      	movs	r0, #247	; 0xf7
 800115c:	f7ff ffa4 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff ffaf 	bl	80010c4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001166:	20ea      	movs	r0, #234	; 0xea
 8001168:	f7ff ff9e 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ffa9 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ffa6 	bl	80010c4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001178:	20b1      	movs	r0, #177	; 0xb1
 800117a:	f7ff ff95 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ffa0 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001184:	201b      	movs	r0, #27
 8001186:	f7ff ff9d 	bl	80010c4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800118a:	20b6      	movs	r0, #182	; 0xb6
 800118c:	f7ff ff8c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001190:	200a      	movs	r0, #10
 8001192:	f7ff ff97 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001196:	20a2      	movs	r0, #162	; 0xa2
 8001198:	f7ff ff94 	bl	80010c4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800119c:	20c0      	movs	r0, #192	; 0xc0
 800119e:	f7ff ff83 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80011a2:	2035      	movs	r0, #53	; 0x35
 80011a4:	f7ff ff8e 	bl	80010c4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80011a8:	20c1      	movs	r0, #193	; 0xc1
 80011aa:	f7ff ff7d 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80011ae:	2011      	movs	r0, #17
 80011b0:	f7ff ff88 	bl	80010c4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80011b4:	20c5      	movs	r0, #197	; 0xc5
 80011b6:	f7ff ff77 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80011ba:	2045      	movs	r0, #69	; 0x45
 80011bc:	f7ff ff82 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80011c0:	2045      	movs	r0, #69	; 0x45
 80011c2:	f7ff ff7f 	bl	80010c4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80011c6:	20c7      	movs	r0, #199	; 0xc7
 80011c8:	f7ff ff6e 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80011cc:	20a2      	movs	r0, #162	; 0xa2
 80011ce:	f7ff ff79 	bl	80010c4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80011d2:	20f2      	movs	r0, #242	; 0xf2
 80011d4:	f7ff ff68 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff73 	bl	80010c4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80011de:	2026      	movs	r0, #38	; 0x26
 80011e0:	f7ff ff62 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff ff6d 	bl	80010c4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80011ea:	20e0      	movs	r0, #224	; 0xe0
 80011ec:	f7ff ff5c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80011f0:	200f      	movs	r0, #15
 80011f2:	f7ff ff67 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80011f6:	2026      	movs	r0, #38	; 0x26
 80011f8:	f7ff ff64 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80011fc:	2024      	movs	r0, #36	; 0x24
 80011fe:	f7ff ff61 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001202:	200b      	movs	r0, #11
 8001204:	f7ff ff5e 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001208:	200e      	movs	r0, #14
 800120a:	f7ff ff5b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800120e:	2009      	movs	r0, #9
 8001210:	f7ff ff58 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001214:	2054      	movs	r0, #84	; 0x54
 8001216:	f7ff ff55 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800121a:	20a8      	movs	r0, #168	; 0xa8
 800121c:	f7ff ff52 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001220:	2046      	movs	r0, #70	; 0x46
 8001222:	f7ff ff4f 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001226:	200c      	movs	r0, #12
 8001228:	f7ff ff4c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800122c:	2017      	movs	r0, #23
 800122e:	f7ff ff49 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001232:	2009      	movs	r0, #9
 8001234:	f7ff ff46 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff ff43 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800123e:	2007      	movs	r0, #7
 8001240:	f7ff ff40 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff3d 	bl	80010c4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800124a:	20e1      	movs	r0, #225	; 0xe1
 800124c:	f7ff ff2c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff37 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001256:	2019      	movs	r0, #25
 8001258:	f7ff ff34 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800125c:	201b      	movs	r0, #27
 800125e:	f7ff ff31 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001262:	2004      	movs	r0, #4
 8001264:	f7ff ff2e 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001268:	2010      	movs	r0, #16
 800126a:	f7ff ff2b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800126e:	2007      	movs	r0, #7
 8001270:	f7ff ff28 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001274:	202a      	movs	r0, #42	; 0x2a
 8001276:	f7ff ff25 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800127a:	2047      	movs	r0, #71	; 0x47
 800127c:	f7ff ff22 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001280:	2039      	movs	r0, #57	; 0x39
 8001282:	f7ff ff1f 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff ff1c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800128c:	2006      	movs	r0, #6
 800128e:	f7ff ff19 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001292:	2006      	movs	r0, #6
 8001294:	f7ff ff16 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001298:	2030      	movs	r0, #48	; 0x30
 800129a:	f7ff ff13 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f7ff ff10 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80012a4:	200f      	movs	r0, #15
 80012a6:	f7ff ff0d 	bl	80010c4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80012aa:	2036      	movs	r0, #54	; 0x36
 80012ac:	f7ff fefc 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80012b0:	20c8      	movs	r0, #200	; 0xc8
 80012b2:	f7ff ff07 	bl	80010c4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80012b6:	202a      	movs	r0, #42	; 0x2a
 80012b8:	f7ff fef6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff01 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fefe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fefb 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80012ce:	20ef      	movs	r0, #239	; 0xef
 80012d0:	f7ff fef8 	bl	80010c4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80012d4:	202b      	movs	r0, #43	; 0x2b
 80012d6:	f7ff fee7 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fef2 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff feef 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff feec 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80012ec:	203f      	movs	r0, #63	; 0x3f
 80012ee:	f7ff fee9 	bl	80010c4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80012f2:	203a      	movs	r0, #58	; 0x3a
 80012f4:	f7ff fed8 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80012f8:	2055      	movs	r0, #85	; 0x55
 80012fa:	f7ff fee3 	bl	80010c4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80012fe:	2011      	movs	r0, #17
 8001300:	f7ff fed2 	bl	80010a8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <LCD_REG_Config+0x230>)
 8001306:	f7ff fe73 	bl	8000ff0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800130a:	2029      	movs	r0, #41	; 0x29
 800130c:	f7ff fecc 	bl	80010a8 <LCD_Write_Cmd>
	
	
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0002bffc 	.word	0x0002bffc

08001318 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001336:	202a      	movs	r0, #42	; 0x2a
 8001338:	f7ff feb6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff febe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff feb8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	4413      	add	r3, r2
 800135a:	3b01      	subs	r3, #1
 800135c:	121b      	asrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff feaf 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fea4 	bl	80010c4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800137c:	202b      	movs	r0, #43	; 0x2b
 800137e:	f7ff fe93 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe9b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe95 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800139a:	88ba      	ldrh	r2, [r7, #4]
 800139c:	883b      	ldrh	r3, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	3b01      	subs	r3, #1
 80013a2:	121b      	asrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fe8c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80013ac:	88ba      	ldrh	r2, [r7, #4]
 80013ae:	883b      	ldrh	r3, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe81 	bl	80010c4 <LCD_Write_Data>
	
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}

080013ca <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80013da:	202c      	movs	r0, #44	; 0x2c
 80013dc:	f7ff fe64 	bl	80010a8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e006      	b.n	80013f4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe6b 	bl	80010c4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3f4      	bcc.n	80013e6 <LCD_FillColor+0x1c>
		
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	4604      	mov	r4, r0
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4623      	mov	r3, r4
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4603      	mov	r3, r0
 800141a:	80bb      	strh	r3, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	88b9      	ldrh	r1, [r7, #4]
 800142a:	88f8      	ldrh	r0, [r7, #6]
 800142c:	f7ff ff74 	bl	8001318 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	883a      	ldrh	r2, [r7, #0]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	461a      	mov	r2, r3
 800143a:	8b3b      	ldrh	r3, [r7, #24]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f7ff ffc3 	bl	80013ca <LCD_FillColor>
	
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	3b20      	subs	r3, #32
 8001462:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001464:	88b9      	ldrh	r1, [r7, #4]
 8001466:	88f8      	ldrh	r0, [r7, #6]
 8001468:	2310      	movs	r3, #16
 800146a:	2208      	movs	r2, #8
 800146c:	f7ff ff54 	bl	8001318 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001470:	202c      	movs	r0, #44	; 0x2c
 8001472:	f7ff fe19 	bl	80010a8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	e023      	b.n	80014c4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800147c:	7b3a      	ldrb	r2, [r7, #12]
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <LCD_DrawChar+0x88>)
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	440a      	add	r2, r1
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800148c:	2300      	movs	r3, #0
 800148e:	737b      	strb	r3, [r7, #13]
 8001490:	e012      	b.n	80014b8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800149c:	201f      	movs	r0, #31
 800149e:	f7ff fe11 	bl	80010c4 <LCD_Write_Data>
 80014a2:	e003      	b.n	80014ac <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80014a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014a8:	f7ff fe0c 	bl	80010c4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	3301      	adds	r3, #1
 80014b6:	737b      	strb	r3, [r7, #13]
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9e9      	bls.n	8001492 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73bb      	strb	r3, [r7, #14]
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d9d8      	bls.n	800147c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	08003554 	.word	0x08003554

080014d8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	603a      	str	r2, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	460b      	mov	r3, r1
 80014e6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80014e8:	e01c      	b.n	8001524 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	2be8      	cmp	r3, #232	; 0xe8
 80014ee:	d904      	bls.n	80014fa <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014f0:	2300      	movs	r3, #0
 80014f2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	3310      	adds	r3, #16
 80014f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001500:	d903      	bls.n	800150a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001502:	2300      	movs	r3, #0
 8001504:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001506:	2300      	movs	r3, #0
 8001508:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	88b9      	ldrh	r1, [r7, #4]
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff9a 	bl	800144c <LCD_DrawChar>
		
		pStr ++;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	3308      	adds	r3, #8
 8001522:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1de      	bne.n	80014ea <LCD_DrawString+0x12>
		
	}
	
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f000 fc0b 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f823 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f7ff fc3d 	bl	8000dc4 <MX_GPIO_Init>
  MX_FSMC_Init();
 800154a:	f7ff fb89 	bl	8000c60 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800154e:	f000 faed 	bl	8001b2c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001552:	f000 fb15 	bl	8001b80 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001556:	f7ff fd5c 	bl	8001012 <LCD_INIT>
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char input[5];
	  HAL_UART_Receive(&huart3, input, sizeof(input), 0xFFFF);
 800155a:	4639      	mov	r1, r7
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	2205      	movs	r2, #5
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <main+0x4c>)
 8001564:	f001 fcbc 	bl	8002ee0 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, input, sizeof(input), 0xFFFF);
 8001568:	4639      	mov	r1, r7
 800156a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156e:	2205      	movs	r2, #5
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <main+0x50>)
 8001572:	f001 fc1c 	bl	8002dae <HAL_UART_Transmit>
	  mode(input[4]-'1'+1);
 8001576:	793b      	ldrb	r3, [r7, #4]
 8001578:	3b30      	subs	r3, #48	; 0x30
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f852 	bl	8001624 <mode>
  {
 8001580:	e7eb      	b.n	800155a <main+0x22>
 8001582:	bf00      	nop
 8001584:	20000150 	.word	0x20000150
 8001588:	20000110 	.word	0x20000110

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	; 0x40
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ff94 	bl	80034c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ff39 	bl	800244c <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015e0:	f000 f819 	bl	8001616 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2102      	movs	r1, #2
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f988 	bl	8002914 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160a:	f000 f804 	bl	8001616 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
	...

08001624 <mode>:
#include "process.h"
#include "CameraWithErrorCorrection.h"

extern uint8_t Ov7725_vsync;

void mode(int choice) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b0b6      	sub	sp, #216	; 0xd8
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	switch (choice) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d004      	beq.n	800163c <mode+0x18>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	f000 812f 	beq.w	8001898 <mode+0x274>
					break;
			}
			break;
		}
	}
}
 800163a:	e181      	b.n	8001940 <mode+0x31c>
				AllFaces[54] = '\0';
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001642:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	2201      	movs	r2, #1
 800164c:	48be      	ldr	r0, [pc, #760]	; (8001948 <mode+0x324>)
 800164e:	f001 fc47 	bl	8002ee0 <HAL_UART_Receive>
				switch (signal) {
 8001652:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001656:	3b31      	subs	r3, #49	; 0x31
 8001658:	2b03      	cmp	r3, #3
 800165a:	f200 8118 	bhi.w	800188e <mode+0x26a>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <mode+0x40>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001675 	.word	0x08001675
 8001668:	080016bb 	.word	0x080016bb
 800166c:	080017e9 	.word	0x080017e9
 8001670:	08001857 	.word	0x08001857
						char message_r[2], message_t = 'T';
 8001674:	2354      	movs	r3, #84	; 0x54
 8001676:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 800167a:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	2201      	movs	r2, #1
 8001684:	48b1      	ldr	r0, [pc, #708]	; (800194c <mode+0x328>)
 8001686:	f001 fb92 	bl	8002dae <HAL_UART_Transmit>
						LCD_DrawChar(0,0,signal);
 800168a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800168e:	461a      	mov	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff feda 	bl	800144c <LCD_DrawChar>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);	// ok
 8001698:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800169c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a0:	2202      	movs	r2, #2
 80016a2:	48aa      	ldr	r0, [pc, #680]	; (800194c <mode+0x328>)
 80016a4:	f001 fc1c 	bl	8002ee0 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 80016a8:	f107 01cb 	add.w	r1, r7, #203	; 0xcb
 80016ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b0:	2201      	movs	r2, #1
 80016b2:	48a5      	ldr	r0, [pc, #660]	; (8001948 <mode+0x324>)
 80016b4:	f001 fb7b 	bl	8002dae <HAL_UART_Transmit>
						break;
 80016b8:	e0e9      	b.n	800188e <mode+0x26a>
						uint8_t face = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 80016c0:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 80016c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c8:	2201      	movs	r2, #1
 80016ca:	48a0      	ldr	r0, [pc, #640]	; (800194c <mode+0x328>)
 80016cc:	f001 fb6f 	bl	8002dae <HAL_UART_Transmit>
						while (face < 6) {
 80016d0:	e07c      	b.n	80017cc <mode+0x1a8>
							char message_r, SquareOfOneFace[9], message_t = 'T';
 80016d2:	2354      	movs	r3, #84	; 0x54
 80016d4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
							HAL_UART_Receive(&huart1, &message_r, 1, 0xFFFF);
 80016d8:	f107 01ca 	add.w	r1, r7, #202	; 0xca
 80016dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e0:	2201      	movs	r2, #1
 80016e2:	4899      	ldr	r0, [pc, #612]	; (8001948 <mode+0x324>)
 80016e4:	f001 fbfc 	bl	8002ee0 <HAL_UART_Receive>
							while(Ov7725_Init() != SUCCESS);
 80016e8:	bf00      	nop
 80016ea:	f7fe fe59 	bl	80003a0 <Ov7725_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1fa      	bne.n	80016ea <mode+0xc6>
							Ov7725_vsync = 0;
 80016f4:	4b96      	ldr	r3, [pc, #600]	; (8001950 <mode+0x32c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
							HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fe:	f000 fb8d 	bl	8001e1c <HAL_Delay>
								if (Ov7725_vsync == 2)
 8001702:	4b93      	ldr	r3, [pc, #588]	; (8001950 <mode+0x32c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d1fb      	bne.n	8001702 <mode+0xde>
										FIFO_PREPARE;
 800170a:	4b92      	ldr	r3, [pc, #584]	; (8001954 <mode+0x330>)
 800170c:	2204      	movs	r2, #4
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	4b91      	ldr	r3, [pc, #580]	; (8001958 <mode+0x334>)
 8001712:	2220      	movs	r2, #32
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	4b90      	ldr	r3, [pc, #576]	; (8001958 <mode+0x334>)
 8001718:	2220      	movs	r2, #32
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b8d      	ldr	r3, [pc, #564]	; (8001954 <mode+0x330>)
 800171e:	2204      	movs	r2, #4
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b8d      	ldr	r3, [pc, #564]	; (8001958 <mode+0x334>)
 8001724:	2220      	movs	r2, #32
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <mode+0x334>)
 800172a:	2220      	movs	r2, #32
 800172c:	611a      	str	r2, [r3, #16]
										ReadSquare(SquareOfOneFace);
 800172e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f846 	bl	80007c4 <ReadSquare>
										break;
 8001738:	bf00      	nop
							LCD_Clear ( 0, 0, 240, 320, GREY );
 800173a:	f24f 73de 	movw	r3, #63454	; 0xf7de
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001744:	22f0      	movs	r2, #240	; 0xf0
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fe5c 	bl	8001406 <LCD_Clear>
							printFace(SquareOfOneFace);
 800174e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fdda 	bl	800030c <printFace>
								printFace(SquareOfOneFace);
 8001758:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fdd5 	bl	800030c <printFace>
								HAL_UART_Receive(&huart3, correctionMessage, sizeof(correctionMessage), 0xFFFF);
 8001762:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176a:	2207      	movs	r2, #7
 800176c:	4877      	ldr	r0, [pc, #476]	; (800194c <mode+0x328>)
 800176e:	f001 fbb7 	bl	8002ee0 <HAL_UART_Receive>
								if (stringCompare(correctionMessage, "confirm", 7) == 0) {	// correct then
 8001772:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001776:	2207      	movs	r2, #7
 8001778:	4978      	ldr	r1, [pc, #480]	; (800195c <mode+0x338>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fda4 	bl	80002c8 <stringCompare>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <mode+0x190>
									writeDataIntoAllFaces(AllFaces, SquareOfOneFace,face);	// write one face data into all face data
 8001786:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 800178a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd46 	bl	8000224 <writeDataIntoAllFaces>
									HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);		// transmit signal to Control Board
 8001798:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
 800179c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a0:	2201      	movs	r2, #1
 80017a2:	4869      	ldr	r0, [pc, #420]	; (8001948 <mode+0x324>)
 80017a4:	f001 fb03 	bl	8002dae <HAL_UART_Transmit>
									face++;
 80017a8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80017ac:	3301      	adds	r3, #1
 80017ae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80017b2:	e00b      	b.n	80017cc <mode+0x1a8>
									SquareOfOneFace[correctionMessage[0]-'1'] = (char) ((int) correctionMessage[1] - 32);// correct it and go back to receceive message from PC
 80017b4:	f897 20b9 	ldrb.w	r2, [r7, #185]	; 0xb9
 80017b8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80017bc:	3b31      	subs	r3, #49	; 0x31
 80017be:	3a20      	subs	r2, #32
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	33d0      	adds	r3, #208	; 0xd0
 80017c4:	443b      	add	r3, r7
 80017c6:	f803 2c10 	strb.w	r2, [r3, #-16]
							while (1) {
 80017ca:	e7c5      	b.n	8001758 <mode+0x134>
						while (face < 6) {
 80017cc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	f67f af7e 	bls.w	80016d2 <mode+0xae>
						HAL_UART_Transmit(&huart3, AllFaces, sizeof(AllFaces), 0xFFFF);		// transmit capture result to PC
 80017d6:	f107 010c 	add.w	r1, r7, #12
 80017da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017de:	2237      	movs	r2, #55	; 0x37
 80017e0:	485a      	ldr	r0, [pc, #360]	; (800194c <mode+0x328>)
 80017e2:	f001 fae4 	bl	8002dae <HAL_UART_Transmit>
						break;
 80017e6:	e052      	b.n	800188e <mode+0x26a>
						LCD_Clear( 0, 0, 240, 320, GREY );
 80017e8:	f24f 73de 	movw	r3, #63454	; 0xf7de
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017f2:	22f0      	movs	r2, #240	; 0xf0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fe05 	bl	8001406 <LCD_Clear>
						LCD_DrawString(0,0,"123");
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <mode+0x33c>)
 80017fe:	2100      	movs	r1, #0
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fe69 	bl	80014d8 <LCD_DrawString>
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 8001806:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	2201      	movs	r2, #1
 8001810:	484e      	ldr	r0, [pc, #312]	; (800194c <mode+0x328>)
 8001812:	f001 facc 	bl	8002dae <HAL_UART_Transmit>
						LCD_DrawString(0,8,"123");
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <mode+0x33c>)
 8001818:	2108      	movs	r1, #8
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fe5c 	bl	80014d8 <LCD_DrawString>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 8001820:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001828:	2264      	movs	r2, #100	; 0x64
 800182a:	4848      	ldr	r0, [pc, #288]	; (800194c <mode+0x328>)
 800182c:	f001 fb58 	bl	8002ee0 <HAL_UART_Receive>
						LCD_DrawString(0,16,"123");
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <mode+0x33c>)
 8001832:	2110      	movs	r1, #16
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fe4f 	bl	80014d8 <LCD_DrawString>
						HAL_UART_Transmit(&huart1, message_r, sizeof(message_r), 0xFFFF);
 800183a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800183e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001842:	2264      	movs	r2, #100	; 0x64
 8001844:	4840      	ldr	r0, [pc, #256]	; (8001948 <mode+0x324>)
 8001846:	f001 fab2 	bl	8002dae <HAL_UART_Transmit>
						LCD_DrawString(0,32,"123");
 800184a:	4a45      	ldr	r2, [pc, #276]	; (8001960 <mode+0x33c>)
 800184c:	2120      	movs	r1, #32
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fe42 	bl	80014d8 <LCD_DrawString>
						break;
 8001854:	e01b      	b.n	800188e <mode+0x26a>
						char message_r[2], message_t = 'T';
 8001856:	2354      	movs	r3, #84	; 0x54
 8001858:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 800185c:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 8001860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001864:	2201      	movs	r2, #1
 8001866:	4839      	ldr	r0, [pc, #228]	; (800194c <mode+0x328>)
 8001868:	f001 faa1 	bl	8002dae <HAL_UART_Transmit>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 800186c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001874:	2202      	movs	r2, #2
 8001876:	4835      	ldr	r0, [pc, #212]	; (800194c <mode+0x328>)
 8001878:	f001 fb32 	bl	8002ee0 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 800187c:	f107 01b3 	add.w	r1, r7, #179	; 0xb3
 8001880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001884:	2201      	movs	r2, #1
 8001886:	4830      	ldr	r0, [pc, #192]	; (8001948 <mode+0x324>)
 8001888:	f001 fa91 	bl	8002dae <HAL_UART_Transmit>
						break;
 800188c:	bf00      	nop
				if (signal == '4')
 800188e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001892:	2b34      	cmp	r3, #52	; 0x34
 8001894:	d051      	beq.n	800193a <mode+0x316>
			while (1) {
 8001896:	e6d1      	b.n	800163c <mode+0x18>
				HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 8001898:	f107 01b2 	add.w	r1, r7, #178	; 0xb2
 800189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a0:	2201      	movs	r2, #1
 80018a2:	4829      	ldr	r0, [pc, #164]	; (8001948 <mode+0x324>)
 80018a4:	f001 fb1c 	bl	8002ee0 <HAL_UART_Receive>
				switch (signal) {
 80018a8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80018ac:	2b33      	cmp	r3, #51	; 0x33
 80018ae:	d02b      	beq.n	8001908 <mode+0x2e4>
 80018b0:	2b33      	cmp	r3, #51	; 0x33
 80018b2:	dc3d      	bgt.n	8001930 <mode+0x30c>
 80018b4:	2b31      	cmp	r3, #49	; 0x31
 80018b6:	d002      	beq.n	80018be <mode+0x29a>
 80018b8:	2b32      	cmp	r3, #50	; 0x32
 80018ba:	d014      	beq.n	80018e6 <mode+0x2c2>
 80018bc:	e038      	b.n	8001930 <mode+0x30c>
						char message_r[2], message_t = 'T';
 80018be:	2354      	movs	r3, #84	; 0x54
 80018c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 80018c4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80018c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018cc:	2202      	movs	r2, #2
 80018ce:	481f      	ldr	r0, [pc, #124]	; (800194c <mode+0x328>)
 80018d0:	f001 fb06 	bl	8002ee0 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 80018d4:	f107 01af 	add.w	r1, r7, #175	; 0xaf
 80018d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018dc:	2201      	movs	r2, #1
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <mode+0x324>)
 80018e0:	f001 fa65 	bl	8002dae <HAL_UART_Transmit>
						break;
 80018e4:	e024      	b.n	8001930 <mode+0x30c>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 80018e6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ee:	2264      	movs	r2, #100	; 0x64
 80018f0:	4816      	ldr	r0, [pc, #88]	; (800194c <mode+0x328>)
 80018f2:	f001 faf5 	bl	8002ee0 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, message_r, sizeof(message_r), 0xFFFF);
 80018f6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	2264      	movs	r2, #100	; 0x64
 8001900:	4811      	ldr	r0, [pc, #68]	; (8001948 <mode+0x324>)
 8001902:	f001 fa54 	bl	8002dae <HAL_UART_Transmit>
						break;
 8001906:	e013      	b.n	8001930 <mode+0x30c>
						char message_r[2], message_t = 'T';
 8001908:	2354      	movs	r3, #84	; 0x54
 800190a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 800190e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001916:	2202      	movs	r2, #2
 8001918:	480c      	ldr	r0, [pc, #48]	; (800194c <mode+0x328>)
 800191a:	f001 fae1 	bl	8002ee0 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 800191e:	f107 01ab 	add.w	r1, r7, #171	; 0xab
 8001922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001926:	2201      	movs	r2, #1
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <mode+0x324>)
 800192a:	f001 fa40 	bl	8002dae <HAL_UART_Transmit>
						break;
 800192e:	bf00      	nop
				if (signal == '3')
 8001930:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001934:	2b33      	cmp	r3, #51	; 0x33
 8001936:	d002      	beq.n	800193e <mode+0x31a>
			while (1) {
 8001938:	e7ae      	b.n	8001898 <mode+0x274>
			break;
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <mode+0x31c>
			break;
 800193e:	bf00      	nop
}
 8001940:	bf00      	nop
 8001942:	37d0      	adds	r7, #208	; 0xd0
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000110 	.word	0x20000110
 800194c:	20000150 	.word	0x20000150
 8001950:	2000010c 	.word	0x2000010c
 8001954:	40010800 	.word	0x40010800
 8001958:	40011000 	.word	0x40011000
 800195c:	08003538 	.word	0x08003538
 8001960:	08003540 	.word	0x08003540

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_MspInit+0x5c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x5c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_MspInit+0x60>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_MspInit+0x60>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <HardFault_Handler+0x4>

080019da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <BusFault_Handler+0x4>

080019e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <UsageFault_Handler+0x4>

080019ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f9e6 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <EXTI3_IRQHandler+0x64>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d023      	beq.n	8001a74 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <EXTI3_IRQHandler+0x68>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <EXTI3_IRQHandler+0x6c>)
 8001a36:	2210      	movs	r2, #16
 8001a38:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <EXTI3_IRQHandler+0x70>)
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <EXTI3_IRQHandler+0x68>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <EXTI3_IRQHandler+0x70>)
 8001a48:	2208      	movs	r2, #8
 8001a4a:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <EXTI3_IRQHandler+0x6c>)
 8001a4e:	2210      	movs	r2, #16
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e009      	b.n	8001a68 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <EXTI3_IRQHandler+0x68>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <EXTI3_IRQHandler+0x70>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <EXTI3_IRQHandler+0x68>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <EXTI3_IRQHandler+0x64>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f000 fce2 	bl	8002438 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a74:	2008      	movs	r0, #8
 8001a76:	f000 fcc7 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40010400 	.word	0x40010400
 8001a84:	2000010c 	.word	0x2000010c
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40011400 	.word	0x40011400

08001a90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <EXTI4_IRQHandler+0x2c>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <EXTI4_IRQHandler+0x30>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <EXTI4_IRQHandler+0x2c>)
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8001aac:	2010      	movs	r0, #16
 8001aae:	f000 fcc3 	bl	8002438 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ab2:	2010      	movs	r0, #16
 8001ab4:	f000 fca8 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40010400 	.word	0x40010400
 8001ac0:	20000190 	.word	0x20000190

08001ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <SystemInit+0x5c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <SystemInit+0x5c>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <SystemInit+0x5c>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4911      	ldr	r1, [pc, #68]	; (8001b20 <SystemInit+0x5c>)
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SystemInit+0x60>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <SystemInit+0x5c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <SystemInit+0x5c>)
 8001ae6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <SystemInit+0x5c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SystemInit+0x5c>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <SystemInit+0x5c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <SystemInit+0x5c>)
 8001b02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b06:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SystemInit+0x5c>)
 8001b0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b0e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SystemInit+0x64>)
 8001b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b16:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	f8ff0000 	.word	0xf8ff0000
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART1_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b64:	f001 f8d6 	bl	8002d14 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f7ff fd52 	bl	8001616 <Error_Handler>
  }

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000110 	.word	0x20000110
 8001b7c:	40013800 	.word	0x40013800

08001b80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART3_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bb8:	f001 f8ac 	bl	8002d14 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f7ff fd28 	bl	8001616 <Error_Handler>
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000150 	.word	0x20000150
 8001bd0:	40004800 	.word	0x40004800

08001bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <HAL_UART_MspInit+0x120>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d132      	bne.n	8001c5a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a39      	ldr	r2, [pc, #228]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4830      	ldr	r0, [pc, #192]	; (8001cfc <HAL_UART_MspInit+0x128>)
 8001c3a:	f000 fa1d 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	482a      	ldr	r0, [pc, #168]	; (8001cfc <HAL_UART_MspInit+0x128>)
 8001c54:	f000 fa10 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c58:	e048      	b.n	8001cec <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_UART_MspInit+0x12c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d143      	bne.n	8001cec <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6e:	61d3      	str	r3, [r2, #28]
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_UART_MspInit+0x124>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4816      	ldr	r0, [pc, #88]	; (8001d04 <HAL_UART_MspInit+0x130>)
 8001caa:	f000 f9e5 	bl	8002078 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4810      	ldr	r0, [pc, #64]	; (8001d04 <HAL_UART_MspInit+0x130>)
 8001cc4:	f000 f9d8 	bl	8002078 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_UART_MspInit+0x134>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_UART_MspInit+0x134>)
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	6053      	str	r3, [r2, #4]
}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40004800 	.word	0x40004800
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40010000 	.word	0x40010000

08001d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d0e:	e003      	b.n	8001d18 <LoopCopyDataInit>

08001d10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d16:	3104      	adds	r1, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d18:	480a      	ldr	r0, [pc, #40]	; (8001d44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d20:	d3f6      	bcc.n	8001d10 <CopyDataInit>
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d24:	e002      	b.n	8001d2c <LoopFillZerobss>

08001d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d28:	f842 3b04 	str.w	r3, [r2], #4

08001d2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d30:	d3f9      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d32:	f7ff fec7 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f001 fbcf 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3a:	f7ff fbfd 	bl	8001538 <main>
  bx lr
 8001d3e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d40:	08003b64 	.word	0x08003b64
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d48:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8001d4c:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8001d50:	20000198 	.word	0x20000198

08001d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_2_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x28>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x28>)
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f943 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fdf6 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f95b 	bl	800205e <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	f000 f923 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000009c 	.word	0x2000009c
 8001ddc:	200000a4 	.word	0x200000a4
 8001de0:	200000a0 	.word	0x200000a0

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x1c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x20>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_IncTick+0x20>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	200000a4 	.word	0x200000a4
 8001e04:	20000194 	.word	0x20000194

08001e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <HAL_GetTick+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000194 	.word	0x20000194

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffe0 	bl	8001e08 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200000a4 	.word	0x200000a4

08001e64 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <NVIC_EnableIRQ+0x2c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da0b      	bge.n	8001f24 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <NVIC_SetPriority+0x4c>)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	3b04      	subs	r3, #4
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f22:	e009      	b.n	8001f38 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <NVIC_SetPriority+0x50>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd4:	f7ff ff90 	bl	8001ef8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff31 	bl	8001e64 <NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff46 	bl	8001eac <NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff90 	bl	8001f4c <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5f 	bl	8001ef8 <NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff39 	bl	8001ec8 <NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b08b      	sub	sp, #44	; 0x2c
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	e179      	b.n	8002390 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800209c:	2201      	movs	r2, #1
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8168 	bne.w	800238a <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a96      	ldr	r2, [pc, #600]	; (8002318 <HAL_GPIO_Init+0x2a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
 80020c4:	4a94      	ldr	r2, [pc, #592]	; (8002318 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d875      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 80020ca:	4a94      	ldr	r2, [pc, #592]	; (800231c <HAL_GPIO_Init+0x2a4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d058      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
 80020d0:	4a92      	ldr	r2, [pc, #584]	; (800231c <HAL_GPIO_Init+0x2a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d86f      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 80020d6:	4a92      	ldr	r2, [pc, #584]	; (8002320 <HAL_GPIO_Init+0x2a8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d052      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
 80020dc:	4a90      	ldr	r2, [pc, #576]	; (8002320 <HAL_GPIO_Init+0x2a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d869      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 80020e2:	4a90      	ldr	r2, [pc, #576]	; (8002324 <HAL_GPIO_Init+0x2ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04c      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
 80020e8:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <HAL_GPIO_Init+0x2ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d863      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 80020ee:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_GPIO_Init+0x2b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d046      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
 80020f4:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <HAL_GPIO_Init+0x2b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d85d      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d82a      	bhi.n	8002154 <HAL_GPIO_Init+0xdc>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d859      	bhi.n	80021b6 <HAL_GPIO_Init+0x13e>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_GPIO_Init+0x90>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002183 	.word	0x08002183
 800210c:	0800215d 	.word	0x0800215d
 8002110:	0800216f 	.word	0x0800216f
 8002114:	080021b1 	.word	0x080021b1
 8002118:	080021b7 	.word	0x080021b7
 800211c:	080021b7 	.word	0x080021b7
 8002120:	080021b7 	.word	0x080021b7
 8002124:	080021b7 	.word	0x080021b7
 8002128:	080021b7 	.word	0x080021b7
 800212c:	080021b7 	.word	0x080021b7
 8002130:	080021b7 	.word	0x080021b7
 8002134:	080021b7 	.word	0x080021b7
 8002138:	080021b7 	.word	0x080021b7
 800213c:	080021b7 	.word	0x080021b7
 8002140:	080021b7 	.word	0x080021b7
 8002144:	080021b7 	.word	0x080021b7
 8002148:	080021b7 	.word	0x080021b7
 800214c:	08002165 	.word	0x08002165
 8002150:	08002179 	.word	0x08002179
 8002154:	4a75      	ldr	r2, [pc, #468]	; (800232c <HAL_GPIO_Init+0x2b4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215a:	e02c      	b.n	80021b6 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e029      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	3304      	adds	r3, #4
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e024      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	3308      	adds	r3, #8
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e01f      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	330c      	adds	r3, #12
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e01a      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218a:	2304      	movs	r3, #4
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e013      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002198:	2308      	movs	r3, #8
 800219a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	611a      	str	r2, [r3, #16]
          break;
 80021a2:	e009      	b.n	80021b8 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	615a      	str	r2, [r3, #20]
          break;
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x140>
          break;
 80021b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	d801      	bhi.n	80021c2 <HAL_GPIO_Init+0x14a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_Init+0x14e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d802      	bhi.n	80021d4 <HAL_GPIO_Init+0x15c>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x162>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3b08      	subs	r3, #8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	210f      	movs	r1, #15
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80c1 	beq.w	800238a <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_GPIO_Init+0x2b8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002220:	4a44      	ldr	r2, [pc, #272]	; (8002334 <HAL_GPIO_Init+0x2bc>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <HAL_GPIO_Init+0x2c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d01f      	beq.n	800228c <HAL_GPIO_Init+0x214>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_GPIO_Init+0x2c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d019      	beq.n	8002288 <HAL_GPIO_Init+0x210>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <HAL_GPIO_Init+0x2c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x20c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <HAL_GPIO_Init+0x2cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x208>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a38      	ldr	r2, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x2d0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x204>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a37      	ldr	r2, [pc, #220]	; (800234c <HAL_GPIO_Init+0x2d4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x200>
 8002274:	2305      	movs	r3, #5
 8002276:	e00a      	b.n	800228e <HAL_GPIO_Init+0x216>
 8002278:	2306      	movs	r3, #6
 800227a:	e008      	b.n	800228e <HAL_GPIO_Init+0x216>
 800227c:	2304      	movs	r3, #4
 800227e:	e006      	b.n	800228e <HAL_GPIO_Init+0x216>
 8002280:	2303      	movs	r3, #3
 8002282:	e004      	b.n	800228e <HAL_GPIO_Init+0x216>
 8002284:	2302      	movs	r3, #2
 8002286:	e002      	b.n	800228e <HAL_GPIO_Init+0x216>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_GPIO_Init+0x216>
 800228c:	2300      	movs	r3, #0
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4093      	lsls	r3, r2
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800229e:	4925      	ldr	r1, [pc, #148]	; (8002334 <HAL_GPIO_Init+0x2bc>)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4924      	ldr	r1, [pc, #144]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4920      	ldr	r1, [pc, #128]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	491a      	ldr	r1, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d025      	beq.n	8002354 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	4910      	ldr	r1, [pc, #64]	; (8002350 <HAL_GPIO_Init+0x2d8>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
 8002314:	e025      	b.n	8002362 <HAL_GPIO_Init+0x2ea>
 8002316:	bf00      	nop
 8002318:	10320000 	.word	0x10320000
 800231c:	10310000 	.word	0x10310000
 8002320:	10220000 	.word	0x10220000
 8002324:	10210000 	.word	0x10210000
 8002328:	10120000 	.word	0x10120000
 800232c:	10110000 	.word	0x10110000
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	40010800 	.word	0x40010800
 800233c:	40010c00 	.word	0x40010c00
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	40011800 	.word	0x40011800
 800234c:	40011c00 	.word	0x40011c00
 8002350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	43db      	mvns	r3, r3
 800235c:	4911      	ldr	r1, [pc, #68]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 800235e:	4013      	ands	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	490c      	ldr	r1, [pc, #48]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
 800237a:	e006      	b.n	800238a <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002386:	4013      	ands	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae82 	bls.w	800209c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	372c      	adds	r7, #44	; 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e001      	b.n	80023ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]
 80023e2:	4613      	mov	r3, r2
 80023e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e6:	787b      	ldrb	r3, [r7, #1]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f2:	e003      	b.n	80023fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	041a      	lsls	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
	...

08002408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f806 	bl	8002438 <HAL_GPIO_EXTI_Callback>
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8087 	beq.w	8002574 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002466:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002472:	4b8f      	ldr	r3, [pc, #572]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x58>
 800247e:	4b8c      	ldr	r3, [pc, #560]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d06c      	beq.n	8002572 <HAL_RCC_OscConfig+0x126>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d168      	bne.n	8002572 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e22d      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x70>
 80024ae:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7f      	ldr	r2, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e02e      	b.n	800251a <HAL_RCC_OscConfig+0xce>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0x92>
 80024c4:	4b7a      	ldr	r3, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a79      	ldr	r2, [pc, #484]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b77      	ldr	r3, [pc, #476]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a76      	ldr	r2, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e01d      	b.n	800251a <HAL_RCC_OscConfig+0xce>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0xb6>
 80024e8:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a70      	ldr	r2, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6d      	ldr	r2, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0xce>
 8002502:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6a      	ldr	r2, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a67      	ldr	r2, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d013      	beq.n	800254a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff fc71 	bl	8001e08 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252a:	f7ff fc6d 	bl	8001e08 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1e1      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0xde>
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fc5d 	bl	8001e08 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002552:	f7ff fc59 	bl	8001e08 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1cd      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002564:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x106>
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d063      	beq.n	8002648 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d11c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x186>
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d116      	bne.n	80025d2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x170>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e1a1      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4939      	ldr	r1, [pc, #228]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d0:	e03a      	b.n	8002648 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x268>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fc12 	bl	8001e08 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff fc0e 	bl	8001e08 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e182      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4926      	ldr	r1, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
 800261a:	e015      	b.n	8002648 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x268>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff fbf1 	bl	8001e08 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7ff fbed 	bl	8001e08 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e161      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d039      	beq.n	80026c8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7ff fbd1 	bl	8001e08 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266a:	f7ff fbcd 	bl	8001e08 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e141      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_RCC_OscConfig+0x264>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002688:	2001      	movs	r0, #1
 800268a:	f000 fadf 	bl	8002c4c <RCC_Delay>
 800268e:	e01b      	b.n	80026c8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fbb7 	bl	8001e08 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e00e      	b.n	80026bc <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fbb3 	bl	8001e08 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d907      	bls.n	80026bc <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e127      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	42420000 	.word	0x42420000
 80026b8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b92      	ldr	r3, [pc, #584]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a6 	beq.w	8002822 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a87      	ldr	r2, [pc, #540]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	61d3      	str	r3, [r2, #28]
 80026f2:	4b85      	ldr	r3, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x4c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x4c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7e      	ldr	r2, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x4c0>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7ff fb75 	bl	8001e08 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7ff fb71 	bl	8001e08 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	; 0x64
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0e5      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b75      	ldr	r3, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x4c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x30a>
 8002748:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a6e      	ldr	r2, [pc, #440]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e02d      	b.n	80027b2 <HAL_RCC_OscConfig+0x366>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x32c>
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a69      	ldr	r2, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6213      	str	r3, [r2, #32]
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a66      	ldr	r2, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	e01c      	b.n	80027b2 <HAL_RCC_OscConfig+0x366>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b05      	cmp	r3, #5
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x34e>
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a60      	ldr	r2, [pc, #384]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6213      	str	r3, [r2, #32]
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0x366>
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a57      	ldr	r2, [pc, #348]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d015      	beq.n	80027e6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7ff fb25 	bl	8001e08 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7ff fb21 	bl	8001e08 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e093      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ee      	beq.n	80027c2 <HAL_RCC_OscConfig+0x376>
 80027e4:	e014      	b.n	8002810 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fb0f 	bl	8001e08 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7ff fb0b 	bl	8001e08 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e07d      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	4b40      	ldr	r3, [pc, #256]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ee      	bne.n	80027ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d069      	beq.n	80028fe <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d061      	beq.n	80028fa <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d146      	bne.n	80028cc <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fae0 	bl	8001e08 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7ff fadc 	bl	8001e08 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e050      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002872:	d108      	bne.n	8002886 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4921      	ldr	r1, [pc, #132]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a19      	ldr	r1, [r3, #32]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	430b      	orrs	r3, r1
 8002898:	491b      	ldr	r1, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fab0 	bl	8001e08 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7ff faac 	bl	8001e08 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e020      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x460>
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7ff fa99 	bl	8001e08 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff fa95 	bl	8001e08 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e009      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_OscConfig+0x4bc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x48e>
 80028f8:	e001      	b.n	80028fe <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	40007000 	.word	0x40007000
 8002910:	42420060 	.word	0x42420060

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002922:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d910      	bls.n	8002952 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002930:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 0207 	bic.w	r2, r3, #7
 8002938:	4978      	ldr	r1, [pc, #480]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0e0      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a6c      	ldr	r2, [pc, #432]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002970:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002974:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002988:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298e:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d06a      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d115      	bne.n	80029ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0a7      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e09b      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e093      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 0203 	bic.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4949      	ldr	r1, [pc, #292]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fe:	f7ff fa03 	bl	8001e08 <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d112      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0e:	f7ff f9fb 	bl	8001e08 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e077      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d1ee      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xfa>
 8002a30:	e027      	b.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d11d      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7ff f9e4 	bl	8001e08 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e060      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x128>
 8002a5e:	e010      	b.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7ff f9d2 	bl	8001e08 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e04e      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d210      	bcs.n	8002ab2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 0207 	bic.w	r2, r3, #7
 8002a98:	4920      	ldr	r1, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCC_ClockConfig+0x208>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e030      	b.n	8002b14 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4915      	ldr	r1, [pc, #84]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	490d      	ldr	r1, [pc, #52]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af0:	f000 f81c 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x20c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	4908      	ldr	r1, [pc, #32]	; (8002b24 <HAL_RCC_ClockConfig+0x210>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RCC_ClockConfig+0x214>)
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff f939 	bl	8001d84 <HAL_InitTick>
  
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08003b44 	.word	0x08003b44
 8002b28:	2000009c 	.word	0x2000009c

08002b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b490      	push	{r4, r7}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b34:	1d3c      	adds	r4, r7, #4
 8002b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b3c:	f240 2301 	movw	r3, #513	; 0x201
 8002b40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x40>
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x46>
 8002b6a:	e02b      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	e02b      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3328      	adds	r3, #40	; 0x28
 8002b7c:	443b      	add	r3, r7
 8002b7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d012      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0c5b      	lsrs	r3, r3, #17
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	3328      	adds	r3, #40	; 0x28
 8002b9a:	443b      	add	r3, r7
 8002b9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ba0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ba6:	fb03 f202 	mul.w	r2, r3, r2
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e004      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	623b      	str	r3, [r7, #32]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc6:	623b      	str	r3, [r7, #32]
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc90      	pop	{r4, r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	08003544 	.word	0x08003544
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	003d0900 	.word	0x003d0900

08002be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	2000009c 	.word	0x2000009c

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c00:	f7ff fff2 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08003b54 	.word	0x08003b54

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c28:	f7ff ffde 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0adb      	lsrs	r3, r3, #11
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4903      	ldr	r1, [pc, #12]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08003b54 	.word	0x08003b54

08002c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <RCC_Delay+0x38>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <RCC_Delay+0x3c>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0a5b      	lsrs	r3, r3, #9
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002c68:	bf00      	nop
}
 8002c6a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	60fa      	str	r2, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f8      	bne.n	8002c68 <RCC_Delay+0x1c>
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2000009c 	.word	0x2000009c
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e034      	b.n	8002d0c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7fe f87a 	bl	8000db0 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 fb12 	bl	80032f0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	f000 fb8a 	bl	80033f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6858      	ldr	r0, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	f000 fbb5 	bl	8003458 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	f041 0101 	orr.w	r1, r1, #1
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e03f      	b.n	8002da6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe ff4a 	bl	8001bd4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d56:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9b1 	bl	80030c0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d8c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af02      	add	r7, sp, #8
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	f040 8083 	bne.w	8002ed6 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Transmit+0x2e>
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e07b      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Transmit+0x40>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e074      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2221      	movs	r2, #33	; 0x21
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e04:	f7ff f800 	bl	8001e08 <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002e16:	e042      	b.n	8002e9e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d122      	bne.n	8002e76 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8f6 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e046      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	e017      	b.n	8002e9e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	e013      	b.n	8002e9e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f8d3 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e023      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	60ba      	str	r2, [r7, #8]
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1b7      	bne.n	8002e18 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2140      	movs	r1, #64	; 0x40
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8ba 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00a      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 8090 	bne.w	8003022 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_UART_Receive+0x2e>
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e088      	b.n	8003024 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Receive+0x40>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e081      	b.n	8003024 <HAL_UART_Receive+0x144>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2222      	movs	r2, #34	; 0x22
 8002f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f36:	f7fe ff67 	bl	8001e08 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8002f48:	e05c      	b.n	8003004 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d12b      	bne.n	8002fba <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f85d 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e053      	b.n	8003024 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10c      	bne.n	8002fa2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e030      	b.n	8003004 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	e024      	b.n	8003004 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f831 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e027      	b.n	8003024 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	60ba      	str	r2, [r7, #8]
 8002fe8:	b2ca      	uxtb	r2, r1
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e00a      	b.n	8003004 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d19d      	bne.n	8002f4a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800303c:	e02c      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d028      	beq.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0x30>
 800304c:	f7fe fedc 	bl	8001e08 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d21d      	bcs.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800306a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e00f      	b.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d0c3      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003102:	f023 030c 	bic.w	r3, r3, #12
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	430b      	orrs	r3, r1
 800310e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6f      	ldr	r2, [pc, #444]	; (80032e8 <UART_SetConfig+0x228>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d16b      	bne.n	8003208 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003130:	f7ff fd78 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8003134:	4602      	mov	r2, r0
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009a      	lsls	r2, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4a68      	ldr	r2, [pc, #416]	; (80032ec <UART_SetConfig+0x22c>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	011c      	lsls	r4, r3, #4
 8003154:	f7ff fd66 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8003158:	4602      	mov	r2, r0
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	fbb2 f5f3 	udiv	r5, r2, r3
 800316e:	f7ff fd59 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8003172:	4602      	mov	r2, r0
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <UART_SetConfig+0x22c>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2264      	movs	r2, #100	; 0x64
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	1aeb      	subs	r3, r5, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a53      	ldr	r2, [pc, #332]	; (80032ec <UART_SetConfig+0x22c>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a8:	441c      	add	r4, r3
 80031aa:	f7ff fd3b 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80031c4:	f7ff fd2e 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4a43      	ldr	r2, [pc, #268]	; (80032ec <UART_SetConfig+0x22c>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2264      	movs	r2, #100	; 0x64
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	1aeb      	subs	r3, r5, r3
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <UART_SetConfig+0x22c>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4422      	add	r2, r4
 8003204:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003206:	e06a      	b.n	80032de <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003208:	f7ff fcf8 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800320c:	4602      	mov	r2, r0
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4a32      	ldr	r2, [pc, #200]	; (80032ec <UART_SetConfig+0x22c>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	011c      	lsls	r4, r3, #4
 800322c:	f7ff fce6 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003230:	4602      	mov	r2, r0
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009a      	lsls	r2, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	fbb2 f5f3 	udiv	r5, r2, r3
 8003246:	f7ff fcd9 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800324a:	4602      	mov	r2, r0
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <UART_SetConfig+0x22c>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2264      	movs	r2, #100	; 0x64
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	1aeb      	subs	r3, r5, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <UART_SetConfig+0x22c>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	441c      	add	r4, r3
 8003282:	f7ff fcbb 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8003286:	4602      	mov	r2, r0
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f5f3 	udiv	r5, r2, r3
 800329c:	f7ff fcae 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009a      	lsls	r2, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <UART_SetConfig+0x22c>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2264      	movs	r2, #100	; 0x64
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	1aeb      	subs	r3, r5, r3
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <UART_SetConfig+0x22c>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4422      	add	r2, r4
 80032dc:	609a      	str	r2, [r3, #8]
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40013800 	.word	0x40013800
 80032ec:	51eb851f 	.word	0x51eb851f

080032f0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	f023 0101 	bic.w	r1, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d132      	bne.n	8003380 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <FSMC_NORSRAM_Init+0xfc>)
 8003326:	4013      	ands	r3, r2
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6851      	ldr	r1, [r2, #4]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	4311      	orrs	r1, r2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	4311      	orrs	r1, r2
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	4311      	orrs	r1, r2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	6952      	ldr	r2, [r2, #20]
 8003342:	4311      	orrs	r1, r2
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	6992      	ldr	r2, [r2, #24]
 8003348:	4311      	orrs	r1, r2
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	69d2      	ldr	r2, [r2, #28]
 800334e:	4311      	orrs	r1, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	6a12      	ldr	r2, [r2, #32]
 8003354:	4311      	orrs	r1, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335a:	4311      	orrs	r1, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003360:	4311      	orrs	r1, r2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003366:	4311      	orrs	r1, r2
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800336c:	430a      	orrs	r2, r1
 800336e:	4313      	orrs	r3, r2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800337e:	e02f      	b.n	80033e0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <FSMC_NORSRAM_Init+0xfc>)
 800338c:	4013      	ands	r3, r2
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6851      	ldr	r1, [r2, #4]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	4311      	orrs	r1, r2
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	68d2      	ldr	r2, [r2, #12]
 800339c:	4311      	orrs	r1, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6912      	ldr	r2, [r2, #16]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	6952      	ldr	r2, [r2, #20]
 80033a8:	4311      	orrs	r1, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6992      	ldr	r2, [r2, #24]
 80033ae:	4311      	orrs	r1, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	69d2      	ldr	r2, [r2, #28]
 80033b4:	4311      	orrs	r1, r2
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	6a12      	ldr	r2, [r2, #32]
 80033ba:	4311      	orrs	r1, r2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c0:	4311      	orrs	r1, r2
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033c6:	4311      	orrs	r1, r2
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033cc:	4311      	orrs	r1, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033d2:	4311      	orrs	r1, r2
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4319      	orrs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	fff70081 	.word	0xfff70081

080033f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003406:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	431a      	orrs	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	431a      	orrs	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	3b01      	subs	r3, #1
 800342c:	051b      	lsls	r3, r3, #20
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	3b02      	subs	r3, #2
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	431a      	orrs	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	3201      	adds	r2, #1
 8003444:	4319      	orrs	r1, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346c:	d11d      	bne.n	80034aa <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003478:	4013      	ands	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	6852      	ldr	r2, [r2, #4]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	4311      	orrs	r1, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	0212      	lsls	r2, r2, #8
 800348c:	4311      	orrs	r1, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	6992      	ldr	r2, [r2, #24]
 8003492:	4311      	orrs	r1, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	68d2      	ldr	r2, [r2, #12]
 8003498:	0412      	lsls	r2, r2, #16
 800349a:	430a      	orrs	r2, r1
 800349c:	ea43 0102 	orr.w	r1, r3, r2
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034a8:	e005      	b.n	80034b6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80034b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	cff00000 	.word	0xcff00000

080034c8 <memset>:
 80034c8:	4603      	mov	r3, r0
 80034ca:	4402      	add	r2, r0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	f803 1b01 	strb.w	r1, [r3], #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	2600      	movs	r6, #0
 80034dc:	4d0c      	ldr	r5, [pc, #48]	; (8003510 <__libc_init_array+0x38>)
 80034de:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	f000 f81a 	bl	8003520 <_init>
 80034ec:	2600      	movs	r6, #0
 80034ee:	4d0a      	ldr	r5, [pc, #40]	; (8003518 <__libc_init_array+0x40>)
 80034f0:	4c0a      	ldr	r4, [pc, #40]	; (800351c <__libc_init_array+0x44>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003b5c 	.word	0x08003b5c
 8003514:	08003b5c 	.word	0x08003b5c
 8003518:	08003b5c 	.word	0x08003b5c
 800351c:	08003b60 	.word	0x08003b60

08003520 <_init>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr

0800352c <_fini>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr
