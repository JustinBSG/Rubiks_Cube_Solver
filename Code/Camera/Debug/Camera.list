
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08003b9c  08003b9c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b9c  08003b9c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200000a8  08003c4c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003c4c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009223  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e2  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000764  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184b9  00000000  00000000  0002cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dea2  00000000  00000000  0004514d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a805  00000000  00000000  00052fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002620  00000000  00000000  000cd7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000cfe14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	00000000 	.word	0x00000000
 8000204:	08003554 	.word	0x08003554

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000ac 	.word	0x200000ac
 8000220:	08003554 	.word	0x08003554

08000224 <writeDataIntoAllFaces>:
#include "main.h"
#include "lcd.h"

extern uint8_t Ov7725_vsync;

void writeDataIntoAllFaces(char* AllFaces, char* OneFace, int num) {
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	for (int i=0; i<9; ++i) {
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e010      	b.n	8000258 <writeDataIntoAllFaces+0x34>
		AllFaces[num*9+i] = OneFace[i];
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	18d1      	adds	r1, r2, r3
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4613      	mov	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	441a      	add	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	4413      	add	r3, r2
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4413      	add	r3, r2
 800024e:	780a      	ldrb	r2, [r1, #0]
 8000250:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<9; ++i) {
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	3301      	adds	r3, #1
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2b08      	cmp	r3, #8
 800025c:	ddeb      	ble.n	8000236 <writeDataIntoAllFaces+0x12>
	}
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	371c      	adds	r7, #28
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr

0800026a <convertColor2RGB>:

void printArray(char* Array) {
	LCD_DrawString(10, 260, Array);
}

uint16_t convertColor2RGB(char Color) { // need change
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	4603      	mov	r3, r0
 8000272:	71fb      	strb	r3, [r7, #7]
	if (Color == 'W') {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b57      	cmp	r3, #87	; 0x57
 8000278:	d102      	bne.n	8000280 <convertColor2RGB+0x16>
		return WHITE;
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	e01e      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'O') {
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b4f      	cmp	r3, #79	; 0x4f
 8000284:	d102      	bne.n	800028c <convertColor2RGB+0x22>
		return ORANGE;
 8000286:	f64f 4360 	movw	r3, #64608	; 0xfc60
 800028a:	e018      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'G') {
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b47      	cmp	r3, #71	; 0x47
 8000290:	d102      	bne.n	8000298 <convertColor2RGB+0x2e>
		return GREEN;
 8000292:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000296:	e012      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'Y') {
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b59      	cmp	r3, #89	; 0x59
 800029c:	d102      	bne.n	80002a4 <convertColor2RGB+0x3a>
		return YELLOW;
 800029e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002a2:	e00c      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'B') {
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b42      	cmp	r3, #66	; 0x42
 80002a8:	d101      	bne.n	80002ae <convertColor2RGB+0x44>
		return BLUE;
 80002aa:	231f      	movs	r3, #31
 80002ac:	e007      	b.n	80002be <convertColor2RGB+0x54>
	}
	if (Color == 'R') {
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b52      	cmp	r3, #82	; 0x52
 80002b2:	d102      	bne.n	80002ba <convertColor2RGB+0x50>
		return RED;
 80002b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80002b8:	e001      	b.n	80002be <convertColor2RGB+0x54>
	}
	return CYAN; // a color to indicate wrong color
 80002ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <stringCompare>:

int stringCompare(char* target, char* src, int size) {
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	for (int i=0; i<size; ++i) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00e      	b.n	80002f8 <stringCompare+0x30>
		if (target[i] != src[i]) {
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	440b      	add	r3, r1
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d001      	beq.n	80002f2 <stringCompare+0x2a>
			return 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e007      	b.n	8000302 <stringCompare+0x3a>
	for (int i=0; i<size; ++i) {
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbec      	blt.n	80002da <stringCompare+0x12>
		}
	}
	return 0;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	371c      	adds	r7, #28
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <printFace>:
////		}
////	}
//	return;
//}

void printFace(char* SquareOfOneFace) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af02      	add	r7, sp, #8
 8000312:	6078      	str	r0, [r7, #4]
	LCD_Clear(10, 10, 220, 220, BLACK);
 8000314:	2300      	movs	r3, #0
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	23dc      	movs	r3, #220	; 0xdc
 800031a:	22dc      	movs	r2, #220	; 0xdc
 800031c:	210a      	movs	r1, #10
 800031e:	200a      	movs	r0, #10
 8000320:	f001 f885 	bl	800142e <LCD_Clear>
	for (int row=0; row<3; ++row) {
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	e031      	b.n	800038e <printFace+0x82>
		for (int col=0; col<3; ++col) {
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
 800032e:	e028      	b.n	8000382 <printFace+0x76>
			int num = row*3+col;
 8000330:	69fa      	ldr	r2, [r7, #28]
 8000332:	4613      	mov	r3, r2
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	4413      	add	r3, r2
 8000338:	69ba      	ldr	r2, [r7, #24]
 800033a:	4413      	add	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
			uint16_t RGB = convertColor2RGB(SquareOfOneFace[num]);
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff8f 	bl	800026a <convertColor2RGB>
 800034c:	4603      	mov	r3, r0
 800034e:	827b      	strh	r3, [r7, #18]
			int x = (SQUARE_SIZE+10)*col+FIRST_ROW_COL;
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	2246      	movs	r2, #70	; 0x46
 8000354:	fb02 f303 	mul.w	r3, r2, r3
 8000358:	3314      	adds	r3, #20
 800035a:	60fb      	str	r3, [r7, #12]
			int y = (SQUARE_SIZE+10)*row+FIRST_ROW_COL;
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	2246      	movs	r2, #70	; 0x46
 8000360:	fb02 f303 	mul.w	r3, r2, r3
 8000364:	3314      	adds	r3, #20
 8000366:	60bb      	str	r3, [r7, #8]
			LCD_Clear(x, y, SQUARE_SIZE, SQUARE_SIZE, RGB);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	b298      	uxth	r0, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	b299      	uxth	r1, r3
 8000370:	8a7b      	ldrh	r3, [r7, #18]
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	233c      	movs	r3, #60	; 0x3c
 8000376:	223c      	movs	r2, #60	; 0x3c
 8000378:	f001 f859 	bl	800142e <LCD_Clear>
		for (int col=0; col<3; ++col) {
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	3301      	adds	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	2b02      	cmp	r3, #2
 8000386:	ddd3      	ble.n	8000330 <printFace+0x24>
	for (int row=0; row<3; ++row) {
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	2b02      	cmp	r3, #2
 8000392:	ddca      	ble.n	800032a <printFace+0x1e>
		}
	}
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	3720      	adds	r7, #32
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 80003aa:	2300      	movs	r3, #0
 80003ac:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	2012      	movs	r0, #18
 80003b2:	f000 fbe5 	bl	8000b80 <SCCB_WriteByte>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <Ov7725_Init+0x20>
	{
		return ERROR ;
 80003bc:	2300      	movs	r3, #0
 80003be:	e030      	b.n	8000422 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 80003c0:	1d7b      	adds	r3, r7, #5
 80003c2:	220b      	movs	r2, #11
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fc09 	bl	8000bde <SCCB_ReadByte>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d101      	bne.n	80003d6 <Ov7725_Init+0x36>
	{
		return ERROR;
 80003d2:	2300      	movs	r3, #0
 80003d4:	e025      	b.n	8000422 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	2b21      	cmp	r3, #33	; 0x21
 80003da:	d11f      	bne.n	800041c <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 80003dc:	2300      	movs	r3, #0
 80003de:	80fb      	strh	r3, [r7, #6]
 80003e0:	e015      	b.n	800040e <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 80003e2:	88fb      	ldrh	r3, [r7, #6]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <Ov7725_Init+0x8c>)
 80003e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	88fb      	ldrh	r3, [r7, #6]
 80003ee:	490f      	ldr	r1, [pc, #60]	; (800042c <Ov7725_Init+0x8c>)
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	440b      	add	r3, r1
 80003f4:	785b      	ldrb	r3, [r3, #1]
 80003f6:	4619      	mov	r1, r3
 80003f8:	4610      	mov	r0, r2
 80003fa:	f000 fbc1 	bl	8000b80 <SCCB_WriteByte>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000404:	2300      	movs	r3, #0
 8000406:	e00c      	b.n	8000422 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000408:	88fb      	ldrh	r3, [r7, #6]
 800040a:	3301      	adds	r3, #1
 800040c:	80fb      	strh	r3, [r7, #6]
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <Ov7725_Init+0x90>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	88fa      	ldrh	r2, [r7, #6]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3e3      	bcc.n	80003e2 <Ov7725_Init+0x42>
 800041a:	e001      	b.n	8000420 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 800041c:	2300      	movs	r3, #0
 800041e:	e000      	b.n	8000422 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000420:	2301      	movs	r3, #1
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	2000009a 	.word	0x2000009a

08000434 <initArray>:
		}
	}
	HAL_Delay(1000);
}

void initArray(int* Array, int size) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	for (int i=0; i<size; ++i) {
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e008      	b.n	8000456 <initArray+0x22>
		Array[i] = 0;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<size; ++i) {
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	429a      	cmp	r2, r3
 800045c:	dbf2      	blt.n	8000444 <initArray+0x10>
	}
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <detect>:

int detect(uint16_t i, uint16_t j) {
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	4603      	mov	r3, r0
 8000472:	460a      	mov	r2, r1
 8000474:	80fb      	strh	r3, [r7, #6]
 8000476:	4613      	mov	r3, r2
 8000478:	80bb      	strh	r3, [r7, #4]
	if ((abs(FACE_ONE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_ONE_Y - j)<=SAMPLE_SIZE/2)) {
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000480:	f113 0f04 	cmn.w	r3, #4
 8000484:	db11      	blt.n	80004aa <detect+0x40>
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800048c:	2b04      	cmp	r3, #4
 800048e:	dc0c      	bgt.n	80004aa <detect+0x40>
 8000490:	88bb      	ldrh	r3, [r7, #4]
 8000492:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8000496:	f113 0f04 	cmn.w	r3, #4
 800049a:	db06      	blt.n	80004aa <detect+0x40>
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	dc01      	bgt.n	80004aa <detect+0x40>
		return 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e0c0      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_TWO_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_TWO_Y - j)<=SAMPLE_SIZE/2)) {
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 80004b0:	f113 0f04 	cmn.w	r3, #4
 80004b4:	db11      	blt.n	80004da <detect+0x70>
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 80004bc:	2b04      	cmp	r3, #4
 80004be:	dc0c      	bgt.n	80004da <detect+0x70>
 80004c0:	88bb      	ldrh	r3, [r7, #4]
 80004c2:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 80004c6:	f113 0f04 	cmn.w	r3, #4
 80004ca:	db06      	blt.n	80004da <detect+0x70>
 80004cc:	88bb      	ldrh	r3, [r7, #4]
 80004ce:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	dc01      	bgt.n	80004da <detect+0x70>
		return 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e0a8      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_THREE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_THREE_Y - j)<=SAMPLE_SIZE/2)) {
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 80004e0:	f113 0f04 	cmn.w	r3, #4
 80004e4:	db11      	blt.n	800050a <detect+0xa0>
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	dc0c      	bgt.n	800050a <detect+0xa0>
 80004f0:	88bb      	ldrh	r3, [r7, #4]
 80004f2:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80004f6:	f113 0f04 	cmn.w	r3, #4
 80004fa:	db06      	blt.n	800050a <detect+0xa0>
 80004fc:	88bb      	ldrh	r3, [r7, #4]
 80004fe:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000502:	2b04      	cmp	r3, #4
 8000504:	dc01      	bgt.n	800050a <detect+0xa0>
		return 2;
 8000506:	2302      	movs	r3, #2
 8000508:	e090      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_FOUR_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_FOUR_Y - j)<=SAMPLE_SIZE/2)) {
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 8000510:	f113 0f04 	cmn.w	r3, #4
 8000514:	db11      	blt.n	800053a <detect+0xd0>
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 800051c:	2b04      	cmp	r3, #4
 800051e:	dc0c      	bgt.n	800053a <detect+0xd0>
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 8000526:	f113 0f04 	cmn.w	r3, #4
 800052a:	db06      	blt.n	800053a <detect+0xd0>
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	f1c3 0385 	rsb	r3, r3, #133	; 0x85
 8000532:	2b04      	cmp	r3, #4
 8000534:	dc01      	bgt.n	800053a <detect+0xd0>
		return 3;
 8000536:	2303      	movs	r3, #3
 8000538:	e078      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_FIVE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_FIVE_Y - j)<=SAMPLE_SIZE/2)) {
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000540:	f113 0f04 	cmn.w	r3, #4
 8000544:	db11      	blt.n	800056a <detect+0x100>
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800054c:	2b04      	cmp	r3, #4
 800054e:	dc0c      	bgt.n	800056a <detect+0x100>
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000556:	f113 0f04 	cmn.w	r3, #4
 800055a:	db06      	blt.n	800056a <detect+0x100>
 800055c:	88bb      	ldrh	r3, [r7, #4]
 800055e:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000562:	2b04      	cmp	r3, #4
 8000564:	dc01      	bgt.n	800056a <detect+0x100>
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e060      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_SIX_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_SIX_Y - j)<=SAMPLE_SIZE/2)) {
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000570:	f113 0f04 	cmn.w	r3, #4
 8000574:	db11      	blt.n	800059a <detect+0x130>
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 800057c:	2b04      	cmp	r3, #4
 800057e:	dc0c      	bgt.n	800059a <detect+0x130>
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 8000586:	f113 0f04 	cmn.w	r3, #4
 800058a:	db06      	blt.n	800059a <detect+0x130>
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 8000592:	2b04      	cmp	r3, #4
 8000594:	dc01      	bgt.n	800059a <detect+0x130>
		return 5;
 8000596:	2305      	movs	r3, #5
 8000598:	e048      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_SEVEN_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_SEVEN_Y - j)<=SAMPLE_SIZE/2)) {
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f1c3 03c0 	rsb	r3, r3, #192	; 0xc0
 80005a0:	f113 0f04 	cmn.w	r3, #4
 80005a4:	db11      	blt.n	80005ca <detect+0x160>
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f1c3 03c0 	rsb	r3, r3, #192	; 0xc0
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	dc0c      	bgt.n	80005ca <detect+0x160>
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80005b6:	f113 0f04 	cmn.w	r3, #4
 80005ba:	db06      	blt.n	80005ca <detect+0x160>
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	dc01      	bgt.n	80005ca <detect+0x160>
		return 6;
 80005c6:	2306      	movs	r3, #6
 80005c8:	e030      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_EIGHT_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_EIGHT_Y - j)<=SAMPLE_SIZE/2)) {
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 80005d0:	f113 0f04 	cmn.w	r3, #4
 80005d4:	db11      	blt.n	80005fa <detect+0x190>
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f1c3 0397 	rsb	r3, r3, #151	; 0x97
 80005dc:	2b04      	cmp	r3, #4
 80005de:	dc0c      	bgt.n	80005fa <detect+0x190>
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80005e6:	f113 0f04 	cmn.w	r3, #4
 80005ea:	db06      	blt.n	80005fa <detect+0x190>
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	f1c3 03b9 	rsb	r3, r3, #185	; 0xb9
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	dc01      	bgt.n	80005fa <detect+0x190>
		return 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	e018      	b.n	800062c <detect+0x1c2>
	}
	if ((abs(FACE_NINE_X - i)<=SAMPLE_SIZE/2) && (abs(FACE_NINE_Y - j)<=SAMPLE_SIZE/2)) {
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000600:	f113 0f04 	cmn.w	r3, #4
 8000604:	db11      	blt.n	800062a <detect+0x1c0>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800060c:	2b04      	cmp	r3, #4
 800060e:	dc0c      	bgt.n	800062a <detect+0x1c0>
 8000610:	88bb      	ldrh	r3, [r7, #4]
 8000612:	f1c3 03d3 	rsb	r3, r3, #211	; 0xd3
 8000616:	f113 0f04 	cmn.w	r3, #4
 800061a:	db06      	blt.n	800062a <detect+0x1c0>
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	f1c3 03d3 	rsb	r3, r3, #211	; 0xd3
 8000622:	2b04      	cmp	r3, #4
 8000624:	dc01      	bgt.n	800062a <detect+0x1c0>
		return 8;
 8000626:	2308      	movs	r3, #8
 8000628:	e000      	b.n	800062c <detect+0x1c2>
	}
	return 9;
 800062a:	2309      	movs	r3, #9
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <int2RGB>:

void int2RGB(uint16_t RGB, int* R, int* G, int* B) {
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4603      	mov	r3, r0
 8000644:	81fb      	strh	r3, [r7, #14]
	*R = (RGB & 31 << 11) >> 11;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	0adb      	lsrs	r3, r3, #11
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	601a      	str	r2, [r3, #0]
	*G = (RGB & 63 << 5) >> 5;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	115b      	asrs	r3, r3, #5
 8000656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
	*B = RGB & 31;
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <sumRGB>:
			printRGB(R[num], G[num], B[num], row, col);
		}
	}
}

void sumRGB(int Camera_Data, int* R_Sum, int* G_Sum, int* B_Sum) {
 8000672:	b580      	push	{r7, lr}
 8000674:	b088      	sub	sp, #32
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	603b      	str	r3, [r7, #0]
	int R, G, B;
	int2RGB(Camera_Data, &R, &G, &B);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b298      	uxth	r0, r3
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	f107 0218 	add.w	r2, r7, #24
 800068c:	f107 011c 	add.w	r1, r7, #28
 8000690:	f7ff ffd1 	bl	8000636 <int2RGB>
	*R_Sum += R;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	441a      	add	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	601a      	str	r2, [r3, #0]
	*G_Sum += G;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	441a      	add	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
	*B_Sum += B;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	441a      	add	r2, r3
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <averageRGB>:

void averageRGB(int sum, int size, int* average) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	*average = sum/size;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <detect_sum>:
// detect which square and sum the RGB value
void detect_sum(uint16_t i, uint16_t j, uint16_t Camera_Data, int* R, int* G, int* B) {
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b087      	sub	sp, #28
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4603      	mov	r3, r0
 80006ec:	81fb      	strh	r3, [r7, #14]
 80006ee:	460b      	mov	r3, r1
 80006f0:	81bb      	strh	r3, [r7, #12]
 80006f2:	4613      	mov	r3, r2
 80006f4:	817b      	strh	r3, [r7, #10]
	int num = detect(i, j);
 80006f6:	89ba      	ldrh	r2, [r7, #12]
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff feb4 	bl	800046a <detect>
 8000702:	6178      	str	r0, [r7, #20]
	if (num != 9) {
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2b09      	cmp	r3, #9
 8000708:	d00f      	beq.n	800072a <detect_sum+0x48>
		sumRGB(Camera_Data, &(R[num]), &(G[num]), &(B[num]));
 800070a:	8978      	ldrh	r0, [r7, #10]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	18d1      	adds	r1, r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071a:	18d4      	adds	r4, r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000722:	4413      	add	r3, r2
 8000724:	4622      	mov	r2, r4
 8000726:	f7ff ffa4 	bl	8000672 <sumRGB>
	}
}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd90      	pop	{r4, r7, pc}

08000732 <writeColorIntoArray>:
// write the color into the return array
void writeColorIntoArray(int* R, int* G, int* B, char* SquareOfOneFace) {
 8000732:	b480      	push	{r7}
 8000734:	b087      	sub	sp, #28
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	603b      	str	r3, [r7, #0]
	// content the same with printColor()
	for (int num=0; num<9; num++) {
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e048      	b.n	80007d8 <writeColorIntoArray+0xa6>
//						SquareOfOneFace[num] = 'O';
//					}
//				}
//			}
//		}
		if (B[num] <= 10) {
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b0a      	cmp	r3, #10
 8000752:	dc1f      	bgt.n	8000794 <writeColorIntoArray+0x62>
			if (R[num] < 5){
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b04      	cmp	r3, #4
 8000760:	dc05      	bgt.n	800076e <writeColorIntoArray+0x3c>
				SquareOfOneFace[num] = 'G';
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	4413      	add	r3, r2
 8000768:	2247      	movs	r2, #71	; 0x47
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e031      	b.n	80007d2 <writeColorIntoArray+0xa0>
			} else {
				if (G[num] < 10) {
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b09      	cmp	r3, #9
 800077a:	dc05      	bgt.n	8000788 <writeColorIntoArray+0x56>
					SquareOfOneFace[num] = 'R';
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	4413      	add	r3, r2
 8000782:	2252      	movs	r2, #82	; 0x52
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e024      	b.n	80007d2 <writeColorIntoArray+0xa0>
				} else {
					SquareOfOneFace[num] = 'O';
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	224f      	movs	r2, #79	; 0x4f
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e01e      	b.n	80007d2 <writeColorIntoArray+0xa0>
				}
			}
		} else {
			if (R[num] < 5) {
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b04      	cmp	r3, #4
 80007a0:	dc05      	bgt.n	80007ae <writeColorIntoArray+0x7c>
				SquareOfOneFace[num] = 'B';
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	2242      	movs	r2, #66	; 0x42
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	e011      	b.n	80007d2 <writeColorIntoArray+0xa0>
			} else {
				if (B[num] > 20) {
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b14      	cmp	r3, #20
 80007ba:	dd05      	ble.n	80007c8 <writeColorIntoArray+0x96>
					SquareOfOneFace[num] = 'W';
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	2257      	movs	r2, #87	; 0x57
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e004      	b.n	80007d2 <writeColorIntoArray+0xa0>
				} else {
					SquareOfOneFace[num] = 'Y';
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	2259      	movs	r2, #89	; 0x59
 80007d0:	701a      	strb	r2, [r3, #0]
	for (int num=0; num<9; num++) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	ddb3      	ble.n	8000746 <writeColorIntoArray+0x14>
				}
			}
		}
	}
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
	...

080007ec <ReadSquare>:

// main system will make use of this function to scan one face
void ReadSquare(char* SquareOfOneFace) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0a3      	sub	sp, #140	; 0x8c
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t Camera_Data;
	int R[9];
	int G[9];
	int B[9];
	initArray(R, 9);
 80007f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f8:	2109      	movs	r1, #9
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe1a 	bl	8000434 <initArray>
	initArray(G, 9);
 8000800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000804:	2109      	movs	r1, #9
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe14 	bl	8000434 <initArray>
	initArray(B, 9);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2109      	movs	r1, #9
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fe0e 	bl	8000434 <initArray>

	// LCD_Cam_Gram();

	for(i = 0; i < 240; i++)
 8000818:	2300      	movs	r3, #0
 800081a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800081e:	e043      	b.n	80008a8 <ReadSquare+0xbc>
	{
		for(j = 0; j < 320; j++)
 8000820:	2300      	movs	r3, #0
 8000822:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8000826:	e035      	b.n	8000894 <ReadSquare+0xa8>
		{
			READ_FIFO_PIXEL(Camera_Data);
 8000828:	2300      	movs	r3, #0
 800082a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800082e:	4b47      	ldr	r3, [pc, #284]	; (800094c <ReadSquare+0x160>)
 8000830:	2220      	movs	r2, #32
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <ReadSquare+0x164>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800083e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <ReadSquare+0x160>)
 8000844:	2220      	movs	r2, #32
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	4b40      	ldr	r3, [pc, #256]	; (800094c <ReadSquare+0x160>)
 800084a:	2220      	movs	r2, #32
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <ReadSquare+0x164>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b29a      	uxth	r2, r3
 8000858:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800085c:	4313      	orrs	r3, r2
 800085e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <ReadSquare+0x160>)
 8000864:	2220      	movs	r2, #32
 8000866:	611a      	str	r2, [r3, #16]
			detect_sum(i, j, Camera_Data, R, G, B);
 8000868:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800086c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8000870:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8000874:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4623      	mov	r3, r4
 8000886:	f7ff ff2c 	bl	80006e2 <detect_sum>
		for(j = 0; j < 320; j++)
 800088a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800088e:	3301      	adds	r3, #1
 8000890:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8000894:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000898:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800089c:	d3c4      	bcc.n	8000828 <ReadSquare+0x3c>
	for(i = 0; i < 240; i++)
 800089e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008a2:	3301      	adds	r3, #1
 80008a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80008a8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008ac:	2bef      	cmp	r3, #239	; 0xef
 80008ae:	d9b7      	bls.n	8000820 <ReadSquare+0x34>
		}
	}
	for (i=0; i<9; ++i) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80008b6:	e037      	b.n	8000928 <ReadSquare+0x13c>
		averageRGB(R[i], SAMPLE_SIZE*SAMPLE_SIZE, &(R[i]));
 80008b8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	3380      	adds	r3, #128	; 0x80
 80008c0:	443b      	add	r3, r7
 80008c2:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 80008c6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	461a      	mov	r2, r3
 80008d4:	2151      	movs	r1, #81	; 0x51
 80008d6:	f7ff fef3 	bl	80006c0 <averageRGB>
		averageRGB(G[i], SAMPLE_SIZE*SAMPLE_SIZE, &(G[i]));
 80008da:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	3380      	adds	r3, #128	; 0x80
 80008e2:	443b      	add	r3, r7
 80008e4:	f853 0c50 	ldr.w	r0, [r3, #-80]
 80008e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	2151      	movs	r1, #81	; 0x51
 80008f8:	f7ff fee2 	bl	80006c0 <averageRGB>
		averageRGB(B[i], SAMPLE_SIZE*SAMPLE_SIZE, &(B[i]));
 80008fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	3380      	adds	r3, #128	; 0x80
 8000904:	443b      	add	r3, r7
 8000906:	f853 0c74 	ldr.w	r0, [r3, #-116]
 800090a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	461a      	mov	r2, r3
 8000918:	2151      	movs	r1, #81	; 0x51
 800091a:	f7ff fed1 	bl	80006c0 <averageRGB>
	for (i=0; i<9; ++i) {
 800091e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000922:	3301      	adds	r3, #1
 8000924:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8000928:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800092c:	2b08      	cmp	r3, #8
 800092e:	d9c3      	bls.n	80008b8 <ReadSquare+0xcc>
	}
	// printColorRGB(R, G, B);
	writeColorIntoArray(R, G, B, SquareOfOneFace);
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000938:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f7ff fef8 	bl	8000732 <writeColorIntoArray>
	// printArray(SquareOfOneFace);
	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	// HAL_Delay(1000);
}
 8000942:	bf00      	nop
 8000944:	3784      	adds	r7, #132	; 0x84
 8000946:	46bd      	mov	sp, r7
 8000948:	bd90      	pop	{r4, r7, pc}
 800094a:	bf00      	nop
 800094c:	40011000 	.word	0x40011000
 8000950:	40010c00 	.word	0x40010c00

08000954 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 800095a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800095e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000960:	e002      	b.n	8000968 <SCCB_delay+0x14>
   { 
     i--; 
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	3b01      	subs	r3, #1
 8000966:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f9      	bne.n	8000962 <SCCB_delay+0xe>
   } 
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <SCCB_Start>:


static int SCCB_Start(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	SDA_H;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <SCCB_Start+0x54>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <SCCB_Start+0x54>)
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800098c:	f7ff ffe2 	bl	8000954 <SCCB_delay>
	if(!SDA_read)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <SCCB_Start+0x54>)
 8000994:	f001 fd22 	bl	80023dc <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <SCCB_Start+0x26>
	return DISABLE;	
 800099e:	2300      	movs	r3, #0
 80009a0:	e013      	b.n	80009ca <SCCB_Start+0x4e>
	SDA_L;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <SCCB_Start+0x54>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009a8:	f7ff ffd4 	bl	8000954 <SCCB_delay>
	if(SDA_read) 
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <SCCB_Start+0x54>)
 80009b0:	f001 fd14 	bl	80023dc <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SCCB_Start+0x42>
	return DISABLE;	
 80009ba:	2300      	movs	r3, #0
 80009bc:	e005      	b.n	80009ca <SCCB_Start+0x4e>
	SDA_L;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SCCB_Start+0x54>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009c4:	f7ff ffc6 	bl	8000954 <SCCB_delay>
	return ENABLE;
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40011000 	.word	0x40011000

080009d4 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	SCL_L;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SCCB_Stop+0x30>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009de:	f7ff ffb9 	bl	8000954 <SCCB_delay>
	SDA_L;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SCCB_Stop+0x30>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80009e8:	f7ff ffb4 	bl	8000954 <SCCB_delay>
	SCL_H;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SCCB_Stop+0x30>)
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80009f2:	f7ff ffaf 	bl	8000954 <SCCB_delay>
	SDA_H;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <SCCB_Stop+0x30>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80009fc:	f7ff ffaa 	bl	8000954 <SCCB_delay>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40011000 	.word	0x40011000

08000a08 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	SCL_L;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SCCB_Ack+0x30>)
 8000a0e:	2240      	movs	r2, #64	; 0x40
 8000a10:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a12:	f7ff ff9f 	bl	8000954 <SCCB_delay>
	SDA_L;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <SCCB_Ack+0x30>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a1c:	f7ff ff9a 	bl	8000954 <SCCB_delay>
	SCL_H;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SCCB_Ack+0x30>)
 8000a22:	2240      	movs	r2, #64	; 0x40
 8000a24:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a26:	f7ff ff95 	bl	8000954 <SCCB_delay>
	SCL_L;
 8000a2a:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <SCCB_Ack+0x30>)
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a30:	f7ff ff90 	bl	8000954 <SCCB_delay>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40011000 	.word	0x40011000

08000a3c <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	SCL_L;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <SCCB_NoAck+0x30>)
 8000a42:	2240      	movs	r2, #64	; 0x40
 8000a44:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a46:	f7ff ff85 	bl	8000954 <SCCB_delay>
	SDA_H;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SCCB_NoAck+0x30>)
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a50:	f7ff ff80 	bl	8000954 <SCCB_delay>
	SCL_H;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SCCB_NoAck+0x30>)
 8000a56:	2240      	movs	r2, #64	; 0x40
 8000a58:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a5a:	f7ff ff7b 	bl	8000954 <SCCB_delay>
	SCL_L;
 8000a5e:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <SCCB_NoAck+0x30>)
 8000a60:	2240      	movs	r2, #64	; 0x40
 8000a62:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a64:	f7ff ff76 	bl	8000954 <SCCB_delay>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40011000 	.word	0x40011000

08000a70 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	SCL_L;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000a76:	2240      	movs	r2, #64	; 0x40
 8000a78:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000a7a:	f7ff ff6b 	bl	8000954 <SCCB_delay>
	SDA_H;			
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a84:	f7ff ff66 	bl	8000954 <SCCB_delay>
	SCL_H;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000a8e:	f7ff ff61 	bl	8000954 <SCCB_delay>
	if(SDA_read)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000a96:	f001 fca1 	bl	80023dc <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e003      	b.n	8000ab2 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SCCB_WaitAck+0x48>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011000 	.word	0x40011000

08000abc <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000aca:	e019      	b.n	8000b00 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <SCCB_SendByte+0x5c>)
 8000ace:	2240      	movs	r2, #64	; 0x40
 8000ad0:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000ad2:	f7ff ff3f 	bl	8000954 <SCCB_delay>
      if(SendByte&0x80)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da03      	bge.n	8000ae6 <SCCB_SendByte+0x2a>
        SDA_H;  
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <SCCB_SendByte+0x5c>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	e002      	b.n	8000aec <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <SCCB_SendByte+0x5c>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000af2:	f7ff ff2f 	bl	8000954 <SCCB_delay>
		SCL_H;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <SCCB_SendByte+0x5c>)
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000afc:	f7ff ff2a 	bl	8000954 <SCCB_delay>
    while(i--)
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	73fa      	strb	r2, [r7, #15]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e0      	bne.n	8000acc <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000b0a:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <SCCB_SendByte+0x5c>)
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	615a      	str	r2, [r3, #20]
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40011000 	.word	0x40011000

08000b1c <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000b22:	2308      	movs	r3, #8
 8000b24:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SCCB_ReceiveByte+0x60>)
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	611a      	str	r2, [r3, #16]
    while(i--)
 8000b30:	e017      	b.n	8000b62 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <SCCB_ReceiveByte+0x60>)
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000b3e:	f7ff ff09 	bl	8000954 <SCCB_delay>
	  SCL_H;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <SCCB_ReceiveByte+0x60>)
 8000b44:	2240      	movs	r2, #64	; 0x40
 8000b46:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000b48:	f7ff ff04 	bl	8000954 <SCCB_delay>
      if(SDA_read)
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <SCCB_ReceiveByte+0x60>)
 8000b50:	f001 fc44 	bl	80023dc <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	71fa      	strb	r2, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1e2      	bne.n	8000b32 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <SCCB_ReceiveByte+0x60>)
 8000b6e:	2240      	movs	r2, #64	; 0x40
 8000b70:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000b72:	79bb      	ldrb	r3, [r7, #6]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40011000 	.word	0x40011000

08000b80 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000b90:	f7ff fef4 	bl	800097c <SCCB_Start>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e01b      	b.n	8000bd6 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000b9e:	2042      	movs	r0, #66	; 0x42
 8000ba0:	f7ff ff8c 	bl	8000abc <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000ba4:	f7ff ff64 	bl	8000a70 <SCCB_WaitAck>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d103      	bne.n	8000bb6 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000bae:	f7ff ff11 	bl	80009d4 <SCCB_Stop>
		return DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e00f      	b.n	8000bd6 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff7e 	bl	8000abc <SCCB_SendByte>
    SCCB_WaitAck();	
 8000bc0:	f7ff ff56 	bl	8000a70 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff78 	bl	8000abc <SCCB_SendByte>
    SCCB_WaitAck();   
 8000bcc:	f7ff ff50 	bl	8000a70 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000bd0:	f7ff ff00 	bl	80009d4 <SCCB_Stop>
    return ENABLE;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	807b      	strh	r3, [r7, #2]
 8000bea:	4613      	mov	r3, r2
 8000bec:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000bee:	f7ff fec5 	bl	800097c <SCCB_Start>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e040      	b.n	8000c7e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000bfc:	2042      	movs	r0, #66	; 0x42
 8000bfe:	f7ff ff5d 	bl	8000abc <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000c02:	f7ff ff35 	bl	8000a70 <SCCB_WaitAck>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d103      	bne.n	8000c14 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000c0c:	f7ff fee2 	bl	80009d4 <SCCB_Stop>
		return DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e034      	b.n	8000c7e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff50 	bl	8000abc <SCCB_SendByte>
    SCCB_WaitAck();	
 8000c1c:	f7ff ff28 	bl	8000a70 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000c20:	f7ff fed8 	bl	80009d4 <SCCB_Stop>
	
    if(!SCCB_Start())
 8000c24:	f7ff feaa 	bl	800097c <SCCB_Start>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e025      	b.n	8000c7e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000c32:	2043      	movs	r0, #67	; 0x43
 8000c34:	f7ff ff42 	bl	8000abc <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000c38:	f7ff ff1a 	bl	8000a70 <SCCB_WaitAck>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d117      	bne.n	8000c72 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000c42:	f7ff fec7 	bl	80009d4 <SCCB_Stop>
		return DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e019      	b.n	8000c7e <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000c4a:	f7ff ff67 	bl	8000b1c <SCCB_ReceiveByte>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d102      	bne.n	8000c62 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000c5c:	f7ff feee 	bl	8000a3c <SCCB_NoAck>
 8000c60:	e001      	b.n	8000c66 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000c62:	f7ff fed1 	bl	8000a08 <SCCB_Ack>
	  }
      pBuffer++;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
      length--;
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	807b      	strh	r3, [r7, #2]
    while(length)
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e8      	bne.n	8000c4a <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000c78:	f7ff feac 	bl	80009d4 <SCCB_Stop>
    return ENABLE;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000ca2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ca6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000caa:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <MX_FSMC_Init+0xc0>)
 8000cac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d02:	230f      	movs	r3, #15
 8000d04:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000d06:	23ff      	movs	r3, #255	; 0xff
 8000d08:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d12:	2311      	movs	r3, #17
 8000d14:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <MX_FSMC_Init+0xbc>)
 8000d22:	f001 ffcd 	bl	8002cc0 <HAL_SRAM_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000d2c:	f000 fc87 	bl	800163e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_FSMC_Init+0xc4>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <MX_FSMC_Init+0xc4>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	61d3      	str	r3, [r2, #28]

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	a0000104 	.word	0xa0000104
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_FSMC_MspInit+0x78>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d129      	bne.n	8000dc0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_FSMC_MspInit+0x78>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_FSMC_MspInit+0x7c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_FSMC_MspInit+0x7c>)
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_FSMC_MspInit+0x7c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d8a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d8e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_FSMC_MspInit+0x80>)
 8000da0:	f001 f984 	bl	80020ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000da4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000da8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4619      	mov	r1, r3
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <HAL_FSMC_MspInit+0x84>)
 8000dba:	f001 f977 	bl	80020ac <HAL_GPIO_Init>
 8000dbe:	e000      	b.n	8000dc2 <HAL_FSMC_MspInit+0x72>
    return;
 8000dc0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000108 	.word	0x20000108
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011800 	.word	0x40011800
 8000dd4:	40011400 	.word	0x40011400

08000dd8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000de0:	f7ff ffb6 	bl	8000d50 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e00:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a7c      	ldr	r2, [pc, #496]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a76      	ldr	r2, [pc, #472]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a70      	ldr	r2, [pc, #448]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a64      	ldr	r2, [pc, #400]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MX_GPIO_Init+0x20c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	485f      	ldr	r0, [pc, #380]	; (8000ffc <MX_GPIO_Init+0x210>)
 8000e7e:	f001 fac4 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	210c      	movs	r1, #12
 8000e86:	485e      	ldr	r0, [pc, #376]	; (8001000 <MX_GPIO_Init+0x214>)
 8000e88:	f001 fabf 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	21f0      	movs	r1, #240	; 0xf0
 8000e90:	485c      	ldr	r0, [pc, #368]	; (8001004 <MX_GPIO_Init+0x218>)
 8000e92:	f001 faba 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2123      	movs	r1, #35	; 0x23
 8000e9a:	485b      	ldr	r0, [pc, #364]	; (8001008 <MX_GPIO_Init+0x21c>)
 8000e9c:	f001 fab5 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f243 0108 	movw	r1, #12296	; 0x3008
 8000ea6:	4859      	ldr	r0, [pc, #356]	; (800100c <MX_GPIO_Init+0x220>)
 8000ea8:	f001 faaf 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000eac:	2307      	movs	r3, #7
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	484e      	ldr	r0, [pc, #312]	; (8000ffc <MX_GPIO_Init+0x210>)
 8000ec4:	f001 f8f2 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4848      	ldr	r0, [pc, #288]	; (8000ffc <MX_GPIO_Init+0x210>)
 8000edc:	f001 f8e6 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <MX_GPIO_Init+0x224>)
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4842      	ldr	r0, [pc, #264]	; (8000ffc <MX_GPIO_Init+0x210>)
 8000ef4:	f001 f8da 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <MX_GPIO_Init+0x228>)
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	483e      	ldr	r0, [pc, #248]	; (8001004 <MX_GPIO_Init+0x218>)
 8000f0c:	f001 f8ce 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4619      	mov	r1, r3
 8000f22:	4837      	ldr	r0, [pc, #220]	; (8001000 <MX_GPIO_Init+0x214>)
 8000f24:	f001 f8c2 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4830      	ldr	r0, [pc, #192]	; (8001000 <MX_GPIO_Init+0x214>)
 8000f40:	f001 f8b4 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f44:	2330      	movs	r3, #48	; 0x30
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482a      	ldr	r0, [pc, #168]	; (8001004 <MX_GPIO_Init+0x218>)
 8000f5c:	f001 f8a6 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000f60:	2323      	movs	r3, #35	; 0x23
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <MX_GPIO_Init+0x21c>)
 8000f78:	f001 f898 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000f7c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f80:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481d      	ldr	r0, [pc, #116]	; (8001008 <MX_GPIO_Init+0x21c>)
 8000f92:	f001 f88b 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8000f96:	f243 0308 	movw	r3, #12296	; 0x3008
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4817      	ldr	r0, [pc, #92]	; (800100c <MX_GPIO_Init+0x220>)
 8000fb0:	f001 f87c 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb4:	23c0      	movs	r3, #192	; 0xc0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fb8:	2311      	movs	r3, #17
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <MX_GPIO_Init+0x218>)
 8000fcc:	f001 f86e 	bl	80020ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2009      	movs	r0, #9
 8000fd6:	f001 f832 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fda:	2009      	movs	r0, #9
 8000fdc:	f001 f84b 	bl	8002076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f001 f82a 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f001 f843 	bl	8002076 <HAL_NVIC_EnableIRQ>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40011800 	.word	0x40011800
 8001000:	40010800 	.word	0x40010800
 8001004:	40011000 	.word	0x40011000
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011400 	.word	0x40011400
 8001010:	10110000 	.word	0x10110000
 8001014:	10210000 	.word	0x10210000

08001018 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	e002      	b.n	8001028 <Delay+0x10>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3b01      	subs	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <Delay+0xa>
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <LCD_INIT>:

void LCD_INIT ( void )
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001040:	2001      	movs	r0, #1
 8001042:	f000 f829 	bl	8001098 <LCD_BackLed_Control>
	LCD_Rst();
 8001046:	f000 f80f 	bl	8001068 <LCD_Rst>
	LCD_REG_Config();
 800104a:	f000 f85f 	bl	800110c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800104e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001058:	22f0      	movs	r2, #240	; 0xf0
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f000 f9e6 	bl	800142e <LCD_Clear>
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2102      	movs	r1, #2
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <LCD_Rst+0x28>)
 8001072:	f001 f9ca 	bl	800240a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <LCD_Rst+0x2c>)
 8001078:	f7ff ffce 	bl	8001018 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <LCD_Rst+0x28>)
 8001082:	f001 f9c2 	bl	800240a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <LCD_Rst+0x2c>)
 8001088:	f7ff ffc6 	bl	8001018 <Delay>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40011800 	.word	0x40011800
 8001094:	0002bffc 	.word	0x0002bffc

08001098 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <LCD_BackLed_Control+0x34>)
 80010b0:	f001 f9ab 	bl	800240a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80010b4:	e005      	b.n	80010c2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <LCD_BackLed_Control+0x34>)
 80010be:	f001 f9a4 	bl	800240a <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011400 	.word	0x40011400

080010d0 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80010da:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	8013      	strh	r3, [r2, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <LCD_Write_Data+0x1c>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	8013      	strh	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	60020000 	.word	0x60020000

0800110c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001110:	20cf      	movs	r0, #207	; 0xcf
 8001112:	f7ff ffdd 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ffe8 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800111c:	2081      	movs	r0, #129	; 0x81
 800111e:	f7ff ffe5 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001122:	2030      	movs	r0, #48	; 0x30
 8001124:	f7ff ffe2 	bl	80010ec <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001128:	20ed      	movs	r0, #237	; 0xed
 800112a:	f7ff ffd1 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f7ff ffdc 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001134:	2003      	movs	r0, #3
 8001136:	f7ff ffd9 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800113a:	2012      	movs	r0, #18
 800113c:	f7ff ffd6 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001140:	2081      	movs	r0, #129	; 0x81
 8001142:	f7ff ffd3 	bl	80010ec <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001146:	20e8      	movs	r0, #232	; 0xe8
 8001148:	f7ff ffc2 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800114c:	2085      	movs	r0, #133	; 0x85
 800114e:	f7ff ffcd 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001152:	2010      	movs	r0, #16
 8001154:	f7ff ffca 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f7ff ffc7 	bl	80010ec <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800115e:	20cb      	movs	r0, #203	; 0xcb
 8001160:	f7ff ffb6 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001164:	2039      	movs	r0, #57	; 0x39
 8001166:	f7ff ffc1 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800116a:	202c      	movs	r0, #44	; 0x2c
 800116c:	f7ff ffbe 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ffbb 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001176:	2034      	movs	r0, #52	; 0x34
 8001178:	f7ff ffb8 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800117c:	2002      	movs	r0, #2
 800117e:	f7ff ffb5 	bl	80010ec <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001182:	20f7      	movs	r0, #247	; 0xf7
 8001184:	f7ff ffa4 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001188:	2020      	movs	r0, #32
 800118a:	f7ff ffaf 	bl	80010ec <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800118e:	20ea      	movs	r0, #234	; 0xea
 8001190:	f7ff ff9e 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ffa9 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ffa6 	bl	80010ec <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80011a0:	20b1      	movs	r0, #177	; 0xb1
 80011a2:	f7ff ff95 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ffa0 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80011ac:	201b      	movs	r0, #27
 80011ae:	f7ff ff9d 	bl	80010ec <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80011b2:	20b6      	movs	r0, #182	; 0xb6
 80011b4:	f7ff ff8c 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80011b8:	200a      	movs	r0, #10
 80011ba:	f7ff ff97 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80011be:	20a2      	movs	r0, #162	; 0xa2
 80011c0:	f7ff ff94 	bl	80010ec <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80011c4:	20c0      	movs	r0, #192	; 0xc0
 80011c6:	f7ff ff83 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80011ca:	2035      	movs	r0, #53	; 0x35
 80011cc:	f7ff ff8e 	bl	80010ec <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80011d0:	20c1      	movs	r0, #193	; 0xc1
 80011d2:	f7ff ff7d 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80011d6:	2011      	movs	r0, #17
 80011d8:	f7ff ff88 	bl	80010ec <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80011dc:	20c5      	movs	r0, #197	; 0xc5
 80011de:	f7ff ff77 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80011e2:	2045      	movs	r0, #69	; 0x45
 80011e4:	f7ff ff82 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80011e8:	2045      	movs	r0, #69	; 0x45
 80011ea:	f7ff ff7f 	bl	80010ec <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80011ee:	20c7      	movs	r0, #199	; 0xc7
 80011f0:	f7ff ff6e 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80011f4:	20a2      	movs	r0, #162	; 0xa2
 80011f6:	f7ff ff79 	bl	80010ec <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80011fa:	20f2      	movs	r0, #242	; 0xf2
 80011fc:	f7ff ff68 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff73 	bl	80010ec <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001206:	2026      	movs	r0, #38	; 0x26
 8001208:	f7ff ff62 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff ff6d 	bl	80010ec <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001212:	20e0      	movs	r0, #224	; 0xe0
 8001214:	f7ff ff5c 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001218:	200f      	movs	r0, #15
 800121a:	f7ff ff67 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800121e:	2026      	movs	r0, #38	; 0x26
 8001220:	f7ff ff64 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001224:	2024      	movs	r0, #36	; 0x24
 8001226:	f7ff ff61 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800122a:	200b      	movs	r0, #11
 800122c:	f7ff ff5e 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001230:	200e      	movs	r0, #14
 8001232:	f7ff ff5b 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001236:	2009      	movs	r0, #9
 8001238:	f7ff ff58 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800123c:	2054      	movs	r0, #84	; 0x54
 800123e:	f7ff ff55 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001242:	20a8      	movs	r0, #168	; 0xa8
 8001244:	f7ff ff52 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001248:	2046      	movs	r0, #70	; 0x46
 800124a:	f7ff ff4f 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800124e:	200c      	movs	r0, #12
 8001250:	f7ff ff4c 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001254:	2017      	movs	r0, #23
 8001256:	f7ff ff49 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800125a:	2009      	movs	r0, #9
 800125c:	f7ff ff46 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001260:	200f      	movs	r0, #15
 8001262:	f7ff ff43 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001266:	2007      	movs	r0, #7
 8001268:	f7ff ff40 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff3d 	bl	80010ec <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001272:	20e1      	movs	r0, #225	; 0xe1
 8001274:	f7ff ff2c 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff ff37 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800127e:	2019      	movs	r0, #25
 8001280:	f7ff ff34 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001284:	201b      	movs	r0, #27
 8001286:	f7ff ff31 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800128a:	2004      	movs	r0, #4
 800128c:	f7ff ff2e 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001290:	2010      	movs	r0, #16
 8001292:	f7ff ff2b 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001296:	2007      	movs	r0, #7
 8001298:	f7ff ff28 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800129c:	202a      	movs	r0, #42	; 0x2a
 800129e:	f7ff ff25 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80012a2:	2047      	movs	r0, #71	; 0x47
 80012a4:	f7ff ff22 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80012a8:	2039      	movs	r0, #57	; 0x39
 80012aa:	f7ff ff1f 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80012ae:	2003      	movs	r0, #3
 80012b0:	f7ff ff1c 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80012b4:	2006      	movs	r0, #6
 80012b6:	f7ff ff19 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80012ba:	2006      	movs	r0, #6
 80012bc:	f7ff ff16 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80012c0:	2030      	movs	r0, #48	; 0x30
 80012c2:	f7ff ff13 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80012c6:	2038      	movs	r0, #56	; 0x38
 80012c8:	f7ff ff10 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80012cc:	200f      	movs	r0, #15
 80012ce:	f7ff ff0d 	bl	80010ec <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80012d2:	2036      	movs	r0, #54	; 0x36
 80012d4:	f7ff fefc 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80012d8:	20c8      	movs	r0, #200	; 0xc8
 80012da:	f7ff ff07 	bl	80010ec <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80012de:	202a      	movs	r0, #42	; 0x2a
 80012e0:	f7ff fef6 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ff01 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fefe 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fefb 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80012f6:	20ef      	movs	r0, #239	; 0xef
 80012f8:	f7ff fef8 	bl	80010ec <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80012fc:	202b      	movs	r0, #43	; 0x2b
 80012fe:	f7ff fee7 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fef2 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff feef 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff feec 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001314:	203f      	movs	r0, #63	; 0x3f
 8001316:	f7ff fee9 	bl	80010ec <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800131a:	203a      	movs	r0, #58	; 0x3a
 800131c:	f7ff fed8 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001320:	2055      	movs	r0, #85	; 0x55
 8001322:	f7ff fee3 	bl	80010ec <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001326:	2011      	movs	r0, #17
 8001328:	f7ff fed2 	bl	80010d0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <LCD_REG_Config+0x230>)
 800132e:	f7ff fe73 	bl	8001018 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001332:	2029      	movs	r0, #41	; 0x29
 8001334:	f7ff fecc 	bl	80010d0 <LCD_Write_Cmd>
	
	
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	0002bffc 	.word	0x0002bffc

08001340 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	4603      	mov	r3, r0
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800135e:	202a      	movs	r0, #42	; 0x2a
 8001360:	f7ff feb6 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff febe 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff feb8 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	4413      	add	r3, r2
 8001382:	3b01      	subs	r3, #1
 8001384:	121b      	asrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff feaf 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800138e:	88fa      	ldrh	r2, [r7, #6]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fea4 	bl	80010ec <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80013a4:	202b      	movs	r0, #43	; 0x2b
 80013a6:	f7ff fe93 	bl	80010d0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe9b 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe95 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80013c2:	88ba      	ldrh	r2, [r7, #4]
 80013c4:	883b      	ldrh	r3, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	3b01      	subs	r3, #1
 80013ca:	121b      	asrs	r3, r3, #8
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fe8c 	bl	80010ec <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80013d4:	88ba      	ldrh	r2, [r7, #4]
 80013d6:	883b      	ldrh	r3, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe81 	bl	80010ec <LCD_Write_Data>
	
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}

080013f2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001402:	202c      	movs	r0, #44	; 0x2c
 8001404:	f7ff fe64 	bl	80010d0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e006      	b.n	800141c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe6b 	bl	80010ec <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3f4      	bcc.n	800140e <LCD_FillColor+0x1c>
		
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4603      	mov	r3, r0
 8001442:	80bb      	strh	r3, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	88b9      	ldrh	r1, [r7, #4]
 8001452:	88f8      	ldrh	r0, [r7, #6]
 8001454:	f7ff ff74 	bl	8001340 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	883a      	ldrh	r2, [r7, #0]
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	461a      	mov	r2, r3
 8001462:	8b3b      	ldrh	r3, [r7, #24]
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f7ff ffc3 	bl	80013f2 <LCD_FillColor>
	
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	460b      	mov	r3, r1
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	3b20      	subs	r3, #32
 800148a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800148c:	88b9      	ldrh	r1, [r7, #4]
 800148e:	88f8      	ldrh	r0, [r7, #6]
 8001490:	2310      	movs	r3, #16
 8001492:	2208      	movs	r2, #8
 8001494:	f7ff ff54 	bl	8001340 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001498:	202c      	movs	r0, #44	; 0x2c
 800149a:	f7ff fe19 	bl	80010d0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800149e:	2300      	movs	r3, #0
 80014a0:	73bb      	strb	r3, [r7, #14]
 80014a2:	e023      	b.n	80014ec <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80014a4:	7b3a      	ldrb	r2, [r7, #12]
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	4914      	ldr	r1, [pc, #80]	; (80014fc <LCD_DrawChar+0x88>)
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014b4:	2300      	movs	r3, #0
 80014b6:	737b      	strb	r3, [r7, #13]
 80014b8:	e012      	b.n	80014e0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80014c4:	201f      	movs	r0, #31
 80014c6:	f7ff fe11 	bl	80010ec <LCD_Write_Data>
 80014ca:	e003      	b.n	80014d4 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80014cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014d0:	f7ff fe0c 	bl	80010ec <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	3301      	adds	r3, #1
 80014de:	737b      	strb	r3, [r7, #13]
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	d9e9      	bls.n	80014ba <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	3301      	adds	r3, #1
 80014ea:	73bb      	strb	r3, [r7, #14]
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	d9d8      	bls.n	80014a4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	08003594 	.word	0x08003594

08001500 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	603a      	str	r2, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	460b      	mov	r3, r1
 800150e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001510:	e01c      	b.n	800154c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2be8      	cmp	r3, #232	; 0xe8
 8001516:	d904      	bls.n	8001522 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001518:	2300      	movs	r3, #0
 800151a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	3310      	adds	r3, #16
 8001520:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001528:	d903      	bls.n	8001532 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800152a:	2300      	movs	r3, #0
 800152c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800152e:	2300      	movs	r3, #0
 8001530:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	88b9      	ldrh	r1, [r7, #4]
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff9a 	bl	8001474 <LCD_DrawChar>
		
		pStr ++;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	3308      	adds	r3, #8
 800154a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1de      	bne.n	8001512 <LCD_DrawString+0x12>
		
	}
	
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 fc11 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f823 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f7ff fc3d 	bl	8000dec <MX_GPIO_Init>
  MX_FSMC_Init();
 8001572:	f7ff fb89 	bl	8000c88 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001576:	f000 faf3 	bl	8001b60 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800157a:	f000 fb1b 	bl	8001bb4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 800157e:	f7ff fd5c 	bl	800103a <LCD_INIT>
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char input[5];
	  HAL_UART_Receive(&huart3, input, sizeof(input), 0xFFFF);
 8001582:	4639      	mov	r1, r7
 8001584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001588:	2205      	movs	r2, #5
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <main+0x4c>)
 800158c:	f001 fcc2 	bl	8002f14 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, input, sizeof(input), 0xFFFF);
 8001590:	4639      	mov	r1, r7
 8001592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001596:	2205      	movs	r2, #5
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <main+0x50>)
 800159a:	f001 fc22 	bl	8002de2 <HAL_UART_Transmit>
	  mode(input[4]-'1'+1);
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	3b30      	subs	r3, #48	; 0x30
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f852 	bl	800164c <mode>
  {
 80015a8:	e7eb      	b.n	8001582 <main+0x22>
 80015aa:	bf00      	nop
 80015ac:	20000150 	.word	0x20000150
 80015b0:	20000110 	.word	0x20000110

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2228      	movs	r2, #40	; 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 ff9a 	bl	80034fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e8:	2302      	movs	r3, #2
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 ff3f 	bl	8002480 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001608:	f000 f819 	bl	800163e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f98e 	bl	8002948 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001632:	f000 f804 	bl	800163e <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3740      	adds	r7, #64	; 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <mode>:
#include "process.h"
#include "CameraWithErrorCorrection.h"

extern uint8_t Ov7725_vsync;

void mode(int choice) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b0b6      	sub	sp, #216	; 0xd8
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
	switch (choice) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d004      	beq.n	8001664 <mode+0x18>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	f000 8133 	beq.w	80018c8 <mode+0x27c>
					break;
			}
			break;
		}
	}
}
 8001662:	e185      	b.n	8001970 <mode+0x324>
				AllFaces[54] = '\0';
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 800166a:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	2201      	movs	r2, #1
 8001674:	48c0      	ldr	r0, [pc, #768]	; (8001978 <mode+0x32c>)
 8001676:	f001 fc4d 	bl	8002f14 <HAL_UART_Receive>
				switch (signal) {
 800167a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800167e:	3b31      	subs	r3, #49	; 0x31
 8001680:	2b03      	cmp	r3, #3
 8001682:	f200 811c 	bhi.w	80018be <mode+0x272>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <mode+0x40>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016e3 	.word	0x080016e3
 8001694:	08001811 	.word	0x08001811
 8001698:	08001887 	.word	0x08001887
						char message_r[2], message_t = 'T';
 800169c:	2354      	movs	r3, #84	; 0x54
 800169e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 80016a2:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 80016a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016aa:	2201      	movs	r2, #1
 80016ac:	48b3      	ldr	r0, [pc, #716]	; (800197c <mode+0x330>)
 80016ae:	f001 fb98 	bl	8002de2 <HAL_UART_Transmit>
						LCD_DrawChar(0,0,signal);
 80016b2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80016b6:	461a      	mov	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff feda 	bl	8001474 <LCD_DrawChar>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);	// ok
 80016c0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80016c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c8:	2202      	movs	r2, #2
 80016ca:	48ac      	ldr	r0, [pc, #688]	; (800197c <mode+0x330>)
 80016cc:	f001 fc22 	bl	8002f14 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 80016d0:	f107 01cb 	add.w	r1, r7, #203	; 0xcb
 80016d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d8:	2201      	movs	r2, #1
 80016da:	48a7      	ldr	r0, [pc, #668]	; (8001978 <mode+0x32c>)
 80016dc:	f001 fb81 	bl	8002de2 <HAL_UART_Transmit>
						break;
 80016e0:	e0ed      	b.n	80018be <mode+0x272>
						uint8_t face = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 80016e8:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 80016ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f0:	2201      	movs	r2, #1
 80016f2:	48a2      	ldr	r0, [pc, #648]	; (800197c <mode+0x330>)
 80016f4:	f001 fb75 	bl	8002de2 <HAL_UART_Transmit>
						while (face < 6) {
 80016f8:	e07c      	b.n	80017f4 <mode+0x1a8>
							char message_r, SquareOfOneFace[9], message_t = 'T';
 80016fa:	2354      	movs	r3, #84	; 0x54
 80016fc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
							HAL_UART_Receive(&huart1, &message_r, 1, 0xFFFF);
 8001700:	f107 01ca 	add.w	r1, r7, #202	; 0xca
 8001704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001708:	2201      	movs	r2, #1
 800170a:	489b      	ldr	r0, [pc, #620]	; (8001978 <mode+0x32c>)
 800170c:	f001 fc02 	bl	8002f14 <HAL_UART_Receive>
							while(Ov7725_Init() != SUCCESS);
 8001710:	bf00      	nop
 8001712:	f7fe fe45 	bl	80003a0 <Ov7725_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1fa      	bne.n	8001712 <mode+0xc6>
							Ov7725_vsync = 0;
 800171c:	4b98      	ldr	r3, [pc, #608]	; (8001980 <mode+0x334>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
							HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001726:	f000 fb93 	bl	8001e50 <HAL_Delay>
								if (Ov7725_vsync == 2)
 800172a:	4b95      	ldr	r3, [pc, #596]	; (8001980 <mode+0x334>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d1fb      	bne.n	800172a <mode+0xde>
										FIFO_PREPARE;
 8001732:	4b94      	ldr	r3, [pc, #592]	; (8001984 <mode+0x338>)
 8001734:	2204      	movs	r2, #4
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	4b93      	ldr	r3, [pc, #588]	; (8001988 <mode+0x33c>)
 800173a:	2220      	movs	r2, #32
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	4b92      	ldr	r3, [pc, #584]	; (8001988 <mode+0x33c>)
 8001740:	2220      	movs	r2, #32
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <mode+0x338>)
 8001746:	2204      	movs	r2, #4
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <mode+0x33c>)
 800174c:	2220      	movs	r2, #32
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	4b8d      	ldr	r3, [pc, #564]	; (8001988 <mode+0x33c>)
 8001752:	2220      	movs	r2, #32
 8001754:	611a      	str	r2, [r3, #16]
										ReadSquare(SquareOfOneFace);
 8001756:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f846 	bl	80007ec <ReadSquare>
										break;
 8001760:	bf00      	nop
							LCD_Clear ( 0, 0, 240, 320, GREY );
 8001762:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800176c:	22f0      	movs	r2, #240	; 0xf0
 800176e:	2100      	movs	r1, #0
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fe5c 	bl	800142e <LCD_Clear>
							printFace(SquareOfOneFace);
 8001776:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fdc6 	bl	800030c <printFace>
								printFace(SquareOfOneFace);
 8001780:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdc1 	bl	800030c <printFace>
								HAL_UART_Receive(&huart3, correctionMessage, sizeof(correctionMessage), 0xFFFF);
 800178a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800178e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001792:	2207      	movs	r2, #7
 8001794:	4879      	ldr	r0, [pc, #484]	; (800197c <mode+0x330>)
 8001796:	f001 fbbd 	bl	8002f14 <HAL_UART_Receive>
								if (stringCompare(correctionMessage, "confirm", 7) == 0) {	// correct then
 800179a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800179e:	2207      	movs	r2, #7
 80017a0:	497a      	ldr	r1, [pc, #488]	; (800198c <mode+0x340>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fd90 	bl	80002c8 <stringCompare>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <mode+0x190>
									writeDataIntoAllFaces(AllFaces, SquareOfOneFace,face);	// write one face data into all face data
 80017ae:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80017b2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd32 	bl	8000224 <writeDataIntoAllFaces>
									HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);		// transmit signal to Control Board
 80017c0:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	2201      	movs	r2, #1
 80017ca:	486b      	ldr	r0, [pc, #428]	; (8001978 <mode+0x32c>)
 80017cc:	f001 fb09 	bl	8002de2 <HAL_UART_Transmit>
									face++;
 80017d0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80017d4:	3301      	adds	r3, #1
 80017d6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80017da:	e00b      	b.n	80017f4 <mode+0x1a8>
									SquareOfOneFace[correctionMessage[0]-'1'] = (char) ((int) correctionMessage[1] - 32);// correct it and go back to receceive message from PC
 80017dc:	f897 20b9 	ldrb.w	r2, [r7, #185]	; 0xb9
 80017e0:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80017e4:	3b31      	subs	r3, #49	; 0x31
 80017e6:	3a20      	subs	r2, #32
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	33d0      	adds	r3, #208	; 0xd0
 80017ec:	443b      	add	r3, r7
 80017ee:	f803 2c10 	strb.w	r2, [r3, #-16]
							while (1) {
 80017f2:	e7c5      	b.n	8001780 <mode+0x134>
						while (face < 6) {
 80017f4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	f67f af7e 	bls.w	80016fa <mode+0xae>
						HAL_UART_Transmit(&huart3, AllFaces, sizeof(AllFaces), 0xFFFF);		// transmit capture result to PC
 80017fe:	f107 010c 	add.w	r1, r7, #12
 8001802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001806:	2237      	movs	r2, #55	; 0x37
 8001808:	485c      	ldr	r0, [pc, #368]	; (800197c <mode+0x330>)
 800180a:	f001 faea 	bl	8002de2 <HAL_UART_Transmit>
						break;
 800180e:	e056      	b.n	80018be <mode+0x272>
						LCD_Clear( 0, 0, 240, 320, GREY );
 8001810:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800181a:	22f0      	movs	r2, #240	; 0xf0
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fe05 	bl	800142e <LCD_Clear>
						LCD_DrawString(0,0,"123");
 8001824:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <mode+0x344>)
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fe69 	bl	8001500 <LCD_DrawString>
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 800182e:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	2201      	movs	r2, #1
 8001838:	4850      	ldr	r0, [pc, #320]	; (800197c <mode+0x330>)
 800183a:	f001 fad2 	bl	8002de2 <HAL_UART_Transmit>
						LCD_DrawString(0,8, &signal);
 800183e:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 8001842:	461a      	mov	r2, r3
 8001844:	2108      	movs	r1, #8
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff fe5a 	bl	8001500 <LCD_DrawString>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 800184c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001854:	2264      	movs	r2, #100	; 0x64
 8001856:	4849      	ldr	r0, [pc, #292]	; (800197c <mode+0x330>)
 8001858:	f001 fb5c 	bl	8002f14 <HAL_UART_Receive>
						LCD_DrawString(0,16, message_r);
 800185c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001860:	461a      	mov	r2, r3
 8001862:	2110      	movs	r1, #16
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fe4b 	bl	8001500 <LCD_DrawString>
						HAL_UART_Transmit(&huart1, message_r, sizeof(message_r), 0xFFFF);
 800186a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	4840      	ldr	r0, [pc, #256]	; (8001978 <mode+0x32c>)
 8001876:	f001 fab4 	bl	8002de2 <HAL_UART_Transmit>
						LCD_DrawString(0,100, "transmitted");
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <mode+0x348>)
 800187c:	2164      	movs	r1, #100	; 0x64
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fe3e 	bl	8001500 <LCD_DrawString>
						break;
 8001884:	e01b      	b.n	80018be <mode+0x272>
						char message_r[2], message_t = 'T';
 8001886:	2354      	movs	r3, #84	; 0x54
 8001888:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
						HAL_UART_Transmit(&huart3, &signal, 1, 0xFFFF);
 800188c:	f107 01ce 	add.w	r1, r7, #206	; 0xce
 8001890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001894:	2201      	movs	r2, #1
 8001896:	4839      	ldr	r0, [pc, #228]	; (800197c <mode+0x330>)
 8001898:	f001 faa3 	bl	8002de2 <HAL_UART_Transmit>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 800189c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	2202      	movs	r2, #2
 80018a6:	4835      	ldr	r0, [pc, #212]	; (800197c <mode+0x330>)
 80018a8:	f001 fb34 	bl	8002f14 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 80018ac:	f107 01b3 	add.w	r1, r7, #179	; 0xb3
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	2201      	movs	r2, #1
 80018b6:	4830      	ldr	r0, [pc, #192]	; (8001978 <mode+0x32c>)
 80018b8:	f001 fa93 	bl	8002de2 <HAL_UART_Transmit>
						break;
 80018bc:	bf00      	nop
				if (signal == '4')
 80018be:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80018c2:	2b34      	cmp	r3, #52	; 0x34
 80018c4:	d051      	beq.n	800196a <mode+0x31e>
			while (1) {
 80018c6:	e6cd      	b.n	8001664 <mode+0x18>
				HAL_UART_Receive(&huart1, &signal, 1, 0xFFFF);
 80018c8:	f107 01b2 	add.w	r1, r7, #178	; 0xb2
 80018cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d0:	2201      	movs	r2, #1
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <mode+0x32c>)
 80018d4:	f001 fb1e 	bl	8002f14 <HAL_UART_Receive>
				switch (signal) {
 80018d8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80018dc:	2b33      	cmp	r3, #51	; 0x33
 80018de:	d02b      	beq.n	8001938 <mode+0x2ec>
 80018e0:	2b33      	cmp	r3, #51	; 0x33
 80018e2:	dc3d      	bgt.n	8001960 <mode+0x314>
 80018e4:	2b31      	cmp	r3, #49	; 0x31
 80018e6:	d002      	beq.n	80018ee <mode+0x2a2>
 80018e8:	2b32      	cmp	r3, #50	; 0x32
 80018ea:	d014      	beq.n	8001916 <mode+0x2ca>
 80018ec:	e038      	b.n	8001960 <mode+0x314>
						char message_r[2], message_t = 'T';
 80018ee:	2354      	movs	r3, #84	; 0x54
 80018f0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 80018f4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80018f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fc:	2202      	movs	r2, #2
 80018fe:	481f      	ldr	r0, [pc, #124]	; (800197c <mode+0x330>)
 8001900:	f001 fb08 	bl	8002f14 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 8001904:	f107 01af 	add.w	r1, r7, #175	; 0xaf
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	2201      	movs	r2, #1
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <mode+0x32c>)
 8001910:	f001 fa67 	bl	8002de2 <HAL_UART_Transmit>
						break;
 8001914:	e024      	b.n	8001960 <mode+0x314>
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 8001916:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800191a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191e:	2264      	movs	r2, #100	; 0x64
 8001920:	4816      	ldr	r0, [pc, #88]	; (800197c <mode+0x330>)
 8001922:	f001 faf7 	bl	8002f14 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, message_r, sizeof(message_r), 0xFFFF);
 8001926:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800192a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192e:	2264      	movs	r2, #100	; 0x64
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <mode+0x32c>)
 8001932:	f001 fa56 	bl	8002de2 <HAL_UART_Transmit>
						break;
 8001936:	e013      	b.n	8001960 <mode+0x314>
						char message_r[2], message_t = 'T';
 8001938:	2354      	movs	r3, #84	; 0x54
 800193a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						HAL_UART_Receive(&huart3, message_r, sizeof(message_r), 0xFFFF);
 800193e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	2202      	movs	r2, #2
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <mode+0x330>)
 800194a:	f001 fae3 	bl	8002f14 <HAL_UART_Receive>
						HAL_UART_Transmit(&huart1, &message_t, 1, 0xFFFF);
 800194e:	f107 01ab 	add.w	r1, r7, #171	; 0xab
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	2201      	movs	r2, #1
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <mode+0x32c>)
 800195a:	f001 fa42 	bl	8002de2 <HAL_UART_Transmit>
						break;
 800195e:	bf00      	nop
				if (signal == '3')
 8001960:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001964:	2b33      	cmp	r3, #51	; 0x33
 8001966:	d002      	beq.n	800196e <mode+0x322>
			while (1) {
 8001968:	e7ae      	b.n	80018c8 <mode+0x27c>
			break;
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <mode+0x324>
			break;
 800196e:	bf00      	nop
}
 8001970:	bf00      	nop
 8001972:	37d0      	adds	r7, #208	; 0xd0
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000110 	.word	0x20000110
 800197c:	20000150 	.word	0x20000150
 8001980:	2000010c 	.word	0x2000010c
 8001984:	40010800 	.word	0x40010800
 8001988:	40011000 	.word	0x40011000
 800198c:	0800356c 	.word	0x0800356c
 8001990:	08003574 	.word	0x08003574
 8001994:	08003578 	.word	0x08003578

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_MspInit+0x5c>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_MspInit+0x5c>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6193      	str	r3, [r2, #24]
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_MspInit+0x5c>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_MspInit+0x5c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_MspInit+0x5c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_MspInit+0x5c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_MspInit+0x60>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_MspInit+0x60>)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <HardFault_Handler+0x4>

08001a0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <UsageFault_Handler+0x4>

08001a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f9e6 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <EXTI3_IRQHandler+0x64>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <EXTI3_IRQHandler+0x68>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <EXTI3_IRQHandler+0x6c>)
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <EXTI3_IRQHandler+0x70>)
 8001a70:	2208      	movs	r2, #8
 8001a72:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <EXTI3_IRQHandler+0x68>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <EXTI3_IRQHandler+0x70>)
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <EXTI3_IRQHandler+0x6c>)
 8001a82:	2210      	movs	r2, #16
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	e009      	b.n	8001a9c <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <EXTI3_IRQHandler+0x68>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <EXTI3_IRQHandler+0x70>)
 8001a92:	2208      	movs	r2, #8
 8001a94:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <EXTI3_IRQHandler+0x68>)
 8001a98:	2202      	movs	r2, #2
 8001a9a:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <EXTI3_IRQHandler+0x64>)
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001aa2:	2008      	movs	r0, #8
 8001aa4:	f000 fce2 	bl	800246c <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001aa8:	2008      	movs	r0, #8
 8001aaa:	f000 fcc7 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	2000010c 	.word	0x2000010c
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400

08001ac4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <EXTI4_IRQHandler+0x2c>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <EXTI4_IRQHandler+0x30>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <EXTI4_IRQHandler+0x2c>)
 8001adc:	2210      	movs	r2, #16
 8001ade:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	f000 fcc3 	bl	800246c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	f000 fca8 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010400 	.word	0x40010400
 8001af4:	20000190 	.word	0x20000190

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <SystemInit+0x5c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <SystemInit+0x5c>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <SystemInit+0x5c>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4911      	ldr	r1, [pc, #68]	; (8001b54 <SystemInit+0x5c>)
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0x60>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <SystemInit+0x5c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <SystemInit+0x5c>)
 8001b1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <SystemInit+0x5c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SystemInit+0x5c>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <SystemInit+0x5c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <SystemInit+0x5c>)
 8001b36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SystemInit+0x5c>)
 8001b3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SystemInit+0x64>)
 8001b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	f8ff0000 	.word	0xf8ff0000
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_USART1_UART_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART1_UART_Init+0x4c>)
 8001b98:	f001 f8d6 	bl	8002d48 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ba2:	f7ff fd4c 	bl	800163e <Error_Handler>
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000110 	.word	0x20000110
 8001bb0:	40013800 	.word	0x40013800

08001bb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART3_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART3_UART_Init+0x4c>)
 8001bec:	f001 f8ac 	bl	8002d48 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f7ff fd22 	bl	800163e <Error_Handler>
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000150 	.word	0x20000150
 8001c04:	40004800 	.word	0x40004800

08001c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a41      	ldr	r2, [pc, #260]	; (8001d28 <HAL_UART_MspInit+0x120>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d132      	bne.n	8001c8e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4830      	ldr	r0, [pc, #192]	; (8001d30 <HAL_UART_MspInit+0x128>)
 8001c6e:	f000 fa1d 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	482a      	ldr	r0, [pc, #168]	; (8001d30 <HAL_UART_MspInit+0x128>)
 8001c88:	f000 fa10 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c8c:	e048      	b.n	8001d20 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_UART_MspInit+0x12c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d143      	bne.n	8001d20 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca2:	61d3      	str	r3, [r2, #28]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x124>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4816      	ldr	r0, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x130>)
 8001cde:	f000 f9e5 	bl	80020ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4810      	ldr	r0, [pc, #64]	; (8001d38 <HAL_UART_MspInit+0x130>)
 8001cf8:	f000 f9d8 	bl	80020ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_UART_MspInit+0x134>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_UART_MspInit+0x134>)
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	6053      	str	r3, [r2, #4]
}
 8001d20:	bf00      	nop
 8001d22:	3730      	adds	r7, #48	; 0x30
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010800 	.word	0x40010800
 8001d34:	40004800 	.word	0x40004800
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40010000 	.word	0x40010000

08001d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d42:	e003      	b.n	8001d4c <LoopCopyDataInit>

08001d44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d4a:	3104      	adds	r1, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d4c:	480a      	ldr	r0, [pc, #40]	; (8001d78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d54:	d3f6      	bcc.n	8001d44 <CopyDataInit>
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d58:	e002      	b.n	8001d60 <LoopFillZerobss>

08001d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d5c:	f842 3b04 	str.w	r3, [r2], #4

08001d60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d64:	d3f9      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d66:	f7ff fec7 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f001 fbcf 	bl	800350c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6e:	f7ff fbf7 	bl	8001560 <main>
  bx lr
 8001d72:	4770      	bx	lr
  ldr r3, =_sidata
 8001d74:	08003ba4 	.word	0x08003ba4
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d7c:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8001d80:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8001d84:	20000198 	.word	0x20000198

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x28>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x28>)
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f943 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fdf6 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f95b 	bl	8002092 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df4:	f000 f923 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000009c 	.word	0x2000009c
 8001e10:	200000a4 	.word	0x200000a4
 8001e14:	200000a0 	.word	0x200000a0

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x20>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <HAL_IncTick+0x20>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	200000a4 	.word	0x200000a4
 8001e38:	20000194 	.word	0x20000194

08001e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_GetTick+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000194 	.word	0x20000194

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffe0 	bl	8001e3c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200000a4 	.word	0x200000a4

08001e98 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <NVIC_EnableIRQ+0x2c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0b      	bge.n	8001f58 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <NVIC_SetPriority+0x4c>)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	3b04      	subs	r3, #4
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f56:	e009      	b.n	8001f6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <NVIC_SetPriority+0x50>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002008:	f7ff ff90 	bl	8001f2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff31 	bl	8001e98 <NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff46 	bl	8001ee0 <NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff39 	bl	8001efc <NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b08b      	sub	sp, #44	; 0x2c
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	e179      	b.n	80023c4 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80020d0:	2201      	movs	r2, #1
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8168 	bne.w	80023be <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d05e      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
 80020f8:	4a94      	ldr	r2, [pc, #592]	; (800234c <HAL_GPIO_Init+0x2a0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d875      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 80020fe:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2a4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d058      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
 8002104:	4a92      	ldr	r2, [pc, #584]	; (8002350 <HAL_GPIO_Init+0x2a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d86f      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 800210a:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2a8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d052      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
 8002110:	4a90      	ldr	r2, [pc, #576]	; (8002354 <HAL_GPIO_Init+0x2a8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d869      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 8002116:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_GPIO_Init+0x2ac>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d04c      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
 800211c:	4a8e      	ldr	r2, [pc, #568]	; (8002358 <HAL_GPIO_Init+0x2ac>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d863      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 8002122:	4a8e      	ldr	r2, [pc, #568]	; (800235c <HAL_GPIO_Init+0x2b0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d046      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
 8002128:	4a8c      	ldr	r2, [pc, #560]	; (800235c <HAL_GPIO_Init+0x2b0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d85d      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d82a      	bhi.n	8002188 <HAL_GPIO_Init+0xdc>
 8002132:	2b12      	cmp	r3, #18
 8002134:	d859      	bhi.n	80021ea <HAL_GPIO_Init+0x13e>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_GPIO_Init+0x90>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	080021b7 	.word	0x080021b7
 8002140:	08002191 	.word	0x08002191
 8002144:	080021a3 	.word	0x080021a3
 8002148:	080021e5 	.word	0x080021e5
 800214c:	080021eb 	.word	0x080021eb
 8002150:	080021eb 	.word	0x080021eb
 8002154:	080021eb 	.word	0x080021eb
 8002158:	080021eb 	.word	0x080021eb
 800215c:	080021eb 	.word	0x080021eb
 8002160:	080021eb 	.word	0x080021eb
 8002164:	080021eb 	.word	0x080021eb
 8002168:	080021eb 	.word	0x080021eb
 800216c:	080021eb 	.word	0x080021eb
 8002170:	080021eb 	.word	0x080021eb
 8002174:	080021eb 	.word	0x080021eb
 8002178:	080021eb 	.word	0x080021eb
 800217c:	080021eb 	.word	0x080021eb
 8002180:	08002199 	.word	0x08002199
 8002184:	080021ad 	.word	0x080021ad
 8002188:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_GPIO_Init+0x2b4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218e:	e02c      	b.n	80021ea <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e029      	b.n	80021ec <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	3304      	adds	r3, #4
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e024      	b.n	80021ec <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	3308      	adds	r3, #8
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e01f      	b.n	80021ec <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	330c      	adds	r3, #12
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e01a      	b.n	80021ec <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021be:	2304      	movs	r3, #4
 80021c0:	623b      	str	r3, [r7, #32]
          break;
 80021c2:	e013      	b.n	80021ec <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021cc:	2308      	movs	r3, #8
 80021ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	611a      	str	r2, [r3, #16]
          break;
 80021d6:	e009      	b.n	80021ec <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d8:	2308      	movs	r3, #8
 80021da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	615a      	str	r2, [r3, #20]
          break;
 80021e2:	e003      	b.n	80021ec <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
          break;
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x140>
          break;
 80021ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d801      	bhi.n	80021f6 <HAL_GPIO_Init+0x14a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	e001      	b.n	80021fa <HAL_GPIO_Init+0x14e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d802      	bhi.n	8002208 <HAL_GPIO_Init+0x15c>
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x162>
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	3b08      	subs	r3, #8
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	210f      	movs	r1, #15
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80c1 	beq.w	80023be <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800223c:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_GPIO_Init+0x2b8>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2b8>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_GPIO_Init+0x2b8>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002254:	4a44      	ldr	r2, [pc, #272]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <HAL_GPIO_Init+0x2c0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01f      	beq.n	80022c0 <HAL_GPIO_Init+0x214>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_GPIO_Init+0x2c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d019      	beq.n	80022bc <HAL_GPIO_Init+0x210>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3a      	ldr	r2, [pc, #232]	; (8002374 <HAL_GPIO_Init+0x2c8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x20c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x208>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <HAL_GPIO_Init+0x2d0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x204>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a37      	ldr	r2, [pc, #220]	; (8002380 <HAL_GPIO_Init+0x2d4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x200>
 80022a8:	2305      	movs	r3, #5
 80022aa:	e00a      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022ac:	2306      	movs	r3, #6
 80022ae:	e008      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e006      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e004      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_GPIO_Init+0x216>
 80022c0:	2300      	movs	r3, #0
 80022c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c4:	f002 0203 	and.w	r2, r2, #3
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	4093      	lsls	r3, r2
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4924      	ldr	r1, [pc, #144]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	4920      	ldr	r1, [pc, #128]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 8002304:	4013      	ands	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	43db      	mvns	r3, r3
 800232a:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 800232c:	4013      	ands	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d025      	beq.n	8002388 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4910      	ldr	r1, [pc, #64]	; (8002384 <HAL_GPIO_Init+0x2d8>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]
 8002348:	e025      	b.n	8002396 <HAL_GPIO_Init+0x2ea>
 800234a:	bf00      	nop
 800234c:	10320000 	.word	0x10320000
 8002350:	10310000 	.word	0x10310000
 8002354:	10220000 	.word	0x10220000
 8002358:	10210000 	.word	0x10210000
 800235c:	10120000 	.word	0x10120000
 8002360:	10110000 	.word	0x10110000
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000
 800236c:	40010800 	.word	0x40010800
 8002370:	40010c00 	.word	0x40010c00
 8002374:	40011000 	.word	0x40011000
 8002378:	40011400 	.word	0x40011400
 800237c:	40011800 	.word	0x40011800
 8002380:	40011c00 	.word	0x40011c00
 8002384:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	43db      	mvns	r3, r3
 8002390:	4911      	ldr	r1, [pc, #68]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 8002392:	4013      	ands	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	490c      	ldr	r1, [pc, #48]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60cb      	str	r3, [r1, #12]
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f ae82 	bls.w	80020d0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	372c      	adds	r7, #44	; 0x2c
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
 8002416:	4613      	mov	r3, r2
 8002418:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241a:	787b      	ldrb	r3, [r7, #1]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002426:	e003      	b.n	8002430 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	611a      	str	r2, [r3, #16]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
	...

0800243c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f806 	bl	800246c <HAL_GPIO_EXTI_Callback>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8087 	beq.w	80025a8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800249a:	4b92      	ldr	r3, [pc, #584]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a6:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d112      	bne.n	80024d8 <HAL_RCC_OscConfig+0x58>
 80024b2:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x126>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d168      	bne.n	80025a6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e22d      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x70>
 80024e2:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7f      	ldr	r2, [pc, #508]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e02e      	b.n	800254e <HAL_RCC_OscConfig+0xce>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x92>
 80024f8:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a79      	ldr	r2, [pc, #484]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a76      	ldr	r2, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e01d      	b.n	800254e <HAL_RCC_OscConfig+0xce>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0xb6>
 800251c:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a70      	ldr	r2, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0xce>
 8002536:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fc71 	bl	8001e3c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7ff fc6d 	bl	8001e3c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1e1      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002570:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0xde>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fc5d 	bl	8001e3c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7ff fc59 	bl	8001e3c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1cd      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002598:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x106>
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d063      	beq.n	800267c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025b4:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c0:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d11c      	bne.n	8002606 <HAL_RCC_OscConfig+0x186>
 80025cc:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x170>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e1a1      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4939      	ldr	r1, [pc, #228]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002604:	e03a      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fc12 	bl	8001e3c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff fc0e 	bl	8001e3c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e182      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4926      	ldr	r1, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
 800264e:	e015      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_OscConfig+0x268>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff fbf1 	bl	8001e3c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff fbed 	bl	8001e3c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e161      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d039      	beq.n	80026fc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fbd1 	bl	8001e3c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fbcd 	bl	8001e3c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e141      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x264>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80026bc:	2001      	movs	r0, #1
 80026be:	f000 fadf 	bl	8002c80 <RCC_Delay>
 80026c2:	e01b      	b.n	80026fc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fbb7 	bl	8001e3c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00e      	b.n	80026f0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff fbb3 	bl	8001e3c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d907      	bls.n	80026f0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e127      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	42420000 	.word	0x42420000
 80026ec:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a6 	beq.w	8002856 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b8b      	ldr	r3, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10d      	bne.n	8002736 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a87      	ldr	r2, [pc, #540]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x4c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b7f      	ldr	r3, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x4c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7e      	ldr	r2, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x4c0>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7ff fb75 	bl	8001e3c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7ff fb71 	bl	8001e3c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0e5      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x4c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x30a>
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	e02d      	b.n	80027e6 <HAL_RCC_OscConfig+0x366>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x32c>
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	e01c      	b.n	80027e6 <HAL_RCC_OscConfig+0x366>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d10c      	bne.n	80027ce <HAL_RCC_OscConfig+0x34e>
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4a60      	ldr	r2, [pc, #384]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e00b      	b.n	80027e6 <HAL_RCC_OscConfig+0x366>
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d015      	beq.n	800281a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7ff fb25 	bl	8001e3c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7ff fb21 	bl	8001e3c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e093      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ee      	beq.n	80027f6 <HAL_RCC_OscConfig+0x376>
 8002818:	e014      	b.n	8002844 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff fb0f 	bl	8001e3c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7ff fb0b 	bl	8001e3c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e07d      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b3c      	ldr	r3, [pc, #240]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a3b      	ldr	r2, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d069      	beq.n	8002932 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d061      	beq.n	800292e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d146      	bne.n	8002900 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fae0 	bl	8001e3c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7ff fadc 	bl	8001e3c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e050      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a6:	d108      	bne.n	80028ba <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4921      	ldr	r1, [pc, #132]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a19      	ldr	r1, [r3, #32]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	430b      	orrs	r3, r1
 80028cc:	491b      	ldr	r1, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fab0 	bl	8001e3c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff faac 	bl	8001e3c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e020      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x460>
 80028fe:	e018      	b.n	8002932 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff fa99 	bl	8001e3c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7ff fa95 	bl	8001e3c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e009      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x4bc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x48e>
 800292c:	e001      	b.n	8002932 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	42420060 	.word	0x42420060

08002948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002956:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d910      	bls.n	8002986 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002964:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 0207 	bic.w	r2, r3, #7
 800296c:	4978      	ldr	r1, [pc, #480]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002974:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0e0      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299e:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a6c      	ldr	r2, [pc, #432]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029a4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029a8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a66      	ldr	r2, [pc, #408]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029bc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029c0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c2:	4b64      	ldr	r3, [pc, #400]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4961      	ldr	r1, [pc, #388]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d06a      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e8:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d115      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0a7      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e09b      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e093      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4949      	ldr	r1, [pc, #292]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a32:	f7ff fa03 	bl	8001e3c <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a42:	f7ff f9fb 	bl	8001e3c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e077      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xfa>
 8002a64:	e027      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d11d      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7ff f9e4 	bl	8001e3c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e060      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x128>
 8002a92:	e010      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7ff f9d2 	bl	8001e3c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e04e      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d210      	bcs.n	8002ae6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 0207 	bic.w	r2, r3, #7
 8002acc:	4920      	ldr	r1, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_RCC_ClockConfig+0x208>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e030      	b.n	8002b48 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4915      	ldr	r1, [pc, #84]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	490d      	ldr	r1, [pc, #52]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b24:	f000 f81c 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x20c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	4908      	ldr	r1, [pc, #32]	; (8002b58 <HAL_RCC_ClockConfig+0x210>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_RCC_ClockConfig+0x214>)
 8002b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff f939 	bl	8001db8 <HAL_InitTick>
  
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08003b84 	.word	0x08003b84
 8002b5c:	2000009c 	.word	0x2000009c

08002b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b490      	push	{r4, r7}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xac>)
 8002b68:	1d3c      	adds	r4, r7, #4
 8002b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b70:	f240 2301 	movw	r3, #513	; 0x201
 8002b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8002b9e:	e02b      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ba2:	623b      	str	r3, [r7, #32]
      break;
 8002ba4:	e02b      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3328      	adds	r3, #40	; 0x28
 8002bb0:	443b      	add	r3, r7
 8002bb2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d012      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	3328      	adds	r3, #40	; 0x28
 8002bce:	443b      	add	r3, r7
 8002bd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e004      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	623b      	str	r3, [r7, #32]
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bfa:	623b      	str	r3, [r7, #32]
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3728      	adds	r7, #40	; 0x28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc90      	pop	{r4, r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	08003584 	.word	0x08003584
 8002c10:	40021000 	.word	0x40021000
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	2000009c 	.word	0x2000009c

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff2 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08003b94 	.word	0x08003b94

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0adb      	lsrs	r3, r3, #11
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08003b94 	.word	0x08003b94

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <RCC_Delay+0x3c>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002c9c:	bf00      	nop
}
 8002c9e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	60fa      	str	r2, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f8      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000009c 	.word	0x2000009c
 8002cbc:	10624dd3 	.word	0x10624dd3

08002cc0 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e034      	b.n	8002d40 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7fe f874 	bl	8000dd8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 fb12 	bl	8003324 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	f000 fb8a 	bl	8003424 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6858      	ldr	r0, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	f000 fbb5 	bl	800348c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6892      	ldr	r2, [r2, #8]
 8002d36:	f041 0101 	orr.w	r1, r1, #1
 8002d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e03f      	b.n	8002dda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe ff4a 	bl	8001c08 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f9b1 	bl	80030f4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	f040 8083 	bne.w	8002f0a <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Transmit+0x2e>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e07b      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Transmit+0x40>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e074      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2221      	movs	r2, #33	; 0x21
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e38:	f7ff f800 	bl	8001e3c <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002e4a:	e042      	b.n	8002ed2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d122      	bne.n	8002eaa <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f8f6 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e046      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e90:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	e017      	b.n	8002ed2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	e013      	b.n	8002ed2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f8d3 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e023      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	60ba      	str	r2, [r7, #8]
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1b7      	bne.n	8002e4c <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8ba 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e00a      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	f040 8090 	bne.w	8003056 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_Receive+0x2e>
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e088      	b.n	8003058 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Receive+0x40>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e081      	b.n	8003058 <HAL_UART_Receive+0x144>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2222      	movs	r2, #34	; 0x22
 8002f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f6a:	f7fe ff67 	bl	8001e3c <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8002f7c:	e05c      	b.n	8003038 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f94:	d12b      	bne.n	8002fee <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2120      	movs	r1, #32
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f85d 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e053      	b.n	8003058 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10c      	bne.n	8002fd6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	e030      	b.n	8003038 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	e024      	b.n	8003038 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f831 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e027      	b.n	8003058 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d108      	bne.n	8003022 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	60ba      	str	r2, [r7, #8]
 800301c:	b2ca      	uxtb	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e00a      	b.n	8003038 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d19d      	bne.n	8002f7e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003070:	e02c      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003078:	d028      	beq.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
 8003080:	f7fe fedc 	bl	8001e3c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	429a      	cmp	r2, r3
 800308e:	d21d      	bcs.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800309e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e00f      	b.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d0c3      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003136:	f023 030c 	bic.w	r3, r3, #12
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	430b      	orrs	r3, r1
 8003142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	; (800331c <UART_SetConfig+0x228>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d16b      	bne.n	800323c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003164:	f7ff fd78 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 8003168:	4602      	mov	r2, r0
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a68      	ldr	r2, [pc, #416]	; (8003320 <UART_SetConfig+0x22c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	011c      	lsls	r4, r3, #4
 8003188:	f7ff fd66 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 800318c:	4602      	mov	r2, r0
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	fbb2 f5f3 	udiv	r5, r2, r3
 80031a2:	f7ff fd59 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <UART_SetConfig+0x22c>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2264      	movs	r2, #100	; 0x64
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	1aeb      	subs	r3, r5, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a53      	ldr	r2, [pc, #332]	; (8003320 <UART_SetConfig+0x22c>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	441c      	add	r4, r3
 80031de:	f7ff fd3b 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80031f8:	f7ff fd2e 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4a43      	ldr	r2, [pc, #268]	; (8003320 <UART_SetConfig+0x22c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	2264      	movs	r2, #100	; 0x64
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	1aeb      	subs	r3, r5, r3
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	3332      	adds	r3, #50	; 0x32
 8003226:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <UART_SetConfig+0x22c>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	f003 020f 	and.w	r2, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4422      	add	r2, r4
 8003238:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800323a:	e06a      	b.n	8003312 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800323c:	f7ff fcf8 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8003240:	4602      	mov	r2, r0
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	4a32      	ldr	r2, [pc, #200]	; (8003320 <UART_SetConfig+0x22c>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	011c      	lsls	r4, r3, #4
 8003260:	f7ff fce6 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8003264:	4602      	mov	r2, r0
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	fbb2 f5f3 	udiv	r5, r2, r3
 800327a:	f7ff fcd9 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 800327e:	4602      	mov	r2, r0
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <UART_SetConfig+0x22c>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2264      	movs	r2, #100	; 0x64
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	1aeb      	subs	r3, r5, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <UART_SetConfig+0x22c>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	441c      	add	r4, r3
 80032b6:	f7ff fcbb 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	009a      	lsls	r2, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80032d0:	f7ff fcae 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <UART_SetConfig+0x22c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2264      	movs	r2, #100	; 0x64
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	1aeb      	subs	r3, r5, r3
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <UART_SetConfig+0x22c>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4422      	add	r2, r4
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bdb0      	pop	{r4, r5, r7, pc}
 800331a:	bf00      	nop
 800331c:	40013800 	.word	0x40013800
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	f023 0101 	bic.w	r1, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d132      	bne.n	80033b4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <FSMC_NORSRAM_Init+0xfc>)
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6851      	ldr	r1, [r2, #4]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	4311      	orrs	r1, r2
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	6912      	ldr	r2, [r2, #16]
 8003370:	4311      	orrs	r1, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6952      	ldr	r2, [r2, #20]
 8003376:	4311      	orrs	r1, r2
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	6992      	ldr	r2, [r2, #24]
 800337c:	4311      	orrs	r1, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	69d2      	ldr	r2, [r2, #28]
 8003382:	4311      	orrs	r1, r2
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	6a12      	ldr	r2, [r2, #32]
 8003388:	4311      	orrs	r1, r2
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338e:	4311      	orrs	r1, r2
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003394:	4311      	orrs	r1, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800339a:	4311      	orrs	r1, r2
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4313      	orrs	r3, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033b2:	e02f      	b.n	8003414 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <FSMC_NORSRAM_Init+0xfc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6851      	ldr	r1, [r2, #4]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	4311      	orrs	r1, r2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	6952      	ldr	r2, [r2, #20]
 80033dc:	4311      	orrs	r1, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6992      	ldr	r2, [r2, #24]
 80033e2:	4311      	orrs	r1, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	69d2      	ldr	r2, [r2, #28]
 80033e8:	4311      	orrs	r1, r2
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6a12      	ldr	r2, [r2, #32]
 80033ee:	4311      	orrs	r1, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f4:	4311      	orrs	r1, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033fa:	4311      	orrs	r1, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003400:	4311      	orrs	r1, r2
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003406:	4311      	orrs	r1, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	4319      	orrs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	fff70081 	.word	0xfff70081

08003424 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	431a      	orrs	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	431a      	orrs	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	3b01      	subs	r3, #1
 8003460:	051b      	lsls	r3, r3, #20
 8003462:	431a      	orrs	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	3b02      	subs	r3, #2
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	431a      	orrs	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	3201      	adds	r2, #1
 8003478:	4319      	orrs	r1, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d11d      	bne.n	80034de <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	6811      	ldr	r1, [r2, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	4311      	orrs	r1, r2
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	0212      	lsls	r2, r2, #8
 80034c0:	4311      	orrs	r1, r2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	6992      	ldr	r2, [r2, #24]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	0412      	lsls	r2, r2, #16
 80034ce:	430a      	orrs	r2, r1
 80034d0:	ea43 0102 	orr.w	r1, r3, r2
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034dc:	e005      	b.n	80034ea <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80034e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	cff00000 	.word	0xcff00000

080034fc <memset>:
 80034fc:	4603      	mov	r3, r0
 80034fe:	4402      	add	r2, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	d100      	bne.n	8003506 <memset+0xa>
 8003504:	4770      	bx	lr
 8003506:	f803 1b01 	strb.w	r1, [r3], #1
 800350a:	e7f9      	b.n	8003500 <memset+0x4>

0800350c <__libc_init_array>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	2600      	movs	r6, #0
 8003510:	4d0c      	ldr	r5, [pc, #48]	; (8003544 <__libc_init_array+0x38>)
 8003512:	4c0d      	ldr	r4, [pc, #52]	; (8003548 <__libc_init_array+0x3c>)
 8003514:	1b64      	subs	r4, r4, r5
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	42a6      	cmp	r6, r4
 800351a:	d109      	bne.n	8003530 <__libc_init_array+0x24>
 800351c:	f000 f81a 	bl	8003554 <_init>
 8003520:	2600      	movs	r6, #0
 8003522:	4d0a      	ldr	r5, [pc, #40]	; (800354c <__libc_init_array+0x40>)
 8003524:	4c0a      	ldr	r4, [pc, #40]	; (8003550 <__libc_init_array+0x44>)
 8003526:	1b64      	subs	r4, r4, r5
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	42a6      	cmp	r6, r4
 800352c:	d105      	bne.n	800353a <__libc_init_array+0x2e>
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	f855 3b04 	ldr.w	r3, [r5], #4
 8003534:	4798      	blx	r3
 8003536:	3601      	adds	r6, #1
 8003538:	e7ee      	b.n	8003518 <__libc_init_array+0xc>
 800353a:	f855 3b04 	ldr.w	r3, [r5], #4
 800353e:	4798      	blx	r3
 8003540:	3601      	adds	r6, #1
 8003542:	e7f2      	b.n	800352a <__libc_init_array+0x1e>
 8003544:	08003b9c 	.word	0x08003b9c
 8003548:	08003b9c 	.word	0x08003b9c
 800354c:	08003b9c 	.word	0x08003b9c
 8003550:	08003ba0 	.word	0x08003ba0

08003554 <_init>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr

08003560 <_fini>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr
