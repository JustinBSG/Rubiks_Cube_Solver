
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000250c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d28  08002d28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d28  08002d28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002d3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002d3c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bd1  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020aa  00000000  00000000  00027c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00029cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000691  00000000  00000000  0002a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030c5  00000000  00000000  0002ac79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcee  00000000  00000000  0002dd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079902  00000000  00000000  00039a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002224  00000000  00000000  000b3330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000b5554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080026d8 	.word	0x080026d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080026d8 	.word	0x080026d8

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80002a2:	23ff      	movs	r3, #255	; 0xff
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f001 fdc1 	bl	8001e44 <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f000 fc75 	bl	8000bb6 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f000 ff90 	bl	8001260 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f000 ff83 	bl	8001260 <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000006c 	.word	0x2000006c
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039c:	4b7d      	ldr	r3, [pc, #500]	; (8000594 <MX_GPIO_Init+0x20c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a7c      	ldr	r2, [pc, #496]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b7a      	ldr	r3, [pc, #488]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b77      	ldr	r3, [pc, #476]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a76      	ldr	r2, [pc, #472]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b74      	ldr	r3, [pc, #464]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b71      	ldr	r3, [pc, #452]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a70      	ldr	r2, [pc, #448]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b6e      	ldr	r3, [pc, #440]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b6b      	ldr	r3, [pc, #428]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a6a      	ldr	r2, [pc, #424]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b68      	ldr	r3, [pc, #416]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b65      	ldr	r3, [pc, #404]	; (8000594 <MX_GPIO_Init+0x20c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a64      	ldr	r2, [pc, #400]	; (8000594 <MX_GPIO_Init+0x20c>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b62      	ldr	r3, [pc, #392]	; (8000594 <MX_GPIO_Init+0x20c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2107      	movs	r1, #7
 8000418:	485f      	ldr	r0, [pc, #380]	; (8000598 <MX_GPIO_Init+0x210>)
 800041a:	f001 f8b9 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	210c      	movs	r1, #12
 8000422:	485e      	ldr	r0, [pc, #376]	; (800059c <MX_GPIO_Init+0x214>)
 8000424:	f001 f8b4 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	21f0      	movs	r1, #240	; 0xf0
 800042c:	485c      	ldr	r0, [pc, #368]	; (80005a0 <MX_GPIO_Init+0x218>)
 800042e:	f001 f8af 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2123      	movs	r1, #35	; 0x23
 8000436:	485b      	ldr	r0, [pc, #364]	; (80005a4 <MX_GPIO_Init+0x21c>)
 8000438:	f001 f8aa 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f243 0108 	movw	r1, #12296	; 0x3008
 8000442:	4859      	ldr	r0, [pc, #356]	; (80005a8 <MX_GPIO_Init+0x220>)
 8000444:	f001 f8a4 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000448:	2307      	movs	r3, #7
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000454:	2303      	movs	r3, #3
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000458:	f107 0318 	add.w	r3, r7, #24
 800045c:	4619      	mov	r1, r3
 800045e:	484e      	ldr	r0, [pc, #312]	; (8000598 <MX_GPIO_Init+0x210>)
 8000460:	f000 fefe 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000464:	2308      	movs	r3, #8
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046c:	2301      	movs	r3, #1
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4619      	mov	r1, r3
 8000476:	4848      	ldr	r0, [pc, #288]	; (8000598 <MX_GPIO_Init+0x210>)
 8000478:	f000 fef2 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800047c:	2310      	movs	r3, #16
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000480:	4b4a      	ldr	r3, [pc, #296]	; (80005ac <MX_GPIO_Init+0x224>)
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4619      	mov	r1, r3
 800048e:	4842      	ldr	r0, [pc, #264]	; (8000598 <MX_GPIO_Init+0x210>)
 8000490:	f000 fee6 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000494:	2308      	movs	r3, #8
 8000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000498:	4b45      	ldr	r3, [pc, #276]	; (80005b0 <MX_GPIO_Init+0x228>)
 800049a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4619      	mov	r1, r3
 80004a6:	483e      	ldr	r0, [pc, #248]	; (80005a0 <MX_GPIO_Init+0x218>)
 80004a8:	f000 feda 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ac:	2301      	movs	r3, #1
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4619      	mov	r1, r3
 80004be:	4837      	ldr	r0, [pc, #220]	; (800059c <MX_GPIO_Init+0x214>)
 80004c0:	f000 fece 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c4:	230c      	movs	r3, #12
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4619      	mov	r1, r3
 80004da:	4830      	ldr	r0, [pc, #192]	; (800059c <MX_GPIO_Init+0x214>)
 80004dc:	f000 fec0 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004e0:	2330      	movs	r3, #48	; 0x30
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	4619      	mov	r1, r3
 80004f6:	482a      	ldr	r0, [pc, #168]	; (80005a0 <MX_GPIO_Init+0x218>)
 80004f8:	f000 feb2 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80004fc:	2323      	movs	r3, #35	; 0x23
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4619      	mov	r1, r3
 8000512:	4824      	ldr	r0, [pc, #144]	; (80005a4 <MX_GPIO_Init+0x21c>)
 8000514:	f000 fea4 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000518:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800051c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4619      	mov	r1, r3
 800052c:	481d      	ldr	r0, [pc, #116]	; (80005a4 <MX_GPIO_Init+0x21c>)
 800052e:	f000 fe97 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8000532:	f243 0308 	movw	r3, #12296	; 0x3008
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000540:	2303      	movs	r3, #3
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	4619      	mov	r1, r3
 800054a:	4817      	ldr	r0, [pc, #92]	; (80005a8 <MX_GPIO_Init+0x220>)
 800054c:	f000 fe88 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000550:	23c0      	movs	r3, #192	; 0xc0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000554:	2311      	movs	r3, #17
 8000556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	4619      	mov	r1, r3
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <MX_GPIO_Init+0x218>)
 8000568:	f000 fe7a 	bl	8001260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2009      	movs	r0, #9
 8000572:	f000 fe3e 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000576:	2009      	movs	r0, #9
 8000578:	f000 fe57 	bl	800122a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	200a      	movs	r0, #10
 8000582:	f000 fe36 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fe4f 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	40011800 	.word	0x40011800
 800059c:	40010800 	.word	0x40010800
 80005a0:	40011000 	.word	0x40011000
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	40011400 	.word	0x40011400
 80005ac:	10110000 	.word	0x10110000
 80005b0:	10210000 	.word	0x10210000

080005b4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	e002      	b.n	80005c4 <Delay+0x10>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f9      	bne.n	80005be <Delay+0xa>
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 f829 	bl	8000634 <LCD_BackLed_Control>
	LCD_Rst();
 80005e2:	f000 f80f 	bl	8000604 <LCD_Rst>
	LCD_REG_Config();
 80005e6:	f000 f85f 	bl	80006a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80005ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005f4:	22f0      	movs	r2, #240	; 0xf0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f9e6 	bl	80009ca <LCD_Clear>
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <LCD_Rst+0x28>)
 800060e:	f000 ffbf 	bl	8001590 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <LCD_Rst+0x2c>)
 8000614:	f7ff ffce 	bl	80005b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <LCD_Rst+0x28>)
 800061e:	f000 ffb7 	bl	8001590 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <LCD_Rst+0x2c>)
 8000624:	f7ff ffc6 	bl	80005b4 <Delay>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40011800 	.word	0x40011800
 8000630:	0002bffc 	.word	0x0002bffc

08000634 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <LCD_BackLed_Control+0x34>)
 800064c:	f000 ffa0 	bl	8001590 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000650:	e005      	b.n	800065e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <LCD_BackLed_Control+0x34>)
 800065a:	f000 ff99 	bl	8001590 <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40011400 	.word	0x40011400

0800066c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000676:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	8013      	strh	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <LCD_Write_Data+0x1c>)
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	8013      	strh	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	60020000 	.word	0x60020000

080006a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80006ac:	20cf      	movs	r0, #207	; 0xcf
 80006ae:	f7ff ffdd 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff ffe8 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80006b8:	2081      	movs	r0, #129	; 0x81
 80006ba:	f7ff ffe5 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ffe2 	bl	8000688 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80006c4:	20ed      	movs	r0, #237	; 0xed
 80006c6:	f7ff ffd1 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f7ff ffdc 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80006d0:	2003      	movs	r0, #3
 80006d2:	f7ff ffd9 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80006d6:	2012      	movs	r0, #18
 80006d8:	f7ff ffd6 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80006dc:	2081      	movs	r0, #129	; 0x81
 80006de:	f7ff ffd3 	bl	8000688 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80006e2:	20e8      	movs	r0, #232	; 0xe8
 80006e4:	f7ff ffc2 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80006e8:	2085      	movs	r0, #133	; 0x85
 80006ea:	f7ff ffcd 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80006ee:	2010      	movs	r0, #16
 80006f0:	f7ff ffca 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80006f4:	2078      	movs	r0, #120	; 0x78
 80006f6:	f7ff ffc7 	bl	8000688 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80006fa:	20cb      	movs	r0, #203	; 0xcb
 80006fc:	f7ff ffb6 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000700:	2039      	movs	r0, #57	; 0x39
 8000702:	f7ff ffc1 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000706:	202c      	movs	r0, #44	; 0x2c
 8000708:	f7ff ffbe 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ffbb 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000712:	2034      	movs	r0, #52	; 0x34
 8000714:	f7ff ffb8 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff ffb5 	bl	8000688 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800071e:	20f7      	movs	r0, #247	; 0xf7
 8000720:	f7ff ffa4 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000724:	2020      	movs	r0, #32
 8000726:	f7ff ffaf 	bl	8000688 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800072a:	20ea      	movs	r0, #234	; 0xea
 800072c:	f7ff ff9e 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ffa9 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ffa6 	bl	8000688 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800073c:	20b1      	movs	r0, #177	; 0xb1
 800073e:	f7ff ff95 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff ffa0 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000748:	201b      	movs	r0, #27
 800074a:	f7ff ff9d 	bl	8000688 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800074e:	20b6      	movs	r0, #182	; 0xb6
 8000750:	f7ff ff8c 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000754:	200a      	movs	r0, #10
 8000756:	f7ff ff97 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800075a:	20a2      	movs	r0, #162	; 0xa2
 800075c:	f7ff ff94 	bl	8000688 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000760:	20c0      	movs	r0, #192	; 0xc0
 8000762:	f7ff ff83 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000766:	2035      	movs	r0, #53	; 0x35
 8000768:	f7ff ff8e 	bl	8000688 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800076c:	20c1      	movs	r0, #193	; 0xc1
 800076e:	f7ff ff7d 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000772:	2011      	movs	r0, #17
 8000774:	f7ff ff88 	bl	8000688 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000778:	20c5      	movs	r0, #197	; 0xc5
 800077a:	f7ff ff77 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800077e:	2045      	movs	r0, #69	; 0x45
 8000780:	f7ff ff82 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000784:	2045      	movs	r0, #69	; 0x45
 8000786:	f7ff ff7f 	bl	8000688 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800078a:	20c7      	movs	r0, #199	; 0xc7
 800078c:	f7ff ff6e 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000790:	20a2      	movs	r0, #162	; 0xa2
 8000792:	f7ff ff79 	bl	8000688 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000796:	20f2      	movs	r0, #242	; 0xf2
 8000798:	f7ff ff68 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff73 	bl	8000688 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80007a2:	2026      	movs	r0, #38	; 0x26
 80007a4:	f7ff ff62 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff6d 	bl	8000688 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80007ae:	20e0      	movs	r0, #224	; 0xe0
 80007b0:	f7ff ff5c 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80007b4:	200f      	movs	r0, #15
 80007b6:	f7ff ff67 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80007ba:	2026      	movs	r0, #38	; 0x26
 80007bc:	f7ff ff64 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80007c0:	2024      	movs	r0, #36	; 0x24
 80007c2:	f7ff ff61 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80007c6:	200b      	movs	r0, #11
 80007c8:	f7ff ff5e 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80007cc:	200e      	movs	r0, #14
 80007ce:	f7ff ff5b 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80007d2:	2009      	movs	r0, #9
 80007d4:	f7ff ff58 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80007d8:	2054      	movs	r0, #84	; 0x54
 80007da:	f7ff ff55 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80007de:	20a8      	movs	r0, #168	; 0xa8
 80007e0:	f7ff ff52 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80007e4:	2046      	movs	r0, #70	; 0x46
 80007e6:	f7ff ff4f 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80007ea:	200c      	movs	r0, #12
 80007ec:	f7ff ff4c 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80007f0:	2017      	movs	r0, #23
 80007f2:	f7ff ff49 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80007f6:	2009      	movs	r0, #9
 80007f8:	f7ff ff46 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80007fc:	200f      	movs	r0, #15
 80007fe:	f7ff ff43 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000802:	2007      	movs	r0, #7
 8000804:	f7ff ff40 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff3d 	bl	8000688 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800080e:	20e1      	movs	r0, #225	; 0xe1
 8000810:	f7ff ff2c 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff37 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800081a:	2019      	movs	r0, #25
 800081c:	f7ff ff34 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000820:	201b      	movs	r0, #27
 8000822:	f7ff ff31 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000826:	2004      	movs	r0, #4
 8000828:	f7ff ff2e 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800082c:	2010      	movs	r0, #16
 800082e:	f7ff ff2b 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000832:	2007      	movs	r0, #7
 8000834:	f7ff ff28 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000838:	202a      	movs	r0, #42	; 0x2a
 800083a:	f7ff ff25 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800083e:	2047      	movs	r0, #71	; 0x47
 8000840:	f7ff ff22 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000844:	2039      	movs	r0, #57	; 0x39
 8000846:	f7ff ff1f 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800084a:	2003      	movs	r0, #3
 800084c:	f7ff ff1c 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000850:	2006      	movs	r0, #6
 8000852:	f7ff ff19 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000856:	2006      	movs	r0, #6
 8000858:	f7ff ff16 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800085c:	2030      	movs	r0, #48	; 0x30
 800085e:	f7ff ff13 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000862:	2038      	movs	r0, #56	; 0x38
 8000864:	f7ff ff10 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000868:	200f      	movs	r0, #15
 800086a:	f7ff ff0d 	bl	8000688 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800086e:	2036      	movs	r0, #54	; 0x36
 8000870:	f7ff fefc 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000874:	20c8      	movs	r0, #200	; 0xc8
 8000876:	f7ff ff07 	bl	8000688 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800087a:	202a      	movs	r0, #42	; 0x2a
 800087c:	f7ff fef6 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff01 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fefe 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff fefb 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000892:	20ef      	movs	r0, #239	; 0xef
 8000894:	f7ff fef8 	bl	8000688 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000898:	202b      	movs	r0, #43	; 0x2b
 800089a:	f7ff fee7 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fef2 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff feef 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff feec 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80008b0:	203f      	movs	r0, #63	; 0x3f
 80008b2:	f7ff fee9 	bl	8000688 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80008b6:	203a      	movs	r0, #58	; 0x3a
 80008b8:	f7ff fed8 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80008bc:	2055      	movs	r0, #85	; 0x55
 80008be:	f7ff fee3 	bl	8000688 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80008c2:	2011      	movs	r0, #17
 80008c4:	f7ff fed2 	bl	800066c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <LCD_REG_Config+0x230>)
 80008ca:	f7ff fe73 	bl	80005b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80008ce:	2029      	movs	r0, #41	; 0x29
 80008d0:	f7ff fecc 	bl	800066c <LCD_Write_Cmd>
	
	
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	0002bffc 	.word	0x0002bffc

080008dc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80008fa:	202a      	movs	r0, #42	; 0x2a
 80008fc:	f7ff feb6 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff febe 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b29b      	uxth	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff feb8 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	4413      	add	r3, r2
 800091e:	3b01      	subs	r3, #1
 8000920:	121b      	asrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff feaf 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	3b01      	subs	r3, #1
 8000934:	b29b      	uxth	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fea4 	bl	8000688 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000940:	202b      	movs	r0, #43	; 0x2b
 8000942:	f7ff fe93 	bl	800066c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe9b 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	b29b      	uxth	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe95 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800095e:	88ba      	ldrh	r2, [r7, #4]
 8000960:	883b      	ldrh	r3, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	3b01      	subs	r3, #1
 8000966:	121b      	asrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe8c 	bl	8000688 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000970:	88ba      	ldrh	r2, [r7, #4]
 8000972:	883b      	ldrh	r3, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	3b01      	subs	r3, #1
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fe81 	bl	8000688 <LCD_Write_Data>
	
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bd90      	pop	{r4, r7, pc}

0800098e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800099e:	202c      	movs	r0, #44	; 0x2c
 80009a0:	f7ff fe64 	bl	800066c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e006      	b.n	80009b8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe6b 	bl	8000688 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3301      	adds	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3f4      	bcc.n	80009aa <LCD_FillColor+0x1c>
		
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80009ca:	b590      	push	{r4, r7, lr}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4604      	mov	r4, r0
 80009d2:	4608      	mov	r0, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	461a      	mov	r2, r3
 80009d8:	4623      	mov	r3, r4
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	4603      	mov	r3, r0
 80009de:	80bb      	strh	r3, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
 80009e4:	4613      	mov	r3, r2
 80009e6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80009e8:	883b      	ldrh	r3, [r7, #0]
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	88b9      	ldrh	r1, [r7, #4]
 80009ee:	88f8      	ldrh	r0, [r7, #6]
 80009f0:	f7ff ff74 	bl	80008dc <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	883a      	ldrh	r2, [r7, #0]
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	8b3b      	ldrh	r3, [r7, #24]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4610      	mov	r0, r2
 8000a04:	f7ff ffc3 	bl	800098e <LCD_FillColor>
	
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	80bb      	strh	r3, [r7, #4]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	3b20      	subs	r3, #32
 8000a26:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000a28:	88b9      	ldrh	r1, [r7, #4]
 8000a2a:	88f8      	ldrh	r0, [r7, #6]
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	2208      	movs	r2, #8
 8000a30:	f7ff ff54 	bl	80008dc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000a34:	202c      	movs	r0, #44	; 0x2c
 8000a36:	f7ff fe19 	bl	800066c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73bb      	strb	r3, [r7, #14]
 8000a3e:	e023      	b.n	8000a88 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000a40:	7b3a      	ldrb	r2, [r7, #12]
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	4914      	ldr	r1, [pc, #80]	; (8000a98 <LCD_DrawChar+0x88>)
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	440a      	add	r2, r1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000a50:	2300      	movs	r3, #0
 8000a52:	737b      	strb	r3, [r7, #13]
 8000a54:	e012      	b.n	8000a7c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000a60:	201f      	movs	r0, #31
 8000a62:	f7ff fe11 	bl	8000688 <LCD_Write_Data>
 8000a66:	e003      	b.n	8000a70 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000a68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a6c:	f7ff fe0c 	bl	8000688 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	737b      	strb	r3, [r7, #13]
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d9e9      	bls.n	8000a56 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	73bb      	strb	r3, [r7, #14]
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d9d8      	bls.n	8000a40 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08002720 	.word	0x08002720

08000a9c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	603a      	str	r2, [r7, #0]
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000aac:	e01c      	b.n	8000ae8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2be8      	cmp	r3, #232	; 0xe8
 8000ab2:	d904      	bls.n	8000abe <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	3310      	adds	r3, #16
 8000abc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000ac4:	d903      	bls.n	8000ace <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	88b9      	ldrh	r1, [r7, #4]
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff9a 	bl	8000a10 <LCD_DrawChar>
		
		pStr ++;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1de      	bne.n	8000aae <LCD_DrawString+0x12>
		
	}
	
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fa1e 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f812 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f7ff fc3e 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000b0c:	f7ff fb8a 	bl	8000224 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000b10:	f000 f97a 	bl	8000e08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000b14:	f7ff fd5f 	bl	80005d6 <LCD_INIT>
			Ov7725_vsync = 0;
		}
	Error_correction(SquareOfOneFace);*/
//	char AllFaces[54];
//	CameraWithErrorCorrection(AllFaces);
  uint8_t flag = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71fb      	strb	r3, [r7, #7]
	// }
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag == 0)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <main+0x2c>
		  test_communication_two_boards();
 8000b22:	f000 f933 	bl	8000d8c <test_communication_two_boards>
	  flag = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
	  if (flag == 0)
 8000b2a:	e7f7      	b.n	8000b1c <main+0x22>

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b090      	sub	sp, #64	; 0x40
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	2228      	movs	r2, #40	; 0x28
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fda0 	bl	8002680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fd45 	bl	8001604 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b80:	f000 f819 	bl	8000bb6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 ff94 	bl	8001acc <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000baa:	f000 f804 	bl	8000bb6 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3740      	adds	r7, #64	; 0x40
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <HAL_MspInit+0x5c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_MspInit+0x5c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x5c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x5c>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_MspInit+0x60>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_MspInit+0x60>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010000 	.word	0x40010000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <BusFault_Handler+0x4>

08000c46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f9aa 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <EXTI3_IRQHandler+0x64>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d023      	beq.n	8000cd4 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <EXTI3_IRQHandler+0x68>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10f      	bne.n	8000cb4 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <EXTI3_IRQHandler+0x6c>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <EXTI3_IRQHandler+0x70>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <EXTI3_IRQHandler+0x68>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <EXTI3_IRQHandler+0x70>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <EXTI3_IRQHandler+0x6c>)
 8000cae:	2210      	movs	r2, #16
 8000cb0:	611a      	str	r2, [r3, #16]
 8000cb2:	e009      	b.n	8000cc8 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <EXTI3_IRQHandler+0x68>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <EXTI3_IRQHandler+0x70>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <EXTI3_IRQHandler+0x68>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <EXTI3_IRQHandler+0x64>)
 8000cca:	2208      	movs	r2, #8
 8000ccc:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f000 fc8e 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cd4:	2008      	movs	r0, #8
 8000cd6:	f000 fc73 	bl	80015c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010400 	.word	0x40010400
 8000ce4:	20000070 	.word	0x20000070
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40011400 	.word	0x40011400

08000cf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <EXTI4_IRQHandler+0x2c>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <EXTI4_IRQHandler+0x30>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <EXTI4_IRQHandler+0x2c>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f000 fc6f 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d12:	2010      	movs	r0, #16
 8000d14:	f000 fc54 	bl	80015c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010400 	.word	0x40010400
 8000d20:	200000b4 	.word	0x200000b4

08000d24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <SystemInit+0x5c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <SystemInit+0x5c>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <SystemInit+0x5c>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4911      	ldr	r1, [pc, #68]	; (8000d80 <SystemInit+0x5c>)
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <SystemInit+0x60>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <SystemInit+0x5c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <SystemInit+0x5c>)
 8000d46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <SystemInit+0x5c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SystemInit+0x5c>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystemInit+0x5c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystemInit+0x5c>)
 8000d62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SystemInit+0x5c>)
 8000d6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SystemInit+0x64>)
 8000d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d76:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	f8ff0000 	.word	0xf8ff0000
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <test_communication_two_boards>:
 *      Author: justin
 */

#include "test.h"

void test_communication_two_boards(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
	char test_receive[10] = "";
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	809a      	strh	r2, [r3, #4]
	char test_transmit[10] = "123456789";
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <test_communication_two_boards+0x70>)
 8000da2:	463b      	mov	r3, r7
 8000da4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da6:	c303      	stmia	r3!, {r0, r1}
 8000da8:	801a      	strh	r2, [r3, #0]
	LCD_DrawString(0, 0, test_transmit);
 8000daa:	463b      	mov	r3, r7
 8000dac:	461a      	mov	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fe73 	bl	8000a9c <LCD_DrawString>
	HAL_UART_Transmit(&huart1, test_transmit, sizeof(test_transmit), 0xFFFF);
 8000db6:	4639      	mov	r1, r7
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	4810      	ldr	r0, [pc, #64]	; (8000e00 <test_communication_two_boards+0x74>)
 8000dc0:	f001 f8d1 	bl	8001f66 <HAL_UART_Transmit>
	LCD_DrawString(0, HEIGHT_EN_CHAR, "Transmit Success!!!");
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <test_communication_two_boards+0x78>)
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fe67 	bl	8000a9c <LCD_DrawString>
	HAL_Delay(500);
 8000dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd2:	f000 f917 	bl	8001004 <HAL_Delay>
	HAL_UART_Receive(&huart1, test_receive, sizeof(test_receive), 0xFFFF);
 8000dd6:	f107 010c 	add.w	r1, r7, #12
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	220a      	movs	r2, #10
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <test_communication_two_boards+0x74>)
 8000de2:	f001 f959 	bl	8002098 <HAL_UART_Receive>
	LCD_DrawString(0, HEIGHT_EN_CHAR*2, test_receive);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	461a      	mov	r2, r3
 8000dec:	2120      	movs	r1, #32
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fe54 	bl	8000a9c <LCD_DrawString>

}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08002704 	.word	0x08002704
 8000e00:	20000074 	.word	0x20000074
 8000e04:	080026f0 	.word	0x080026f0

08000e08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_USART1_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f001 f844 	bl	8001ecc <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f7ff feb4 	bl	8000bb6 <Error_Handler>
  }

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000074 	.word	0x20000074
 8000e58:	40013800 	.word	0x40013800

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d131      	bne.n	8000ee0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000ec2:	f000 f9cd 	bl	8001260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000edc:	f000 f9c0 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff ff03 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f001 fbb7 	bl	8002690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff fdea 	bl	8000afa <main>
  bx lr
 8000f26:	4770      	bx	lr
  ldr r3, =_sidata
 8000f28:	08002d30 	.word	0x08002d30
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f34:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f38:	200000bc 	.word	0x200000bc

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f943 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fe32 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f95b 	bl	8001246 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f000 f923 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x1c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x20>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x20>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200000b8 	.word	0x200000b8

08000ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_GetTick+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	200000b8 	.word	0x200000b8

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff0 	bl	8000ff0 <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffe0 	bl	8000ff0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008

0800104c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4906      	ldr	r1, [pc, #24]	; (80010dc <NVIC_EnableIRQ+0x2c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da0b      	bge.n	800110c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <NVIC_SetPriority+0x4c>)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	3b04      	subs	r3, #4
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110a:	e009      	b.n	8001120 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <NVIC_SetPriority+0x50>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	e000e100 	.word	0xe000e100

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f7ff ff90 	bl	80010e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff31 	bl	800104c <NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff46 	bl	8001094 <NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff90 	bl	8001134 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5f 	bl	80010e0 <NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff39 	bl	80010b0 <NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa2 	bl	8001198 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b08b      	sub	sp, #44	; 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e179      	b.n	8001578 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001284:	2201      	movs	r2, #1
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8168 	bne.w	8001572 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a96      	ldr	r2, [pc, #600]	; (8001500 <HAL_GPIO_Init+0x2a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d05e      	beq.n	800136a <HAL_GPIO_Init+0x10a>
 80012ac:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_GPIO_Init+0x2a0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d875      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012b2:	4a94      	ldr	r2, [pc, #592]	; (8001504 <HAL_GPIO_Init+0x2a4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d058      	beq.n	800136a <HAL_GPIO_Init+0x10a>
 80012b8:	4a92      	ldr	r2, [pc, #584]	; (8001504 <HAL_GPIO_Init+0x2a4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d86f      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012be:	4a92      	ldr	r2, [pc, #584]	; (8001508 <HAL_GPIO_Init+0x2a8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d052      	beq.n	800136a <HAL_GPIO_Init+0x10a>
 80012c4:	4a90      	ldr	r2, [pc, #576]	; (8001508 <HAL_GPIO_Init+0x2a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d869      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012ca:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_GPIO_Init+0x2ac>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d04c      	beq.n	800136a <HAL_GPIO_Init+0x10a>
 80012d0:	4a8e      	ldr	r2, [pc, #568]	; (800150c <HAL_GPIO_Init+0x2ac>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d863      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012d6:	4a8e      	ldr	r2, [pc, #568]	; (8001510 <HAL_GPIO_Init+0x2b0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d046      	beq.n	800136a <HAL_GPIO_Init+0x10a>
 80012dc:	4a8c      	ldr	r2, [pc, #560]	; (8001510 <HAL_GPIO_Init+0x2b0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d85d      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d82a      	bhi.n	800133c <HAL_GPIO_Init+0xdc>
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d859      	bhi.n	800139e <HAL_GPIO_Init+0x13e>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <HAL_GPIO_Init+0x90>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	08001345 	.word	0x08001345
 80012f8:	08001357 	.word	0x08001357
 80012fc:	08001399 	.word	0x08001399
 8001300:	0800139f 	.word	0x0800139f
 8001304:	0800139f 	.word	0x0800139f
 8001308:	0800139f 	.word	0x0800139f
 800130c:	0800139f 	.word	0x0800139f
 8001310:	0800139f 	.word	0x0800139f
 8001314:	0800139f 	.word	0x0800139f
 8001318:	0800139f 	.word	0x0800139f
 800131c:	0800139f 	.word	0x0800139f
 8001320:	0800139f 	.word	0x0800139f
 8001324:	0800139f 	.word	0x0800139f
 8001328:	0800139f 	.word	0x0800139f
 800132c:	0800139f 	.word	0x0800139f
 8001330:	0800139f 	.word	0x0800139f
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001361 	.word	0x08001361
 800133c:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_GPIO_Init+0x2b4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001342:	e02c      	b.n	800139e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e029      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	3304      	adds	r3, #4
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e024      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	3308      	adds	r3, #8
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e01f      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	330c      	adds	r3, #12
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e01a      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001372:	2304      	movs	r3, #4
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e013      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	611a      	str	r2, [r3, #16]
          break;
 800138a:	e009      	b.n	80013a0 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	615a      	str	r2, [r3, #20]
          break;
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x140>
          break;
 800139e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2bff      	cmp	r3, #255	; 0xff
 80013a4:	d801      	bhi.n	80013aa <HAL_GPIO_Init+0x14a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_Init+0x14e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	d802      	bhi.n	80013bc <HAL_GPIO_Init+0x15c>
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x162>
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3b08      	subs	r3, #8
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	210f      	movs	r1, #15
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	6a39      	ldr	r1, [r7, #32]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	431a      	orrs	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80c1 	beq.w	8001572 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001408:	4a44      	ldr	r2, [pc, #272]	; (800151c <HAL_GPIO_Init+0x2bc>)
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <HAL_GPIO_Init+0x2c0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d01f      	beq.n	8001474 <HAL_GPIO_Init+0x214>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3b      	ldr	r2, [pc, #236]	; (8001524 <HAL_GPIO_Init+0x2c4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d019      	beq.n	8001470 <HAL_GPIO_Init+0x210>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x20c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a39      	ldr	r2, [pc, #228]	; (800152c <HAL_GPIO_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x208>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x204>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a37      	ldr	r2, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x2d4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x200>
 800145c:	2305      	movs	r3, #5
 800145e:	e00a      	b.n	8001476 <HAL_GPIO_Init+0x216>
 8001460:	2306      	movs	r3, #6
 8001462:	e008      	b.n	8001476 <HAL_GPIO_Init+0x216>
 8001464:	2304      	movs	r3, #4
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x216>
 8001468:	2303      	movs	r3, #3
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x216>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x216>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x216>
 8001474:	2300      	movs	r3, #0
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4313      	orrs	r3, r2
 8001484:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001486:	4925      	ldr	r1, [pc, #148]	; (800151c <HAL_GPIO_Init+0x2bc>)
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4924      	ldr	r1, [pc, #144]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4920      	ldr	r1, [pc, #128]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	491a      	ldr	r1, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d025      	beq.n	800153c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4910      	ldr	r1, [pc, #64]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	e025      	b.n	800154a <HAL_GPIO_Init+0x2ea>
 80014fe:	bf00      	nop
 8001500:	10320000 	.word	0x10320000
 8001504:	10310000 	.word	0x10310000
 8001508:	10220000 	.word	0x10220000
 800150c:	10210000 	.word	0x10210000
 8001510:	10120000 	.word	0x10120000
 8001514:	10110000 	.word	0x10110000
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	40010800 	.word	0x40010800
 8001524:	40010c00 	.word	0x40010c00
 8001528:	40011000 	.word	0x40011000
 800152c:	40011400 	.word	0x40011400
 8001530:	40011800 	.word	0x40011800
 8001534:	40011c00 	.word	0x40011c00
 8001538:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_GPIO_Init+0x32c>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	43db      	mvns	r3, r3
 8001544:	4911      	ldr	r1, [pc, #68]	; (800158c <HAL_GPIO_Init+0x32c>)
 8001546:	4013      	ands	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_GPIO_Init+0x32c>)
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	490c      	ldr	r1, [pc, #48]	; (800158c <HAL_GPIO_Init+0x32c>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_GPIO_Init+0x32c>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	43db      	mvns	r3, r3
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <HAL_GPIO_Init+0x32c>)
 800156e:	4013      	ands	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae82 	bls.w	8001284 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	; 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f806 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8087 	beq.w	800172c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800161e:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d00c      	beq.n	8001644 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800162a:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d112      	bne.n	800165c <HAL_RCC_OscConfig+0x58>
 8001636:	4b8c      	ldr	r3, [pc, #560]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06c      	beq.n	800172a <HAL_RCC_OscConfig+0x126>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d168      	bne.n	800172a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e22d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x70>
 8001666:	4b80      	ldr	r3, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e02e      	b.n	80016d2 <HAL_RCC_OscConfig+0xce>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10c      	bne.n	8001696 <HAL_RCC_OscConfig+0x92>
 800167c:	4b7a      	ldr	r3, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a79      	ldr	r2, [pc, #484]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b77      	ldr	r3, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a76      	ldr	r2, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e01d      	b.n	80016d2 <HAL_RCC_OscConfig+0xce>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0xb6>
 80016a0:	4b71      	ldr	r3, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a70      	ldr	r2, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6d      	ldr	r2, [pc, #436]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0xce>
 80016ba:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a67      	ldr	r2, [pc, #412]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d013      	beq.n	8001702 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fc89 	bl	8000ff0 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fc85 	bl	8000ff0 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1e1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0xde>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fc75 	bl	8000ff0 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fc71 	bl	8000ff0 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1cd      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x106>
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d063      	beq.n	8001800 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d11c      	bne.n	800178a <HAL_RCC_OscConfig+0x186>
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d116      	bne.n	800178a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x170>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e1a1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4939      	ldr	r1, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001788:	e03a      	b.n	8001800 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d020      	beq.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x268>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc2a 	bl	8000ff0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc26 	bl	8000ff0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e182      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4926      	ldr	r1, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x268>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc09 	bl	8000ff0 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc05 	bl	8000ff0 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e161      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d039      	beq.n	8001880 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d019      	beq.n	8001848 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_RCC_OscConfig+0x26c>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fbe9 	bl	8000ff0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fbe5 	bl	8000ff0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e141      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x264>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 fadf 	bl	8001e04 <RCC_Delay>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x26c>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fbcf 	bl	8000ff0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fbcb 	bl	8000ff0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e127      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
 8001868:	40021000 	.word	0x40021000
 800186c:	42420000 	.word	0x42420000
 8001870:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a6 	beq.w	80019da <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a87      	ldr	r2, [pc, #540]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <HAL_RCC_OscConfig+0x4c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x4c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7e      	ldr	r2, [pc, #504]	; (8001ac4 <HAL_RCC_OscConfig+0x4c0>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fb8d 	bl	8000ff0 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fb89 	bl	8000ff0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0e5      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b75      	ldr	r3, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x4c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x30a>
 8001900:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e02d      	b.n	800196a <HAL_RCC_OscConfig+0x366>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x32c>
 8001916:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a69      	ldr	r2, [pc, #420]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a66      	ldr	r2, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x366>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x34e>
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a60      	ldr	r2, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	4b5e      	ldr	r3, [pc, #376]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x366>
 8001952:	4b5b      	ldr	r3, [pc, #364]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb3d 	bl	8000ff0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fb39 	bl	8000ff0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e093      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x376>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fb27 	bl	8000ff0 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fb23 	bl	8000ff0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e07d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d069      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d061      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d146      	bne.n	8001a84 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff faf8 	bl	8000ff0 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff faf4 	bl	8000ff0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e050      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d108      	bne.n	8001a3e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4921      	ldr	r1, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a19      	ldr	r1, [r3, #32]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	491b      	ldr	r1, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fac8 	bl	8000ff0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fac4 	bl	8000ff0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e020      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x460>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fab1 	bl	8000ff0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff faad 	bl	8000ff0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e009      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x48e>
 8001ab0:	e001      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420060 	.word	0x42420060

08001acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ada:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d910      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 0207 	bic.w	r2, r3, #7
 8001af0:	4978      	ldr	r1, [pc, #480]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af8:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0e0      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d020      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a6c      	ldr	r2, [pc, #432]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b28:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3a:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a66      	ldr	r2, [pc, #408]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b40:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b44:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4961      	ldr	r1, [pc, #388]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d06a      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d115      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0a7      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e09b      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e093      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 0203 	bic.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4949      	ldr	r1, [pc, #292]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fa1b 	bl	8000ff0 <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d112      	bne.n	8001bea <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff fa13 	bl	8000ff0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e077      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xfa>
 8001be8:	e027      	b.n	8001c3a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d11d      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f9fc 	bl	8000ff0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e060      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d1ee      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x128>
 8001c16:	e010      	b.n	8001c3a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff f9ea 	bl	8000ff0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d210      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0207 	bic.w	r2, r3, #7
 8001c50:	4920      	ldr	r1, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_RCC_ClockConfig+0x208>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e030      	b.n	8001ccc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4915      	ldr	r1, [pc, #84]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d009      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca8:	f000 f81c 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x20c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4908      	ldr	r1, [pc, #32]	; (8001cdc <HAL_RCC_ClockConfig+0x210>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_RCC_ClockConfig+0x214>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff f951 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08002d10 	.word	0x08002d10
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b490      	push	{r4, r7}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cea:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cec:	1d3c      	adds	r4, r7, #4
 8001cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cf4:	f240 2301 	movw	r3, #513	; 0x201
 8001cf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x46>
 8001d22:	e02b      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d26:	623b      	str	r3, [r7, #32]
      break;
 8001d28:	e02b      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	0c9b      	lsrs	r3, r3, #18
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3328      	adds	r3, #40	; 0x28
 8001d34:	443b      	add	r3, r7
 8001d36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0c5b      	lsrs	r3, r3, #17
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	3328      	adds	r3, #40	; 0x28
 8001d52:	443b      	add	r3, r7
 8001d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d58:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	623b      	str	r3, [r7, #32]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7e:	623b      	str	r3, [r7, #32]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	6a3b      	ldr	r3, [r7, #32]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc90      	pop	{r4, r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	08002710 	.word	0x08002710
 8001d94:	40021000 	.word	0x40021000
 8001d98:	007a1200 	.word	0x007a1200
 8001d9c:	003d0900 	.word	0x003d0900

08001da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db8:	f7ff fff2 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08002d20 	.word	0x08002d20

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de0:	f7ff ffde 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08002d20 	.word	0x08002d20

08001e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <RCC_Delay+0x38>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <RCC_Delay+0x3c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0a5b      	lsrs	r3, r3, #9
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001e20:	bf00      	nop
}
 8001e22:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	60fa      	str	r2, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f8      	bne.n	8001e20 <RCC_Delay+0x1c>
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e034      	b.n	8001ec4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7fe fa80 	bl	8000374 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 fb12 	bl	80024a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	f000 fb8a 	bl	80025a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6858      	ldr	r0, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	f000 fbb5 	bl	8002610 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6892      	ldr	r2, [r2, #8]
 8001eae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	f041 0101 	orr.w	r1, r1, #1
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e03f      	b.n	8001f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe ffb2 	bl	8000e5c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f9b1 	bl	8002278 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b088      	sub	sp, #32
 8001f6a:	af02      	add	r7, sp, #8
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 8083 	bne.w	800208e <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_UART_Transmit+0x2e>
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e07b      	b.n	8002090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Transmit+0x40>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e074      	b.n	8002090 <HAL_UART_Transmit+0x12a>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2221      	movs	r2, #33	; 0x21
 8001fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f818 	bl	8000ff0 <HAL_GetTick>
 8001fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	88fa      	ldrh	r2, [r7, #6]
 8001fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001fce:	e042      	b.n	8002056 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe6:	d122      	bne.n	800202e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f8f6 	bl	80021e4 <UART_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e046      	b.n	8002090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002014:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3302      	adds	r3, #2
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	e017      	b.n	8002056 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	e013      	b.n	8002056 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f8d3 	bl	80021e4 <UART_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e023      	b.n	8002090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1b7      	bne.n	8001fd0 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2200      	movs	r2, #0
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f8ba 	bl	80021e4 <UART_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e00a      	b.n	8002090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	f040 8090 	bne.w	80021da <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_UART_Receive+0x2e>
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e088      	b.n	80021dc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_UART_Receive+0x40>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e081      	b.n	80021dc <HAL_UART_Receive+0x144>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2222      	movs	r2, #34	; 0x22
 80020ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020ee:	f7fe ff7f 	bl	8000ff0 <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8002100:	e05c      	b.n	80021bc <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002118:	d12b      	bne.n	8002172 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2120      	movs	r1, #32
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f85d 	bl	80021e4 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e053      	b.n	80021dc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10c      	bne.n	800215a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214c:	b29a      	uxth	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3302      	adds	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e030      	b.n	80021bc <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	b29b      	uxth	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	e024      	b.n	80021bc <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	2120      	movs	r1, #32
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f831 	bl	80021e4 <UART_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e027      	b.n	80021dc <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	b2ca      	uxtb	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e00a      	b.n	80021bc <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d19d      	bne.n	8002102 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021f4:	e02c      	b.n	8002250 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fc:	d028      	beq.n	8002250 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <UART_WaitOnFlagUntilTimeout+0x30>
 8002204:	f7fe fef4 	bl	8000ff0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	429a      	cmp	r2, r3
 8002212:	d21d      	bcs.n	8002250 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002222:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e00f      	b.n	8002270 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d0c3      	beq.n	80021f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ba:	f023 030c 	bic.w	r3, r3, #12
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6f      	ldr	r2, [pc, #444]	; (80024a0 <UART_SetConfig+0x228>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d16b      	bne.n	80023c0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022e8:	f7ff fd78 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	009a      	lsls	r2, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4a68      	ldr	r2, [pc, #416]	; (80024a4 <UART_SetConfig+0x22c>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	011c      	lsls	r4, r3, #4
 800230c:	f7ff fd66 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002310:	4602      	mov	r2, r0
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fbb2 f5f3 	udiv	r5, r2, r3
 8002326:	f7ff fd59 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 800232a:	4602      	mov	r2, r0
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <UART_SetConfig+0x22c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2264      	movs	r2, #100	; 0x64
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	1aeb      	subs	r3, r5, r3
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	3332      	adds	r3, #50	; 0x32
 8002354:	4a53      	ldr	r2, [pc, #332]	; (80024a4 <UART_SetConfig+0x22c>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	441c      	add	r4, r3
 8002362:	f7ff fd3b 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002366:	4602      	mov	r2, r0
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009a      	lsls	r2, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fbb2 f5f3 	udiv	r5, r2, r3
 800237c:	f7ff fd2e 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002380:	4602      	mov	r2, r0
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009a      	lsls	r2, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <UART_SetConfig+0x22c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	2264      	movs	r2, #100	; 0x64
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	1aeb      	subs	r3, r5, r3
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	3332      	adds	r3, #50	; 0x32
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <UART_SetConfig+0x22c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4422      	add	r2, r4
 80023bc:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80023be:	e06a      	b.n	8002496 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023c0:	f7ff fcf8 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009a      	lsls	r2, r3, #2
 80023ce:	441a      	add	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4a32      	ldr	r2, [pc, #200]	; (80024a4 <UART_SetConfig+0x22c>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	011c      	lsls	r4, r3, #4
 80023e4:	f7ff fce6 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	441a      	add	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80023fe:	f7ff fcd9 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002402:	4602      	mov	r2, r0
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <UART_SetConfig+0x22c>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2264      	movs	r2, #100	; 0x64
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	1aeb      	subs	r3, r5, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <UART_SetConfig+0x22c>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	441c      	add	r4, r3
 800243a:	f7ff fcbb 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 800243e:	4602      	mov	r2, r0
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009a      	lsls	r2, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fbb2 f5f3 	udiv	r5, r2, r3
 8002454:	f7ff fcae 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002458:	4602      	mov	r2, r0
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	441a      	add	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <UART_SetConfig+0x22c>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2264      	movs	r2, #100	; 0x64
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	1aeb      	subs	r3, r5, r3
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	3332      	adds	r3, #50	; 0x32
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <UART_SetConfig+0x22c>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4422      	add	r2, r4
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bdb0      	pop	{r4, r5, r7, pc}
 800249e:	bf00      	nop
 80024a0:	40013800 	.word	0x40013800
 80024a4:	51eb851f 	.word	0x51eb851f

080024a8 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f023 0101 	bic.w	r1, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d132      	bne.n	8002538 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <FSMC_NORSRAM_Init+0xfc>)
 80024de:	4013      	ands	r3, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6851      	ldr	r1, [r2, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	4311      	orrs	r1, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	4311      	orrs	r1, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	6912      	ldr	r2, [r2, #16]
 80024f4:	4311      	orrs	r1, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6952      	ldr	r2, [r2, #20]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6992      	ldr	r2, [r2, #24]
 8002500:	4311      	orrs	r1, r2
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	69d2      	ldr	r2, [r2, #28]
 8002506:	4311      	orrs	r1, r2
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	6a12      	ldr	r2, [r2, #32]
 800250c:	4311      	orrs	r1, r2
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002512:	4311      	orrs	r1, r2
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002518:	4311      	orrs	r1, r2
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800251e:	4311      	orrs	r1, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002524:	430a      	orrs	r2, r1
 8002526:	4313      	orrs	r3, r2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002536:	e02f      	b.n	8002598 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <FSMC_NORSRAM_Init+0xfc>)
 8002544:	4013      	ands	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	6851      	ldr	r1, [r2, #4]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	4311      	orrs	r1, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68d2      	ldr	r2, [r2, #12]
 8002554:	4311      	orrs	r1, r2
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	4311      	orrs	r1, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6952      	ldr	r2, [r2, #20]
 8002560:	4311      	orrs	r1, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6992      	ldr	r2, [r2, #24]
 8002566:	4311      	orrs	r1, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	69d2      	ldr	r2, [r2, #28]
 800256c:	4311      	orrs	r1, r2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6a12      	ldr	r2, [r2, #32]
 8002572:	4311      	orrs	r1, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002578:	4311      	orrs	r1, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800257e:	4311      	orrs	r1, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002584:	4311      	orrs	r1, r2
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800258a:	4311      	orrs	r1, r2
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4319      	orrs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	fff70081 	.word	0xfff70081

080025a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025be:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	3b02      	subs	r3, #2
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	3201      	adds	r2, #1
 80025fc:	4319      	orrs	r1, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002624:	d11d      	bne.n	8002662 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002630:	4013      	ands	r3, r2
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	6811      	ldr	r1, [r2, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	6852      	ldr	r2, [r2, #4]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	4311      	orrs	r1, r2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	0212      	lsls	r2, r2, #8
 8002644:	4311      	orrs	r1, r2
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	6992      	ldr	r2, [r2, #24]
 800264a:	4311      	orrs	r1, r2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	68d2      	ldr	r2, [r2, #12]
 8002650:	0412      	lsls	r2, r2, #16
 8002652:	430a      	orrs	r2, r1
 8002654:	ea43 0102 	orr.w	r1, r3, r2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002660:	e005      	b.n	800266e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	cff00000 	.word	0xcff00000

08002680 <memset>:
 8002680:	4603      	mov	r3, r0
 8002682:	4402      	add	r2, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	2600      	movs	r6, #0
 8002694:	4d0c      	ldr	r5, [pc, #48]	; (80026c8 <__libc_init_array+0x38>)
 8002696:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002698:	1b64      	subs	r4, r4, r5
 800269a:	10a4      	asrs	r4, r4, #2
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	f000 f81a 	bl	80026d8 <_init>
 80026a4:	2600      	movs	r6, #0
 80026a6:	4d0a      	ldr	r5, [pc, #40]	; (80026d0 <__libc_init_array+0x40>)
 80026a8:	4c0a      	ldr	r4, [pc, #40]	; (80026d4 <__libc_init_array+0x44>)
 80026aa:	1b64      	subs	r4, r4, r5
 80026ac:	10a4      	asrs	r4, r4, #2
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08002d28 	.word	0x08002d28
 80026cc:	08002d28 	.word	0x08002d28
 80026d0:	08002d28 	.word	0x08002d28
 80026d4:	08002d2c 	.word	0x08002d2c

080026d8 <_init>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr

080026e4 <_fini>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr
